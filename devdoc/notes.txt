==================================================
Dumb things you always forget for a release build
==================================================

Adding support for a new release of the Kubernetes client
---------------------------------------------------------

Add new entries to build_helper.json for the release:

You make a new entry for the release like "rel_1_27", and the value is a dict
with three keys:

- the 'preferred_versions' key helps the builder sort out what version of a
  resource to prefer when reading the same named resource from multiple groups
  in the same version (there are a short list of usual culprits here like Event,
  Subject, Token, etc).
- the 'deprecations' key contains a Python dict rendered as a string; this dict
  maps certain version/kind combos to alternately named classes that were constructed
  in accordance to the preferred versions key above. This string is turned back into
  a dict and written to a file that is loaded at hikaru run time to provide the mappings
  needed just in time. Usually this only involves the Event kind, but hopefully the K8s
  team will eventually finally drop this one and this can be a string with an empty
  dict.
- the 'version' key contains a string that is the version of supported release of the
  K8s client. So for instance, when we first release a hikaru model for the K8s 27.x libs,
  this should have the value '1.0.0'. If the 27.x then gets a new version, those models should
  be rebuilt and this version value bumped up accordingly, say '1.1.0'. Alternatively, if
  a patch is needed on the model due to a discovered error, the version should be changed
  to '1.0.1'. Finally, if something drastic changes in the core and the models are all
  revamped, the version should be '2.0.0'.

You can start by copying the previous release's entries, but may need to adjust
due to testing results. The builder will crash if you don't make an entry
for the new release (this is deliberate to ensure you fix build_helper.json)
and not just blindly provide a default that won't cause an error but will
be hard to track down when you lose versions of resources you thought you
had. It's sensible to pare this down to the minimum required, but it's
harmless to have too many (but unneeded) entries.


Make a method/class map snapshot
--------------------------------
cd devtools
python methodmap.py > release_maps/{snapshot_file}  # once the model has settled down
python mcompare.py {oldmap} {newmap}   # the one from above

Where to change version numbers for a new release
-------------------------------------------------
hikaru/__init__.py: __version__
hikaru/setup.py: __version__
hikaru/README.rst
hikaru/release_notes.rst

Changes to setup.py
-------------------
Fix the version number as above
Add the new model packages to the 'packages' key
Delete any newly obsolescent packages

Removing deprecated support for a K8s release
------------------------------------------------
Remove all tests that have the release number in them
Remove all test run scripts that have the release number in them
Update the whole test run script to no longer run those other scripts/tests
Remove all build tools that have the release number in them
Adjust the build tools to create a new default and deprecated release
Re-build the release that is now deprecated
Build the new release to be the default
Adjust setup.py as above
Remove the model modules from hikaru.model


Other build tasks
-----------------
- in docs/ create a new reference document for the release (rel-1-XX-v1.rst), and
  be sure to edit the content to contain all the correct release numbers
- update docs/index.rst to include the new ref docs and remove any deprecated
  ref docs
- build the docs to be sure they are correct (make clean/html); check to be sure
  that the release number is picked up correctly
- Update the table in docs/model-releases-and-versions.rst

Building
--------
building the package: python setup.py bdist_wheel

Build testing process
---------------------
For each supported version of Python:
    create a virtual env 'ht' (use virtualenv for 3.8, venv for the rest)
    activate ht
    pip install the installation package
    pip install the maintainers requirements
    cd into hikaru/tests; DO NOT set PYTHONPATH so you will use the installed package!
    execute ./runall.bsh, note results
    deactivate the virtual env
    rm -rf ht

Publishing to PyPI
------------------
publishing to test PyPI: twine upload --repository-url https://test.pypi.org/legacy/ dist/*
publishing to official PyPI: twine upload dist/*

CLA assistant at:  https://cla-assistant.io/
Assistant repo: https://github.com/cla-assistant/cla-assistant

SO question about finding the types inside a Union
https://stackoverflow.com/questions/45957615/check-a-variable-against-union-type-at-runtime-in-python-3-6

The JSON Swagger file that describes all objects in the API is here:
https://github.com/kubernetes-client/python/blob/master/kubernetes/swagger.json.unprocessed

# example
from inspect import signature

# give me all the parameters for the dunder init for Outer
[p for p in signature(Outer.__init__).parameters.values()]
# p.kind tells whether positional, keyword, etc

# with this class:
class Outer(object):
    f2: float
    s1: str
    l2: Optional[List[Inner]] = dataclasses.field(default_factory=list)

# this expression finds l2's optional type, which is 'list':
get_origin(get_args(dataclasses.fields(Outer)[2].type)[0])
# and this one finds l2's list element type
get_args(get_args(dataclasses.fields(Outer)[2].type)[0])[0]

# if you hav a single field object for l2:
f = dataclasses.fields(Outer)[2]
# then it's just a matter of drilling into the .type attr
# once you peel away the Union that is generated by Optional:
inner_type = get_args(dataclasses.fields(Outer)[2].type)[0]
# this gets the container type (list):
get_origin(inner_type)
# and this gets the type in the list
get_args(inner_type)[0]

READMEs
========

The font for the main hikaru logo is UNKNONWN

The font for the subpackages is "Maiandra GD" size 80, which is available in
GIMP at least on Windows (ver 2.10.34)
