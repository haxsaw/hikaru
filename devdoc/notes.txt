==================================================
Dumb things you always forget for a release build
==================================================

Make a method/class map snapshot
--------------------------------
cd devtools
python methodmap.py > release_maps/{snapshot_file}  # once the model has settled down
python mcompare.py {oldmap} {newmap}   # the one from above

Where to change version numbers for a new release
-------------------------------------------------
hikaru/__init__.py: __version__
hikaru/setup.py: __version__
hikaru/README.rst

Other build tasks
-----------------
- in docs/ create a new reference document for the release (rel-1-XX-v1.rst), and
  be sure to edit the content to contain all the correct release numbers
- update docs/index.rst to include the new ref docs and remove any deprecated
  ref docs
- build the docs to be sure they are correct (make clean/html); check to be sure
  that the release number is picked up correctly
- Edit setup.py to include the new model packages and remove any deprecated ones (if any)

Building
--------
building the package: python setup.py bdist_wheel

Build testing process
---------------------
For each supported version of Python:
    create a virtual env 'ht' (use virtualenv for 3.8, venv for the rest)
    activate ht
    pip install the installation package
    pip install the maintainers requirements
    cd into hikaru/tests; DO NOT set PYTHONPATH so you will use the installed package!
    execute ./runall.bsh, note results
    deactivate the virtual env
    rm -rf ht

Publishing to PyPI
------------------
publishing to official PyPI: twine upload dist/*
publishing to test PyPI: twine upload --repository-url https://test.pypi.org/legacy/ dist/*

CLA assistant at:  https://cla-assistant.io/
Assistant repo: https://github.com/cla-assistant/cla-assistant

SO question about finding the types inside a Union
https://stackoverflow.com/questions/45957615/check-a-variable-against-union-type-at-runtime-in-python-3-6

The JSON Swagger file that describes all objects in the API is here:
https://github.com/kubernetes-client/python/blob/master/kubernetes/swagger.json.unprocessed

# example
from inspect import signature

# give me all the parameters for the dunder init for Outer
[p for p in signature(Outer.__init__).parameters.values()]
# p.kind tells whether positional, keyword, etc

# with this class:
class Outer(object):
    f2: float
    s1: str
    l2: Optional[List[Inner]] = dataclasses.field(default_factory=list)

# this expression finds l2's optional type, which is 'list':
get_origin(get_args(dataclasses.fields(Outer)[2].type)[0])
# and this one finds l2's list element type
get_args(get_args(dataclasses.fields(Outer)[2].type)[0])[0]

# if you hav a single field object for l2:
f = dataclasses.fields(Outer)[2]
# then it's just a matter of drilling into the .type attr
# once you peel away the Union that is generated by Optional:
inner_type = get_args(dataclasses.fields(Outer)[2].type)[0]
# this gets the container type (list):
get_origin(inner_type)
# and this gets the type in the list
get_args(inner_type)[0]


x = P
1234
