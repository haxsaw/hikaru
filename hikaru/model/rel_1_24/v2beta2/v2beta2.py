#
# Copyright (c) 2021 Incisive Technology Ltd
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""
DO NOT EDIT THIS FILE!

This module is automatically generated using the Hikaru build program that turns
a Kubernetes swagger spec into the code for the hikaru.model package.
"""


from hikaru.meta import HikaruBase, HikaruDocumentBase, KubernetesException, WatcherDescriptor
from hikaru.generate import get_clean_dict
from hikaru.utils import Response
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field, InitVar
from kubernetes.client import CoreV1Api
from ..unversioned import *

from kubernetes.client import ApiClient
from kubernetes.client import AutoscalingV2beta2Api
from ..v1 import Status
from ..v1 import ObjectMeta
from ..v1 import DeleteOptions
from ..v1 import ListMeta
from ..v1 import LabelSelector


@dataclass
class ContainerResourceMetricSource(HikaruBase):
    r"""
    ContainerResourceMetricSource indicates how to scale on a resource metric known to
    Kubernetes, as specified in requests and limits, describing each pod in the current
    scale target (e.g. CPU or memory). The values will be averaged together before being
    compared to the target. Such metrics are built in to Kubernetes, and have special
    scaling options on top of those available to normal per-pod metrics using the "pods"
    source. Only one "target" type should be set.

    Full name: ContainerResourceMetricSource

    Attributes:
    container: container is the name of the container in the pods of the scaling target
    name: name is the name of the resource in question.
    target: target specifies the target value for the given metric
    """

    container: str
    name: str
    target: "MetricTarget"


@dataclass
class ContainerResourceMetricStatus(HikaruBase):
    r"""
    ContainerResourceMetricStatus indicates the current value of a resource metric known
    to Kubernetes, as specified in requests and limits, describing a single container in
    each pod in the current scale target (e.g. CPU or memory). Such metrics are built in
    to Kubernetes, and have special scaling options on top of those available to normal
    per-pod metrics using the "pods" source.

    Full name: ContainerResourceMetricStatus

    Attributes:
    container: Container is the name of the container in the pods of the scaling target
    current: current contains the current value for the given metric
    name: Name is the name of the resource in question.
    """

    container: str
    current: "MetricValueStatus"
    name: str


@dataclass
class CrossVersionObjectReference(HikaruBase):
    r"""
    CrossVersionObjectReference contains enough information to let you identify the
    referred resource.

    Full name: CrossVersionObjectReference

    Attributes:
    kind: Kind of the referent; More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
    name: Name of the referent; More info:
        http://kubernetes.io/docs/user-guide/identifiers#names
    apiVersion: API version of the referent
    """

    kind: str
    name: str
    apiVersion: Optional[str] = "v2beta2"


@dataclass
class ExternalMetricSource(HikaruBase):
    r"""
    ExternalMetricSource indicates how to scale on a metric not associated with any
    Kubernetes object (for example length of queue in cloud messaging service, or QPS from
    loadbalancer running outside of cluster).

    Full name: ExternalMetricSource

    Attributes:
    metric: metric identifies the target metric by name and selector
    target: target specifies the target value for the given metric
    """

    metric: "MetricIdentifier"
    target: "MetricTarget"


@dataclass
class ExternalMetricStatus(HikaruBase):
    r"""
    ExternalMetricStatus indicates the current value of a global metric not associated
    with any Kubernetes object.

    Full name: ExternalMetricStatus

    Attributes:
    current: current contains the current value for the given metric
    metric: metric identifies the target metric by name and selector
    """

    current: "MetricValueStatus"
    metric: "MetricIdentifier"


@dataclass
class HPAScalingPolicy(HikaruBase):
    r"""
    HPAScalingPolicy is a single policy which must hold true for a specified past
    interval.

    Full name: HPAScalingPolicy

    Attributes:
    periodSeconds: PeriodSeconds specifies the window of time for which the policy should
        hold true. PeriodSeconds must be greater than zero and less than or equal to 1800
        (30 min).
    type: Type is used to specify the scaling policy.
    value: Value contains the amount of change which is permitted by the policy. It must
        be greater than zero
    """

    periodSeconds: int
    type: str
    value: int


@dataclass
class HPAScalingRules(HikaruBase):
    r"""
    HPAScalingRules configures the scaling behavior for one direction. These Rules are
    applied after calculating DesiredReplicas from metrics for the HPA. They can limit the
    scaling velocity by specifying scaling policies. They can prevent flapping by
    specifying the stabilization window, so that the number of replicas is not set
    instantly, instead, the safest value from the stabilization window is chosen.

    Full name: HPAScalingRules

    Attributes:
    selectPolicy: selectPolicy is used to specify which policy should be used. If not set,
        the default value MaxPolicySelect is used.
    stabilizationWindowSeconds: StabilizationWindowSeconds is the number of seconds for
        which past recommendations should be considered while scaling up or scaling down.
        StabilizationWindowSeconds must be greater than or equal to zero and less than or
        equal to 3600 (one hour). If not set, use the default values: - For scale up: 0
        (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization
        window is 300 seconds long).
    policies: policies is a list of potential scaling polices which can be used during
        scaling. At least one policy must be specified, otherwise the HPAScalingRules will
        be discarded as invalid
    """

    selectPolicy: Optional[str] = None
    stabilizationWindowSeconds: Optional[int] = None
    policies: Optional[List["HPAScalingPolicy"]] = field(default_factory=list)


@dataclass
class HorizontalPodAutoscaler(HikaruDocumentBase):
    r"""
    HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which
    automatically manages the replica count of any resource implementing the scale
    subresource based on the metrics specified.

    Full name: HorizontalPodAutoscaler

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: metadata is the standard object metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: spec is the specification for the behaviour of the autoscaler. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
    status: status is the current information about the autoscaler.
    """

    _version = "v2beta2"
    apiVersion: Optional[str] = "autoscaling/v2beta2"
    kind: Optional[str] = "HorizontalPodAutoscaler"
    metadata: Optional["ObjectMeta"] = None
    spec: Optional["HorizontalPodAutoscalerSpec"] = None
    status: Optional["HorizontalPodAutoscalerStatus"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def deleteCollectionNamespacedHorizontalPodAutoscaler(
        namespace: str,
        continue_: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_selector: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        timeout_seconds: Optional[int] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["HorizontalPodAutoscaler"]:
        r"""
        delete collection of HorizontalPodAutoscaler

        operationID: deleteCollectionNamespacedHorizontalPodAutoscaler
        path: /apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers

        :param namespace: namespace for the resource
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AutoscalingV2beta2Api(api_client=client_to_use)
        the_method = getattr(
            inst,
            "delete_collection_namespaced_horizontal_pod_autoscaler_with_http_info",
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_collection_namespaced_horizontal_pod_autoscaler_with_http_info "
                "on AutoscalingV2beta2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["namespace"] = namespace
        all_args["_continue"] = continue_
        all_args["dry_run"] = dry_run
        all_args["field_selector"] = field_selector
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["timeout_seconds"] = timeout_seconds
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["HorizontalPodAutoscaler"] = Response["HorizontalPodAutoscaler"](
            result, codes_returning_objects
        )
        return resp

    def createNamespacedHorizontalPodAutoscaler(
        self,
        namespace: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["HorizontalPodAutoscaler"]:
        r"""
        create a HorizontalPodAutoscaler

        operationID: createNamespacedHorizontalPodAutoscaler
        path: /apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers

        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields, provided that the `ServerSideFieldValidation`
            feature gate is also enabled. Valid values are: - Ignore: This will
            ignore any unknown fields that are silently dropped from the object,
            and will ignore all but the last duplicate field that the decoder
            encounters. This is the default behavior prior to v1.23 and is the
            default behavior when the `ServerSideFieldValidation` feature gate
            is disabled. - Warn: This will send a warning via the standard
            warning response header for each unknown field that is dropped from
            the object, and for each duplicate field that is encountered. The
            request will still succeed if there are no other errors, and will
            only persist the last of any duplicate fields. This is the default
            when the `ServerSideFieldValidation` feature gate is enabled. -
            Strict: This will fail the request with a BadRequest error if any
            unknown fields would be dropped from the object, or if any duplicate
            fields are present. The error returned from the server will contain
            all unknown and duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   HorizontalPodAutoscaler    OK
          201   HorizontalPodAutoscaler    Created
          202   HorizontalPodAutoscaler    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AutoscalingV2beta2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "create_namespaced_horizontal_pod_autoscaler_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_namespaced_horizontal_pod_autoscaler_with_http_info "
                "on AutoscalingV2beta2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        resp: Response["HorizontalPodAutoscaler"] = Response["HorizontalPodAutoscaler"](
            result, codes_returning_objects
        )
        return resp

    def create(
        self,
        namespace: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
    ) -> "HorizontalPodAutoscaler":
        r"""
            create a HorizontalPodAutoscaler

            operationID: createNamespacedHorizontalPodAutoscaler
            path: /apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers

            :param namespace: namespace for the resource. NOTE: if you leave out the
                namespace from the arguments you *must* have filled in the namespace
                attribute in the metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint.
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields, provided that the `ServerSideFieldValidation`
                feature gate is also enabled. Valid values are: - Ignore: This will
                ignore any unknown fields that are silently dropped from the object,
                and will ignore all but the last duplicate field that the decoder
                encounters. This is the default behavior prior to v1.23 and is the
                default behavior when the `ServerSideFieldValidation` feature gate
                is disabled. - Warn: This will send a warning via the standard
                warning response header for each unknown field that is dropped from
                the object, and for each duplicate field that is encountered. The
                request will still succeed if there are no other errors, and will
                only persist the last of any duplicate fields. This is the default
                when the `ServerSideFieldValidation` feature gate is enabled. -
                Strict: This will fail the request with a BadRequest error if any
                unknown fields would be dropped from the object, or if any duplicate
                fields are present. The error returned from the server will contain
                all unknown and duplicate fields encountered.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if namespace is not None:
            effective_namespace = namespace
        elif not self.metadata or not self.metadata.namespace:
            raise RuntimeError(
                "There must be a namespace supplied in either "
                "the arguments to create() or in a "
                "HorizontalPodAutoscaler's metadata"
            )
        else:
            effective_namespace = self.metadata.namespace
        res = self.createNamespacedHorizontalPodAutoscaler(
            namespace=effective_namespace,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def deleteNamespacedHorizontalPodAutoscaler(
        name: str,
        namespace: str,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["HorizontalPodAutoscaler"]:
        r"""
        delete a HorizontalPodAutoscaler

        operationID: deleteNamespacedHorizontalPodAutoscaler
        path: /apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          202   Status    Accepted
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AutoscalingV2beta2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "delete_namespaced_horizontal_pod_autoscaler_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_namespaced_horizontal_pod_autoscaler_with_http_info "
                "on AutoscalingV2beta2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 202)
        resp: Response["HorizontalPodAutoscaler"] = Response["HorizontalPodAutoscaler"](
            result, codes_returning_objects
        )
        return resp

    def delete(
        self,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        client: ApiClient = None,
    ) -> "HorizontalPodAutoscaler":
        r"""
            delete a HorizontalPodAutoscaler

            operationID: deleteNamespacedHorizontalPodAutoscaler
            path: /apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param namespace: namespace for the resource. NOTE: if you leave out the
                namespace from the arguments you *must* have filled in the namespace
                attribute in the metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param grace_period_seconds: The duration in seconds before the object should
                be deleted. Value must be non-negative integer. The value zero
                indicates delete immediately. If this value is nil, the default
                grace period for the specified type will be used. Defaults to a per
                object value if not specified. zero means delete immediately.
            :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
                field will be deprecated in 1.7. Should the dependent objects be
                orphaned. If true/false, the "orphan" finalizer will be added
                to/removed from the object's finalizers list. Either this field or
                PropagationPolicy may be set, but not both.
            :param propagation_policy: Whether and how garbage collection will be
                performed. Either this field or OrphanDependents may be set, but not
                both. The default policy is decided by the existing finalizer set in
                the metadata.finalizers and the resource-specific default policy.
                Acceptable values are: 'Orphan' - orphan the dependents;
                'Background' - allow the garbage collector to delete the dependents
                in the background; 'Foreground' - a cascading policy that deletes
                all dependents in the foreground.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if namespace is not None:
            effective_namespace = namespace
        elif not self.metadata or not self.metadata.namespace:
            raise RuntimeError(
                "There must be a namespace supplied in either "
                "the arguments to delete() or in a "
                "HorizontalPodAutoscaler's metadata"
            )
        else:
            effective_namespace = self.metadata.namespace

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to delete() or in a "
                "HorizontalPodAutoscaler's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.deleteNamespacedHorizontalPodAutoscaler(
            name=effective_name,
            namespace=effective_namespace,
            dry_run=dry_run,
            grace_period_seconds=grace_period_seconds,
            orphan_dependents=orphan_dependents,
            propagation_policy=propagation_policy,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    @staticmethod
    def readNamespacedHorizontalPodAutoscaler(
        name: str,
        namespace: str,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["HorizontalPodAutoscaler"]:
        r"""
        read the specified HorizontalPodAutoscaler

        operationID: readNamespacedHorizontalPodAutoscaler
        path: /apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   HorizontalPodAutoscaler    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AutoscalingV2beta2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "read_namespaced_horizontal_pod_autoscaler_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "read_namespaced_horizontal_pod_autoscaler_with_http_info "
                "on AutoscalingV2beta2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["HorizontalPodAutoscaler"] = Response["HorizontalPodAutoscaler"](
            result, codes_returning_objects
        )
        return resp

    def read(
        self,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
    ) -> "HorizontalPodAutoscaler":
        r"""
            read the specified HorizontalPodAutoscaler

            operationID: readNamespacedHorizontalPodAutoscaler
            path: /apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param namespace: namespace for the resource. NOTE: if you leave out the
                namespace from the arguments you *must* have filled in the namespace
                attribute in the metadata for the resource!
            :param pretty: If 'true', then the output is pretty printed.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if namespace is not None:
            effective_namespace = namespace
        elif not self.metadata or not self.metadata.namespace:
            raise RuntimeError(
                "There must be a namespace supplied in either "
                "the arguments to read() or in a "
                "HorizontalPodAutoscaler's metadata"
            )
        else:
            effective_namespace = self.metadata.namespace

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to read() or in a "
                "HorizontalPodAutoscaler's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.readNamespacedHorizontalPodAutoscaler(
            name=effective_name,
            namespace=effective_namespace,
            pretty=pretty,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    def patchNamespacedHorizontalPodAutoscaler(
        self,
        name: str,
        namespace: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["HorizontalPodAutoscaler"]:
        r"""
        partially update the specified HorizontalPodAutoscaler

        operationID: patchNamespacedHorizontalPodAutoscaler
        path: /apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint. This field is
            required for apply requests (application/apply-patch) but optional
            for non-apply patch types (JsonPatch, MergePatch,
            StrategicMergePatch).
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields, provided that the `ServerSideFieldValidation`
            feature gate is also enabled. Valid values are: - Ignore: This will
            ignore any unknown fields that are silently dropped from the object,
            and will ignore all but the last duplicate field that the decoder
            encounters. This is the default behavior prior to v1.23 and is the
            default behavior when the `ServerSideFieldValidation` feature gate
            is disabled. - Warn: This will send a warning via the standard
            warning response header for each unknown field that is dropped from
            the object, and for each duplicate field that is encountered. The
            request will still succeed if there are no other errors, and will
            only persist the last of any duplicate fields. This is the default
            when the `ServerSideFieldValidation` feature gate is enabled. -
            Strict: This will fail the request with a BadRequest error if any
            unknown fields would be dropped from the object, or if any duplicate
            fields are present. The error returned from the server will contain
            all unknown and duplicate fields encountered.
        :param force: Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   HorizontalPodAutoscaler    OK
          201   HorizontalPodAutoscaler    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AutoscalingV2beta2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "patch_namespaced_horizontal_pod_autoscaler_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "patch_namespaced_horizontal_pod_autoscaler_with_http_info "
                "on AutoscalingV2beta2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        all_args["force"] = force
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["HorizontalPodAutoscaler"] = Response["HorizontalPodAutoscaler"](
            result, codes_returning_objects
        )
        return resp

    def update(
        self,
        namespace: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
    ) -> "HorizontalPodAutoscaler":
        r"""
            partially update the specified HorizontalPodAutoscaler

            operationID: patchNamespacedHorizontalPodAutoscaler
            path: /apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}

            :param namespace: namespace for the resource. NOTE: if you leave out the
                namespace from the arguments you *must* have filled in the namespace
                attribute in the metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint. This field is
                required for apply requests (application/apply-patch) but optional
                for non-apply patch types (JsonPatch, MergePatch,
                StrategicMergePatch).
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields, provided that the `ServerSideFieldValidation`
                feature gate is also enabled. Valid values are: - Ignore: This will
                ignore any unknown fields that are silently dropped from the object,
                and will ignore all but the last duplicate field that the decoder
                encounters. This is the default behavior prior to v1.23 and is the
                default behavior when the `ServerSideFieldValidation` feature gate
                is disabled. - Warn: This will send a warning via the standard
                warning response header for each unknown field that is dropped from
                the object, and for each duplicate field that is encountered. The
                request will still succeed if there are no other errors, and will
                only persist the last of any duplicate fields. This is the default
                when the `ServerSideFieldValidation` feature gate is enabled. -
                Strict: This will fail the request with a BadRequest error if any
                unknown fields would be dropped from the object, or if any duplicate
                fields are present. The error returned from the server will contain
                all unknown and duplicate fields encountered.
            :param force: Force is going to "force" Apply requests. It means user will
                re-acquire conflicting fields owned by other people. Force flag must
                be unset for non-apply patch requests.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if namespace is not None:
            effective_namespace = namespace
        elif not self.metadata or not self.metadata.namespace:
            raise RuntimeError(
                "There must be a namespace supplied in either "
                "the arguments to update() or in a "
                "HorizontalPodAutoscaler's metadata"
            )
        else:
            effective_namespace = self.metadata.namespace
        res = self.patchNamespacedHorizontalPodAutoscaler(
            name=self.metadata.name,
            namespace=effective_namespace,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            force=force,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def __enter__(self):
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        passed = ex_type is None and ex_value is None and ex_traceback is None
        has_rollback = hasattr(self, "__rollback")
        if passed:
            try:
                self.update()
            except Exception:
                if has_rollback:
                    self.merge(getattr(self, "__rollback"), overwrite=True)
                    delattr(self, "__rollback")
                raise
        if has_rollback:
            if not passed:
                self.merge(getattr(self, "__rollback"), overwrite=True)
            delattr(self, "__rollback")
        return False

    def replaceNamespacedHorizontalPodAutoscaler(
        self,
        name: str,
        namespace: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["HorizontalPodAutoscaler"]:
        r"""
        replace the specified HorizontalPodAutoscaler

        operationID: replaceNamespacedHorizontalPodAutoscaler
        path: /apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields, provided that the `ServerSideFieldValidation`
            feature gate is also enabled. Valid values are: - Ignore: This will
            ignore any unknown fields that are silently dropped from the object,
            and will ignore all but the last duplicate field that the decoder
            encounters. This is the default behavior prior to v1.23 and is the
            default behavior when the `ServerSideFieldValidation` feature gate
            is disabled. - Warn: This will send a warning via the standard
            warning response header for each unknown field that is dropped from
            the object, and for each duplicate field that is encountered. The
            request will still succeed if there are no other errors, and will
            only persist the last of any duplicate fields. This is the default
            when the `ServerSideFieldValidation` feature gate is enabled. -
            Strict: This will fail the request with a BadRequest error if any
            unknown fields would be dropped from the object, or if any duplicate
            fields are present. The error returned from the server will contain
            all unknown and duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   HorizontalPodAutoscaler    OK
          201   HorizontalPodAutoscaler    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AutoscalingV2beta2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "replace_namespaced_horizontal_pod_autoscaler_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_namespaced_horizontal_pod_autoscaler_with_http_info "
                "on AutoscalingV2beta2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["HorizontalPodAutoscaler"] = Response["HorizontalPodAutoscaler"](
            result, codes_returning_objects
        )
        return resp

    def replaceNamespacedHorizontalPodAutoscalerStatus(
        self,
        name: str,
        namespace: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["HorizontalPodAutoscaler"]:
        r"""
        replace status of the specified HorizontalPodAutoscaler

        operationID: replaceNamespacedHorizontalPodAutoscalerStatus
        path: /apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields, provided that the `ServerSideFieldValidation`
            feature gate is also enabled. Valid values are: - Ignore: This will
            ignore any unknown fields that are silently dropped from the object,
            and will ignore all but the last duplicate field that the decoder
            encounters. This is the default behavior prior to v1.23 and is the
            default behavior when the `ServerSideFieldValidation` feature gate
            is disabled. - Warn: This will send a warning via the standard
            warning response header for each unknown field that is dropped from
            the object, and for each duplicate field that is encountered. The
            request will still succeed if there are no other errors, and will
            only persist the last of any duplicate fields. This is the default
            when the `ServerSideFieldValidation` feature gate is enabled. -
            Strict: This will fail the request with a BadRequest error if any
            unknown fields would be dropped from the object, or if any duplicate
            fields are present. The error returned from the server will contain
            all unknown and duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   HorizontalPodAutoscaler    OK
          201   HorizontalPodAutoscaler    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AutoscalingV2beta2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "replace_namespaced_horizontal_pod_autoscaler_status_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_namespaced_horizontal_pod_autoscaler_status_with_http_info "
                "on AutoscalingV2beta2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["HorizontalPodAutoscaler"] = Response["HorizontalPodAutoscaler"](
            result, codes_returning_objects
        )
        return resp


@dataclass
class HorizontalPodAutoscalerBehavior(HikaruBase):
    r"""
    HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both
    Up and Down directions (scaleUp and scaleDown fields respectively).

    Full name: HorizontalPodAutoscalerBehavior

    Attributes:
    scaleDown: scaleDown is scaling policy for scaling Down. If not set, the default value
        is to allow to scale down to minReplicas pods, with a 300 second stabilization
        window (i.e., the highest recommendation for the last 300sec is used).
    scaleUp: scaleUp is scaling policy for scaling Up. If not set, the default value is
        the higher of: * increase no more than 4 pods per 60 seconds * double the number
        of pods per 60 seconds No stabilization is used.
    """

    scaleDown: Optional["HPAScalingRules"] = None
    scaleUp: Optional["HPAScalingRules"] = None


@dataclass
class HorizontalPodAutoscalerCondition(HikaruBase):
    r"""
    HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a
    certain point.

    Full name: HorizontalPodAutoscalerCondition

    Attributes:
    status: status is the status of the condition (True, False, Unknown)
    type: type describes the current condition
    lastTransitionTime: lastTransitionTime is the last time the condition transitioned
        from one status to another
    message: message is a human-readable explanation containing details about the
        transition
    reason: reason is the reason for the condition's last transition.
    """

    status: str
    type: str
    lastTransitionTime: Optional[str] = None
    message: Optional[str] = None
    reason: Optional[str] = None


@dataclass
class HorizontalPodAutoscalerList(HikaruDocumentBase):
    r"""
    HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.

    Full name: HorizontalPodAutoscalerList

    Attributes:
    items: items is the list of horizontal pod autoscaler objects.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: metadata is the standard list metadata.
    """

    _version = "v2beta2"
    items: List["HorizontalPodAutoscaler"]
    apiVersion: Optional[str] = "autoscaling/v2beta2"
    kind: Optional[str] = "HorizontalPodAutoscalerList"
    metadata: Optional["ListMeta"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def listHorizontalPodAutoscalerForAllNamespaces(
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        pretty: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["HorizontalPodAutoscalerList"]:
        r"""
        list or watch objects of kind HorizontalPodAutoscaler

        operationID: listHorizontalPodAutoscalerForAllNamespaces
        path: /apis/autoscaling/v2beta2/horizontalpodautoscalers

        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param pretty: If 'true', then the output is pretty printed.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   HorizontalPodAutoscalerList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AutoscalingV2beta2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "list_horizontal_pod_autoscaler_for_all_namespaces_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_horizontal_pod_autoscaler_for_all_namespaces_with_http_info "
                "on AutoscalingV2beta2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["pretty"] = pretty
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["HorizontalPodAutoscalerList"] = Response[
            "HorizontalPodAutoscalerList"
        ](result, codes_returning_objects)
        return resp

    _watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".autoscaling_v2beta2_api",
        "AutoscalingV2beta2Api",
        "list_horizontal_pod_autoscaler_for_all_namespaces",
    )

    @staticmethod
    def listNamespacedHorizontalPodAutoscaler(
        namespace: str,
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["HorizontalPodAutoscalerList"]:
        r"""
        list or watch objects of kind HorizontalPodAutoscaler

        operationID: listNamespacedHorizontalPodAutoscaler
        path: /apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers

        :param namespace: namespace for the resource
        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   HorizontalPodAutoscalerList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AutoscalingV2beta2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "list_namespaced_horizontal_pod_autoscaler_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_namespaced_horizontal_pod_autoscaler_with_http_info "
                "on AutoscalingV2beta2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["namespace"] = namespace
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["HorizontalPodAutoscalerList"] = Response[
            "HorizontalPodAutoscalerList"
        ](result, codes_returning_objects)
        return resp

    _namespaced_watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".autoscaling_v2beta2_api",
        "AutoscalingV2beta2Api",
        "list_namespaced_horizontal_pod_autoscaler",
    )


@dataclass
class HorizontalPodAutoscalerSpec(HikaruBase):
    r"""
    HorizontalPodAutoscalerSpec describes the desired functionality of the
    HorizontalPodAutoscaler.

    Full name: HorizontalPodAutoscalerSpec

    Attributes:
    maxReplicas: maxReplicas is the upper limit for the number of replicas to which the
        autoscaler can scale up. It cannot be less that minReplicas.
    scaleTargetRef: scaleTargetRef points to the target resource to scale, and is used to
        the pods for which metrics should be collected, as well as to actually change the
        replica count.
    behavior: behavior configures the scaling behavior of the target in both Up and Down
        directions (scaleUp and scaleDown fields respectively). If not set, the default
        HPAScalingRules for scale up and scale down are used.
    minReplicas: minReplicas is the lower limit for the number of replicas to which the
        autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if
        the alpha feature gate HPAScaleToZero is enabled and at least one Object or
        External metric is configured. Scaling is active as long as at least one metric
        value is available.
    metrics: metrics contains the specifications for which to use to calculate the desired
        replica count (the maximum replica count across all metrics will be used). The
        desired replica count is calculated multiplying the ratio between the target value
        and the current value by the current number of pods. Ergo, metrics used must
        decrease as the pod count is increased, and vice-versa. See the individual metric
        source types for more information about how each type of metric must respond. If
        not set, the default metric will be set to 80% average CPU utilization.
    """

    maxReplicas: int
    scaleTargetRef: "CrossVersionObjectReference"
    behavior: Optional["HorizontalPodAutoscalerBehavior"] = None
    minReplicas: Optional[int] = None
    metrics: Optional[List["MetricSpec"]] = field(default_factory=list)


@dataclass
class HorizontalPodAutoscalerStatus(HikaruBase):
    r"""
    HorizontalPodAutoscalerStatus describes the current status of a horizontal pod
    autoscaler.

    Full name: HorizontalPodAutoscalerStatus

    Attributes:
    currentReplicas: currentReplicas is current number of replicas of pods managed by this
        autoscaler, as last seen by the autoscaler.
    desiredReplicas: desiredReplicas is the desired number of replicas of pods managed by
        this autoscaler, as last calculated by the autoscaler.
    lastScaleTime: lastScaleTime is the last time the HorizontalPodAutoscaler scaled the
        number of pods, used by the autoscaler to control how often the number of pods is
        changed.
    observedGeneration: observedGeneration is the most recent generation observed by this
        autoscaler.
    conditions: conditions is the set of conditions required for this autoscaler to scale
        its target, and indicates whether or not those conditions are met.
    currentMetrics: currentMetrics is the last read state of the metrics used by this
        autoscaler.
    """

    currentReplicas: int
    desiredReplicas: int
    lastScaleTime: Optional[str] = None
    observedGeneration: Optional[int] = None
    conditions: Optional[List["HorizontalPodAutoscalerCondition"]] = field(
        default_factory=list
    )
    currentMetrics: Optional[List["MetricStatus"]] = field(default_factory=list)


@dataclass
class MetricIdentifier(HikaruBase):
    r"""
    MetricIdentifier defines the name and optionally selector for a metric

    Full name: MetricIdentifier

    Attributes:
    name: name is the name of the given metric
    selector: selector is the string-encoded form of a standard kubernetes label selector
        for the given metric When set, it is passed as an additional parameter to the
        metrics server for more specific metrics scoping. When unset, just the metricName
        will be used to gather metrics.
    """

    name: str
    selector: Optional["LabelSelector"] = None


@dataclass
class MetricSpec(HikaruBase):
    r"""
    MetricSpec specifies how to scale based on a single metric (only `type` and one other
    matching field should be set at once).

    Full name: MetricSpec

    Attributes:
    type: type is the type of metric source. It should be one of "ContainerResource",
        "External", "Object", "Pods" or "Resource", each mapping to a matching field in
        the object. Note: "ContainerResource" type is available on when the feature-gate
        HPAContainerMetrics is enabled
    containerResource: container resource refers to a resource metric (such as those
        specified in requests and limits) known to Kubernetes describing a single
        container in each pod of the current scale target (e.g. CPU or memory). Such
        metrics are built in to Kubernetes, and have special scaling options on top of
        those available to normal per-pod metrics using the "pods" source. This is an
        alpha feature and can be enabled by the HPAContainerMetrics feature flag.
    external: external refers to a global metric that is not associated with any
        Kubernetes object. It allows autoscaling based on information coming from
        components running outside of cluster (for example length of queue in cloud
        messaging service, or QPS from loadbalancer running outside of cluster).
    object: object refers to a metric describing a single kubernetes object (for example,
        hits-per-second on an Ingress object).
    pods: pods refers to a metric describing each pod in the current scale target (for
        example, transactions-processed-per-second). The values will be averaged together
        before being compared to the target value.
    resource: resource refers to a resource metric (such as those specified in requests
        and limits) known to Kubernetes describing each pod in the current scale target
        (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special
        scaling options on top of those available to normal per-pod metrics using the
        "pods" source.
    """

    type: str
    containerResource: Optional["ContainerResourceMetricSource"] = None
    external: Optional["ExternalMetricSource"] = None
    object: Optional["ObjectMetricSource"] = None
    pods: Optional["PodsMetricSource"] = None
    resource: Optional["ResourceMetricSource"] = None


@dataclass
class MetricStatus(HikaruBase):
    r"""
    MetricStatus describes the last-read state of a single metric.

    Full name: MetricStatus

    Attributes:
    type: type is the type of metric source. It will be one of "ContainerResource",
        "External", "Object", "Pods" or "Resource", each corresponds to a matching field
        in the object. Note: "ContainerResource" type is available on when the
        feature-gate HPAContainerMetrics is enabled
    containerResource: container resource refers to a resource metric (such as those
        specified in requests and limits) known to Kubernetes describing a single
        container in each pod in the current scale target (e.g. CPU or memory). Such
        metrics are built in to Kubernetes, and have special scaling options on top of
        those available to normal per-pod metrics using the "pods" source.
    external: external refers to a global metric that is not associated with any
        Kubernetes object. It allows autoscaling based on information coming from
        components running outside of cluster (for example length of queue in cloud
        messaging service, or QPS from loadbalancer running outside of cluster).
    object: object refers to a metric describing a single kubernetes object (for example,
        hits-per-second on an Ingress object).
    pods: pods refers to a metric describing each pod in the current scale target (for
        example, transactions-processed-per-second). The values will be averaged together
        before being compared to the target value.
    resource: resource refers to a resource metric (such as those specified in requests
        and limits) known to Kubernetes describing each pod in the current scale target
        (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special
        scaling options on top of those available to normal per-pod metrics using the
        "pods" source.
    """

    type: str
    containerResource: Optional["ContainerResourceMetricStatus"] = None
    external: Optional["ExternalMetricStatus"] = None
    object: Optional["ObjectMetricStatus"] = None
    pods: Optional["PodsMetricStatus"] = None
    resource: Optional["ResourceMetricStatus"] = None


@dataclass
class MetricTarget(HikaruBase):
    r"""
    MetricTarget defines the target value, average value, or average utilization of a
    specific metric

    Full name: MetricTarget

    Attributes:
    type: type represents whether the metric type is Utilization, Value, or AverageValue
    averageUtilization: averageUtilization is the target value of the average of the
        resource metric across all relevant pods, represented as a percentage of the
        requested value of the resource for the pods. Currently only valid for Resource
        metric source type
    averageValue: averageValue is the target value of the average of the metric across all
        relevant pods (as a quantity)
    value: value is the target value of the metric (as a quantity).
    """

    type: str
    averageUtilization: Optional[int] = None
    averageValue: Optional[str] = None
    value: Optional[str] = None


@dataclass
class MetricValueStatus(HikaruBase):
    r"""
    MetricValueStatus holds the current value for a metric

    Full name: MetricValueStatus

    Attributes:
    averageUtilization: currentAverageUtilization is the current value of the average of
        the resource metric across all relevant pods, represented as a percentage of the
        requested value of the resource for the pods.
    averageValue: averageValue is the current value of the average of the metric across
        all relevant pods (as a quantity)
    value: value is the current value of the metric (as a quantity).
    """

    averageUtilization: Optional[int] = None
    averageValue: Optional[str] = None
    value: Optional[str] = None


@dataclass
class ObjectMetricSource(HikaruBase):
    r"""
    ObjectMetricSource indicates how to scale on a metric describing a kubernetes object
    (for example, hits-per-second on an Ingress object).

    Full name: ObjectMetricSource

    Attributes:
    describedObject:
    metric: metric identifies the target metric by name and selector
    target: target specifies the target value for the given metric
    """

    describedObject: "CrossVersionObjectReference"
    metric: "MetricIdentifier"
    target: "MetricTarget"


@dataclass
class ObjectMetricStatus(HikaruBase):
    r"""
    ObjectMetricStatus indicates the current value of a metric describing a kubernetes
    object (for example, hits-per-second on an Ingress object).

    Full name: ObjectMetricStatus

    Attributes:
    current: current contains the current value for the given metric
    describedObject:
    metric: metric identifies the target metric by name and selector
    """

    current: "MetricValueStatus"
    describedObject: "CrossVersionObjectReference"
    metric: "MetricIdentifier"


@dataclass
class PodsMetricSource(HikaruBase):
    r"""
    PodsMetricSource indicates how to scale on a metric describing each pod in the current
    scale target (for example, transactions-processed-per-second). The values will be
    averaged together before being compared to the target value.

    Full name: PodsMetricSource

    Attributes:
    metric: metric identifies the target metric by name and selector
    target: target specifies the target value for the given metric
    """

    metric: "MetricIdentifier"
    target: "MetricTarget"


@dataclass
class PodsMetricStatus(HikaruBase):
    r"""
    PodsMetricStatus indicates the current value of a metric describing each pod in the
    current scale target (for example, transactions-processed-per-second).

    Full name: PodsMetricStatus

    Attributes:
    current: current contains the current value for the given metric
    metric: metric identifies the target metric by name and selector
    """

    current: "MetricValueStatus"
    metric: "MetricIdentifier"


@dataclass
class ResourceMetricSource(HikaruBase):
    r"""
    ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes,
    as specified in requests and limits, describing each pod in the current scale target
    (e.g. CPU or memory). The values will be averaged together before being compared to
    the target. Such metrics are built in to Kubernetes, and have special scaling options
    on top of those available to normal per-pod metrics using the "pods" source. Only one
    "target" type should be set.

    Full name: ResourceMetricSource

    Attributes:
    name: name is the name of the resource in question.
    target: target specifies the target value for the given metric
    """

    name: str
    target: "MetricTarget"


@dataclass
class ResourceMetricStatus(HikaruBase):
    r"""
    ResourceMetricStatus indicates the current value of a resource metric known to
    Kubernetes, as specified in requests and limits, describing each pod in the current
    scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have
    special scaling options on top of those available to normal per-pod metrics using the
    "pods" source.

    Full name: ResourceMetricStatus

    Attributes:
    current: current contains the current value for the given metric
    name: Name is the name of the resource in question.
    """

    current: "MetricValueStatus"
    name: str


HorizontalPodAutoscaler._watcher_cls = HorizontalPodAutoscalerList


globs = dict(globals())
__all__ = [c.__name__ for c in globs.values()
           if type(c) == type]
del globs
