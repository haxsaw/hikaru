#
# Copyright (c) 2021 Incisive Technology Ltd
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""
DO NOT EDIT THIS FILE!

This module is automatically generated using the Hikaru build program that turns
a Kubernetes swagger spec into the code for the hikaru.model package.
"""


from hikaru.meta import HikaruBase, HikaruDocumentBase, KubernetesException, WatcherDescriptor
from hikaru.generate import get_clean_dict
from hikaru.utils import Response
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field, InitVar
from kubernetes.client import CoreV1Api
from ..unversioned import *

from kubernetes.client import ApiClient
from kubernetes.client import FlowcontrolApiserverV1beta3Api
from ..v1 import ObjectMeta
from ..v1 import DeleteOptions
from ..v1 import ListMeta


@dataclass
class FlowDistinguisherMethod(HikaruBase):
    r"""
    FlowDistinguisherMethod specifies the method of a flow distinguisher.

    Full name: FlowDistinguisherMethod

    Attributes:
    type: `type` is the type of flow distinguisher method The supported types are "ByUser"
        and "ByNamespace". Required.
    """

    type: str


@dataclass
class FlowSchema(HikaruDocumentBase):
    r"""
    FlowSchema defines the schema of a group of flows. Note that a flow is made up of a
    set of inbound API requests with similar attributes and is identified by a pair of
    strings: the name of the FlowSchema and a "flow distinguisher".

    Full name: FlowSchema

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: `metadata` is the standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: `spec` is the specification of the desired behavior of a FlowSchema. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    status: `status` is the current status of a FlowSchema. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    _version = "v1beta3"
    apiVersion: Optional[str] = "flowcontrol.apiserver.k8s.io/v1beta3"
    kind: Optional[str] = "FlowSchema"
    metadata: Optional["ObjectMeta"] = None
    spec: Optional["FlowSchemaSpec"] = None
    status: Optional["FlowSchemaStatus"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def deleteCollectionFlowSchema(
        continue_: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_selector: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        timeout_seconds: Optional[int] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["FlowSchema"]:
        r"""
        delete collection of FlowSchema

        operationID: deleteCollectionFlowSchema
        path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas

        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = FlowcontrolApiserverV1beta3Api(api_client=client_to_use)
        the_method = getattr(inst, "delete_collection_flow_schema_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_collection_flow_schema_with_http_info "
                "on FlowcontrolApiserverV1beta3Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["_continue"] = continue_
        all_args["dry_run"] = dry_run
        all_args["field_selector"] = field_selector
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["timeout_seconds"] = timeout_seconds
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        return Response["FlowSchema"](result, codes_returning_objects)

    def createFlowSchema(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["FlowSchema"]:
        r"""
        create a FlowSchema

        operationID: createFlowSchema
        path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas

        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields, provided that the `ServerSideFieldValidation`
            feature gate is also enabled. Valid values are: - Ignore: This will
            ignore any unknown fields that are silently dropped from the object,
            and will ignore all but the last duplicate field that the decoder
            encounters. This is the default behavior prior to v1.23 and is the
            default behavior when the `ServerSideFieldValidation` feature gate
            is disabled. - Warn: This will send a warning via the standard
            warning response header for each unknown field that is dropped from
            the object, and for each duplicate field that is encountered. The
            request will still succeed if there are no other errors, and will
            only persist the last of any duplicate fields. This is the default
            when the `ServerSideFieldValidation` feature gate is enabled. -
            Strict: This will fail the request with a BadRequest error if any
            unknown fields would be dropped from the object, or if any duplicate
            fields are present. The error returned from the server will contain
            all unknown and duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   FlowSchema    OK
          201   FlowSchema    Created
          202   FlowSchema    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = FlowcontrolApiserverV1beta3Api(api_client=client_to_use)
        the_method = getattr(inst, "create_flow_schema_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_flow_schema_with_http_info "
                "on FlowcontrolApiserverV1beta3Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        return Response["FlowSchema"](result, codes_returning_objects)

    def create(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
    ) -> "FlowSchema":
        r"""
            create a FlowSchema

            operationID: createFlowSchema
            path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint.
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields, provided that the `ServerSideFieldValidation`
                feature gate is also enabled. Valid values are: - Ignore: This will
                ignore any unknown fields that are silently dropped from the object,
                and will ignore all but the last duplicate field that the decoder
                encounters. This is the default behavior prior to v1.23 and is the
                default behavior when the `ServerSideFieldValidation` feature gate
                is disabled. - Warn: This will send a warning via the standard
                warning response header for each unknown field that is dropped from
                the object, and for each duplicate field that is encountered. The
                request will still succeed if there are no other errors, and will
                only persist the last of any duplicate fields. This is the default
                when the `ServerSideFieldValidation` feature gate is enabled. -
                Strict: This will fail the request with a BadRequest error if any
                unknown fields would be dropped from the object, or if any duplicate
                fields are present. The error returned from the server will contain
                all unknown and duplicate fields encountered.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.createFlowSchema(
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def deleteFlowSchema(
        name: str,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["FlowSchema"]:
        r"""
        delete a FlowSchema

        operationID: deleteFlowSchema
        path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          202   Status    Accepted
          401   None    Unauthorized
        """
        client_to_use = client
        inst = FlowcontrolApiserverV1beta3Api(api_client=client_to_use)
        the_method = getattr(inst, "delete_flow_schema_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_flow_schema_with_http_info "
                "on FlowcontrolApiserverV1beta3Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 202)
        return Response["FlowSchema"](result, codes_returning_objects)

    def delete(
        self,
        name: Optional[str] = None,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        client: ApiClient = None,
    ) -> "FlowSchema":
        r"""
            delete a FlowSchema

            operationID: deleteFlowSchema
            path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param grace_period_seconds: The duration in seconds before the object should
                be deleted. Value must be non-negative integer. The value zero
                indicates delete immediately. If this value is nil, the default
                grace period for the specified type will be used. Defaults to a per
                object value if not specified. zero means delete immediately.
            :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
                field will be deprecated in 1.7. Should the dependent objects be
                orphaned. If true/false, the "orphan" finalizer will be added
                to/removed from the object's finalizers list. Either this field or
                PropagationPolicy may be set, but not both.
            :param propagation_policy: Whether and how garbage collection will be
                performed. Either this field or OrphanDependents may be set, but not
                both. The default policy is decided by the existing finalizer set in
                the metadata.finalizers and the resource-specific default policy.
                Acceptable values are: 'Orphan' - orphan the dependents;
                'Background' - allow the garbage collector to delete the dependents
                in the background; 'Foreground' - a cascading policy that deletes
                all dependents in the foreground.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to delete() or in a "
                "FlowSchema's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.deleteFlowSchema(
            name=effective_name,
            dry_run=dry_run,
            grace_period_seconds=grace_period_seconds,
            orphan_dependents=orphan_dependents,
            propagation_policy=propagation_policy,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def readFlowSchema(
        name: str,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["FlowSchema"]:
        r"""
        read the specified FlowSchema

        operationID: readFlowSchema
        path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}

        :param name: name for the resource
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   FlowSchema    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = FlowcontrolApiserverV1beta3Api(api_client=client_to_use)
        the_method = getattr(inst, "read_flow_schema_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "read_flow_schema_with_http_info "
                "on FlowcontrolApiserverV1beta3Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        return Response["FlowSchema"](result, codes_returning_objects)

    def read(
        self,
        name: Optional[str] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
    ) -> "FlowSchema":
        r"""
            read the specified FlowSchema

            operationID: readFlowSchema
            path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param pretty: If 'true', then the output is pretty printed.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to read() or in a "
                "FlowSchema's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.readFlowSchema(name=effective_name, pretty=pretty, client=client)
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def patchFlowSchema(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["FlowSchema"]:
        r"""
        partially update the specified FlowSchema

        operationID: patchFlowSchema
        path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint. This field is
            required for apply requests (application/apply-patch) but optional
            for non-apply patch types (JsonPatch, MergePatch,
            StrategicMergePatch).
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields, provided that the `ServerSideFieldValidation`
            feature gate is also enabled. Valid values are: - Ignore: This will
            ignore any unknown fields that are silently dropped from the object,
            and will ignore all but the last duplicate field that the decoder
            encounters. This is the default behavior prior to v1.23 and is the
            default behavior when the `ServerSideFieldValidation` feature gate
            is disabled. - Warn: This will send a warning via the standard
            warning response header for each unknown field that is dropped from
            the object, and for each duplicate field that is encountered. The
            request will still succeed if there are no other errors, and will
            only persist the last of any duplicate fields. This is the default
            when the `ServerSideFieldValidation` feature gate is enabled. -
            Strict: This will fail the request with a BadRequest error if any
            unknown fields would be dropped from the object, or if any duplicate
            fields are present. The error returned from the server will contain
            all unknown and duplicate fields encountered.
        :param force: Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   FlowSchema    OK
          201   FlowSchema    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = FlowcontrolApiserverV1beta3Api(api_client=client_to_use)
        the_method = getattr(inst, "patch_flow_schema_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "patch_flow_schema_with_http_info "
                "on FlowcontrolApiserverV1beta3Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        all_args["force"] = force
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        return Response["FlowSchema"](result, codes_returning_objects)

    def update(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
    ) -> "FlowSchema":
        r"""
            partially update the specified FlowSchema

            operationID: patchFlowSchema
            path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint. This field is
                required for apply requests (application/apply-patch) but optional
                for non-apply patch types (JsonPatch, MergePatch,
                StrategicMergePatch).
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields, provided that the `ServerSideFieldValidation`
                feature gate is also enabled. Valid values are: - Ignore: This will
                ignore any unknown fields that are silently dropped from the object,
                and will ignore all but the last duplicate field that the decoder
                encounters. This is the default behavior prior to v1.23 and is the
                default behavior when the `ServerSideFieldValidation` feature gate
                is disabled. - Warn: This will send a warning via the standard
                warning response header for each unknown field that is dropped from
                the object, and for each duplicate field that is encountered. The
                request will still succeed if there are no other errors, and will
                only persist the last of any duplicate fields. This is the default
                when the `ServerSideFieldValidation` feature gate is enabled. -
                Strict: This will fail the request with a BadRequest error if any
                unknown fields would be dropped from the object, or if any duplicate
                fields are present. The error returned from the server will contain
                all unknown and duplicate fields encountered.
            :param force: Force is going to "force" Apply requests. It means user will
                re-acquire conflicting fields owned by other people. Force flag must
                be unset for non-apply patch requests.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.patchFlowSchema(
            name=self.metadata.name,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            force=force,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def __enter__(self):
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        passed = ex_type is None and ex_value is None and ex_traceback is None
        has_rollback = hasattr(self, "__rollback")
        if passed:
            try:
                self.update()
            except Exception:
                if has_rollback:
                    self.merge(getattr(self, "__rollback"), overwrite=True)
                    delattr(self, "__rollback")
                raise
        if has_rollback:
            if not passed:
                self.merge(getattr(self, "__rollback"), overwrite=True)
            delattr(self, "__rollback")
        return False

    def replaceFlowSchema(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["FlowSchema"]:
        r"""
        replace the specified FlowSchema

        operationID: replaceFlowSchema
        path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields, provided that the `ServerSideFieldValidation`
            feature gate is also enabled. Valid values are: - Ignore: This will
            ignore any unknown fields that are silently dropped from the object,
            and will ignore all but the last duplicate field that the decoder
            encounters. This is the default behavior prior to v1.23 and is the
            default behavior when the `ServerSideFieldValidation` feature gate
            is disabled. - Warn: This will send a warning via the standard
            warning response header for each unknown field that is dropped from
            the object, and for each duplicate field that is encountered. The
            request will still succeed if there are no other errors, and will
            only persist the last of any duplicate fields. This is the default
            when the `ServerSideFieldValidation` feature gate is enabled. -
            Strict: This will fail the request with a BadRequest error if any
            unknown fields would be dropped from the object, or if any duplicate
            fields are present. The error returned from the server will contain
            all unknown and duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   FlowSchema    OK
          201   FlowSchema    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = FlowcontrolApiserverV1beta3Api(api_client=client_to_use)
        the_method = getattr(inst, "replace_flow_schema_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_flow_schema_with_http_info "
                "on FlowcontrolApiserverV1beta3Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        return Response["FlowSchema"](result, codes_returning_objects)

    def replaceFlowSchemaStatus(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["FlowSchema"]:
        r"""
        replace status of the specified FlowSchema

        operationID: replaceFlowSchemaStatus
        path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}/status

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields, provided that the `ServerSideFieldValidation`
            feature gate is also enabled. Valid values are: - Ignore: This will
            ignore any unknown fields that are silently dropped from the object,
            and will ignore all but the last duplicate field that the decoder
            encounters. This is the default behavior prior to v1.23 and is the
            default behavior when the `ServerSideFieldValidation` feature gate
            is disabled. - Warn: This will send a warning via the standard
            warning response header for each unknown field that is dropped from
            the object, and for each duplicate field that is encountered. The
            request will still succeed if there are no other errors, and will
            only persist the last of any duplicate fields. This is the default
            when the `ServerSideFieldValidation` feature gate is enabled. -
            Strict: This will fail the request with a BadRequest error if any
            unknown fields would be dropped from the object, or if any duplicate
            fields are present. The error returned from the server will contain
            all unknown and duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   FlowSchema    OK
          201   FlowSchema    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = FlowcontrolApiserverV1beta3Api(api_client=client_to_use)
        the_method = getattr(inst, "replace_flow_schema_status_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_flow_schema_status_with_http_info "
                "on FlowcontrolApiserverV1beta3Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        return Response["FlowSchema"](result, codes_returning_objects)


@dataclass
class FlowSchemaCondition(HikaruBase):
    r"""
    FlowSchemaCondition describes conditions for a FlowSchema.

    Full name: FlowSchemaCondition

    Attributes:
    lastTransitionTime: `lastTransitionTime` is the last time the condition transitioned
        from one status to another.
    message: `message` is a human-readable message indicating details about last
        transition.
    reason: `reason` is a unique, one-word, CamelCase reason for the condition's last
        transition.
    status: `status` is the status of the condition. Can be True, False, Unknown.
        Required.
    type: `type` is the type of the condition. Required.
    """

    lastTransitionTime: Optional[str] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


@dataclass
class FlowSchemaList(HikaruDocumentBase):
    r"""
    FlowSchemaList is a list of FlowSchema objects.

    Full name: FlowSchemaList

    Attributes:
    items: `items` is a list of FlowSchemas.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: `metadata` is the standard list metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = "v1beta3"
    items: List["FlowSchema"]
    apiVersion: Optional[str] = "flowcontrol.apiserver.k8s.io/v1beta3"
    kind: Optional[str] = "FlowSchemaList"
    metadata: Optional["ListMeta"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def listFlowSchema(
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["FlowSchemaList"]:
        r"""
        list or watch objects of kind FlowSchema

        operationID: listFlowSchema
        path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas

        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   FlowSchemaList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = FlowcontrolApiserverV1beta3Api(api_client=client_to_use)
        the_method = getattr(inst, "list_flow_schema_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_flow_schema_with_http_info "
                "on FlowcontrolApiserverV1beta3Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        return Response["FlowSchemaList"](result, codes_returning_objects)

    _watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".flowcontrol_apiserver_v1beta3_api",
        "FlowcontrolApiserverV1beta3Api",
        "list_flow_schema",
    )


@dataclass
class FlowSchemaSpec(HikaruBase):
    r"""
    FlowSchemaSpec describes how the FlowSchema's specification looks like.

    Full name: FlowSchemaSpec

    Attributes:
    priorityLevelConfiguration: `priorityLevelConfiguration` should reference a
        PriorityLevelConfiguration in the cluster. If the reference cannot be resolved,
        the FlowSchema will be ignored and marked as invalid in its status. Required.
    distinguisherMethod: `distinguisherMethod` defines how to compute the flow
        distinguisher for requests that match this schema. `nil` specifies that the
        distinguisher is disabled and thus will always be the empty string.
    matchingPrecedence: `matchingPrecedence` is used to choose among the FlowSchemas that
        match a given request. The chosen FlowSchema is among those with the numerically
        lowest (which we take to be logically highest) MatchingPrecedence. Each
        MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence
        is not specified, it will be set to 1000 as default.
    rules: `rules` describes which requests will match this flow schema. This FlowSchema
        matches a request if and only if at least one member of rules matches the request.
        if it is an empty slice, there will be no requests matching the FlowSchema.
    """

    priorityLevelConfiguration: "PriorityLevelConfigurationReference"
    distinguisherMethod: Optional["FlowDistinguisherMethod"] = None
    matchingPrecedence: Optional[int] = None
    rules: Optional[List["PolicyRulesWithSubjects"]] = field(default_factory=list)


@dataclass
class FlowSchemaStatus(HikaruBase):
    r"""
    FlowSchemaStatus represents the current state of a FlowSchema.

    Full name: FlowSchemaStatus

    Attributes:
    conditions: `conditions` is a list of the current states of FlowSchema.
    """

    conditions: Optional[List["FlowSchemaCondition"]] = field(default_factory=list)


@dataclass
class GroupSubject(HikaruBase):
    r"""
    GroupSubject holds detailed information for group-kind subject.

    Full name: GroupSubject

    Attributes:
    name: name is the user group that matches, or "*" to match all user groups. See
        https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go
        for some well-known group names. Required.
    """

    name: str


@dataclass
class LimitResponse(HikaruBase):
    r"""
    LimitResponse defines how to handle requests that can not be executed right now.

    Full name: LimitResponse

    Attributes:
    type: `type` is "Queue" or "Reject". "Queue" means that requests that can not be
        executed upon arrival are held in a queue until they can be executed or a queuing
        limit is reached. "Reject" means that requests that can not be executed upon
        arrival are rejected. Required.
    queuing: `queuing` holds the configuration parameters for queuing. This field may be
        non-empty only if `type` is `"Queue"`.
    """

    type: str
    queuing: Optional["QueuingConfiguration"] = None


@dataclass
class LimitedPriorityLevelConfiguration(HikaruBase):
    r"""
    LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to
    limits. It addresses two issues: - How are requests for this priority level limited? -
    What should be done with requests that exceed the limit?

    Full name: LimitedPriorityLevelConfiguration

    Attributes:
    borrowingLimitPercent: `borrowingLimitPercent`, if present, configures a limit on how
        many seats this priority level can borrow from other priority levels. The limit is
        known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit on
        the total number of seats that this level may borrow at any one time. This field
        holds the ratio of that limit to the level's nominal concurrency limit. When this
        field is non-nil, it must hold a non-negative integer and the limit is calculated
        as follows. BorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0
        ) The value of this field can be more than 100, implying that this priority level
        can borrow a number of seats that is greater than its own nominal concurrency
        limit (NominalCL). When this field is left `nil`, the limit is effectively
        infinite.
    lendablePercent: `lendablePercent` prescribes the fraction of the level's NominalCL
        that can be borrowed by other priority levels. The value of this field must be
        between 0 and 100, inclusive, and it defaults to 0. The number of seats that other
        levels can borrow from this level, known as this level's LendableConcurrencyLimit
        (LendableCL), is defined as follows. LendableCL(i) = round( NominalCL(i) *
        lendablePercent(i)/100.0 )
    limitResponse: `limitResponse` indicates what to do with requests that can not be
        executed right now
    nominalConcurrencyShares: `nominalConcurrencyShares` (NCS) contributes to the
        computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the
        number of execution seats available at this priority level. This is used both for
        requests dispatched from this priority level as well as requests dispatched from
        other priority levels borrowing seats from this level. The server's concurrency
        limit (ServerCL) is divided among the Limited priority levels in proportion to
        their NCS values: NominalCL(i) = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs =
        sum[limited priority level k] NCS(k) Bigger numbers mean a larger nominal
        concurrency limit, at the expense of every other Limited priority level. This
        field has a default value of 30.
    """

    borrowingLimitPercent: Optional[int] = None
    lendablePercent: Optional[int] = None
    limitResponse: Optional["LimitResponse"] = None
    nominalConcurrencyShares: Optional[int] = None


@dataclass
class NonResourcePolicyRule(HikaruBase):
    r"""
    NonResourcePolicyRule is a predicate that matches non-resource requests according to
    their verb and the target non-resource URL. A NonResourcePolicyRule matches a request
    if and only if both (a) at least one member of verbs matches the request and (b) at
    least one member of nonResourceURLs matches the request.

    Full name: NonResourcePolicyRule

    Attributes:
    nonResourceURLs: `nonResourceURLs` is a set of url prefixes that a user should have
        access to and may not be empty. For example: - "/healthz" is legal - "/hea*" is
        illegal - "/hea" is legal but matches nothing - "/hea/*" also matches nothing -
        "/healthz/*" matches all per-component health checks. "*" matches all non-resource
        urls. if it is present, it must be the only entry. Required.
    verbs: `verbs` is a list of matching verbs and may not be empty. "*" matches all
        verbs. If it is present, it must be the only entry. Required.
    """

    nonResourceURLs: List[str]
    verbs: List[str]


@dataclass
class PolicyRulesWithSubjects(HikaruBase):
    r"""
    PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver.
    The test considers the subject making the request, the verb being requested, and the
    resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only
    if both (a) at least one member of subjects matches the request and (b) at least one
    member of resourceRules or nonResourceRules matches the request.

    Full name: PolicyRulesWithSubjects

    Attributes:
    subjects: subjects is the list of normal user, serviceaccount, or group that this rule
        cares about. There must be at least one member in this slice. A slice that
        includes both the system:authenticated and system:unauthenticated user groups
        matches every request. Required.
    nonResourceRules: `nonResourceRules` is a list of NonResourcePolicyRules that identify
        matching requests according to their verb and the target non-resource URL.
    resourceRules: `resourceRules` is a slice of ResourcePolicyRules that identify
        matching requests according to their verb and the target resource. At least one of
        `resourceRules` and `nonResourceRules` has to be non-empty.
    """

    subjects: List["Subject"]
    nonResourceRules: Optional[List["NonResourcePolicyRule"]] = field(
        default_factory=list
    )
    resourceRules: Optional[List["ResourcePolicyRule"]] = field(default_factory=list)


@dataclass
class PriorityLevelConfiguration(HikaruDocumentBase):
    r"""
    PriorityLevelConfiguration represents the configuration of a priority level.

    Full name: PriorityLevelConfiguration

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: `metadata` is the standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: `spec` is the specification of the desired behavior of a "request-priority".
        More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    status: `status` is the current status of a "request-priority". More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    _version = "v1beta3"
    apiVersion: Optional[str] = "flowcontrol.apiserver.k8s.io/v1beta3"
    kind: Optional[str] = "PriorityLevelConfiguration"
    metadata: Optional["ObjectMeta"] = None
    spec: Optional["PriorityLevelConfigurationSpec"] = None
    status: Optional["PriorityLevelConfigurationStatus"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def deleteCollectionPriorityLevelConfiguration(
        continue_: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_selector: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        timeout_seconds: Optional[int] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PriorityLevelConfiguration"]:
        r"""
        delete collection of PriorityLevelConfiguration

        operationID: deleteCollectionPriorityLevelConfiguration
        path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations

        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = FlowcontrolApiserverV1beta3Api(api_client=client_to_use)
        the_method = getattr(
            inst, "delete_collection_priority_level_configuration_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_collection_priority_level_configuration_with_http_info "
                "on FlowcontrolApiserverV1beta3Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["_continue"] = continue_
        all_args["dry_run"] = dry_run
        all_args["field_selector"] = field_selector
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["timeout_seconds"] = timeout_seconds
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        return Response["PriorityLevelConfiguration"](result, codes_returning_objects)

    def createPriorityLevelConfiguration(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PriorityLevelConfiguration"]:
        r"""
        create a PriorityLevelConfiguration

        operationID: createPriorityLevelConfiguration
        path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations

        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields, provided that the `ServerSideFieldValidation`
            feature gate is also enabled. Valid values are: - Ignore: This will
            ignore any unknown fields that are silently dropped from the object,
            and will ignore all but the last duplicate field that the decoder
            encounters. This is the default behavior prior to v1.23 and is the
            default behavior when the `ServerSideFieldValidation` feature gate
            is disabled. - Warn: This will send a warning via the standard
            warning response header for each unknown field that is dropped from
            the object, and for each duplicate field that is encountered. The
            request will still succeed if there are no other errors, and will
            only persist the last of any duplicate fields. This is the default
            when the `ServerSideFieldValidation` feature gate is enabled. -
            Strict: This will fail the request with a BadRequest error if any
            unknown fields would be dropped from the object, or if any duplicate
            fields are present. The error returned from the server will contain
            all unknown and duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   PriorityLevelConfiguration    OK
          201   PriorityLevelConfiguration    Created
          202   PriorityLevelConfiguration    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = FlowcontrolApiserverV1beta3Api(api_client=client_to_use)
        the_method = getattr(inst, "create_priority_level_configuration_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_priority_level_configuration_with_http_info "
                "on FlowcontrolApiserverV1beta3Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        return Response["PriorityLevelConfiguration"](result, codes_returning_objects)

    def create(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
    ) -> "PriorityLevelConfiguration":
        r"""
            create a PriorityLevelConfiguration

            operationID: createPriorityLevelConfiguration
            path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint.
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields, provided that the `ServerSideFieldValidation`
                feature gate is also enabled. Valid values are: - Ignore: This will
                ignore any unknown fields that are silently dropped from the object,
                and will ignore all but the last duplicate field that the decoder
                encounters. This is the default behavior prior to v1.23 and is the
                default behavior when the `ServerSideFieldValidation` feature gate
                is disabled. - Warn: This will send a warning via the standard
                warning response header for each unknown field that is dropped from
                the object, and for each duplicate field that is encountered. The
                request will still succeed if there are no other errors, and will
                only persist the last of any duplicate fields. This is the default
                when the `ServerSideFieldValidation` feature gate is enabled. -
                Strict: This will fail the request with a BadRequest error if any
                unknown fields would be dropped from the object, or if any duplicate
                fields are present. The error returned from the server will contain
                all unknown and duplicate fields encountered.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.createPriorityLevelConfiguration(
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def deletePriorityLevelConfiguration(
        name: str,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PriorityLevelConfiguration"]:
        r"""
        delete a PriorityLevelConfiguration

        operationID: deletePriorityLevelConfiguration
        path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          202   Status    Accepted
          401   None    Unauthorized
        """
        client_to_use = client
        inst = FlowcontrolApiserverV1beta3Api(api_client=client_to_use)
        the_method = getattr(inst, "delete_priority_level_configuration_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_priority_level_configuration_with_http_info "
                "on FlowcontrolApiserverV1beta3Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 202)
        return Response["PriorityLevelConfiguration"](result, codes_returning_objects)

    def delete(
        self,
        name: Optional[str] = None,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        client: ApiClient = None,
    ) -> "PriorityLevelConfiguration":
        r"""
            delete a PriorityLevelConfiguration

            operationID: deletePriorityLevelConfiguration
            path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param grace_period_seconds: The duration in seconds before the object should
                be deleted. Value must be non-negative integer. The value zero
                indicates delete immediately. If this value is nil, the default
                grace period for the specified type will be used. Defaults to a per
                object value if not specified. zero means delete immediately.
            :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
                field will be deprecated in 1.7. Should the dependent objects be
                orphaned. If true/false, the "orphan" finalizer will be added
                to/removed from the object's finalizers list. Either this field or
                PropagationPolicy may be set, but not both.
            :param propagation_policy: Whether and how garbage collection will be
                performed. Either this field or OrphanDependents may be set, but not
                both. The default policy is decided by the existing finalizer set in
                the metadata.finalizers and the resource-specific default policy.
                Acceptable values are: 'Orphan' - orphan the dependents;
                'Background' - allow the garbage collector to delete the dependents
                in the background; 'Foreground' - a cascading policy that deletes
                all dependents in the foreground.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to delete() or in a "
                "PriorityLevelConfiguration's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.deletePriorityLevelConfiguration(
            name=effective_name,
            dry_run=dry_run,
            grace_period_seconds=grace_period_seconds,
            orphan_dependents=orphan_dependents,
            propagation_policy=propagation_policy,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def readPriorityLevelConfiguration(
        name: str,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PriorityLevelConfiguration"]:
        r"""
        read the specified PriorityLevelConfiguration

        operationID: readPriorityLevelConfiguration
        path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}

        :param name: name for the resource
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   PriorityLevelConfiguration    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = FlowcontrolApiserverV1beta3Api(api_client=client_to_use)
        the_method = getattr(inst, "read_priority_level_configuration_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "read_priority_level_configuration_with_http_info "
                "on FlowcontrolApiserverV1beta3Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        return Response["PriorityLevelConfiguration"](result, codes_returning_objects)

    def read(
        self,
        name: Optional[str] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
    ) -> "PriorityLevelConfiguration":
        r"""
            read the specified PriorityLevelConfiguration

            operationID: readPriorityLevelConfiguration
            path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param pretty: If 'true', then the output is pretty printed.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to read() or in a "
                "PriorityLevelConfiguration's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.readPriorityLevelConfiguration(
            name=effective_name, pretty=pretty, client=client
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def patchPriorityLevelConfiguration(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PriorityLevelConfiguration"]:
        r"""
        partially update the specified PriorityLevelConfiguration

        operationID: patchPriorityLevelConfiguration
        path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint. This field is
            required for apply requests (application/apply-patch) but optional
            for non-apply patch types (JsonPatch, MergePatch,
            StrategicMergePatch).
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields, provided that the `ServerSideFieldValidation`
            feature gate is also enabled. Valid values are: - Ignore: This will
            ignore any unknown fields that are silently dropped from the object,
            and will ignore all but the last duplicate field that the decoder
            encounters. This is the default behavior prior to v1.23 and is the
            default behavior when the `ServerSideFieldValidation` feature gate
            is disabled. - Warn: This will send a warning via the standard
            warning response header for each unknown field that is dropped from
            the object, and for each duplicate field that is encountered. The
            request will still succeed if there are no other errors, and will
            only persist the last of any duplicate fields. This is the default
            when the `ServerSideFieldValidation` feature gate is enabled. -
            Strict: This will fail the request with a BadRequest error if any
            unknown fields would be dropped from the object, or if any duplicate
            fields are present. The error returned from the server will contain
            all unknown and duplicate fields encountered.
        :param force: Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   PriorityLevelConfiguration    OK
          201   PriorityLevelConfiguration    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = FlowcontrolApiserverV1beta3Api(api_client=client_to_use)
        the_method = getattr(inst, "patch_priority_level_configuration_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "patch_priority_level_configuration_with_http_info "
                "on FlowcontrolApiserverV1beta3Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        all_args["force"] = force
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        return Response["PriorityLevelConfiguration"](result, codes_returning_objects)

    def update(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
    ) -> "PriorityLevelConfiguration":
        r"""
            partially update the specified PriorityLevelConfiguration

            operationID: patchPriorityLevelConfiguration
            path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint. This field is
                required for apply requests (application/apply-patch) but optional
                for non-apply patch types (JsonPatch, MergePatch,
                StrategicMergePatch).
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields, provided that the `ServerSideFieldValidation`
                feature gate is also enabled. Valid values are: - Ignore: This will
                ignore any unknown fields that are silently dropped from the object,
                and will ignore all but the last duplicate field that the decoder
                encounters. This is the default behavior prior to v1.23 and is the
                default behavior when the `ServerSideFieldValidation` feature gate
                is disabled. - Warn: This will send a warning via the standard
                warning response header for each unknown field that is dropped from
                the object, and for each duplicate field that is encountered. The
                request will still succeed if there are no other errors, and will
                only persist the last of any duplicate fields. This is the default
                when the `ServerSideFieldValidation` feature gate is enabled. -
                Strict: This will fail the request with a BadRequest error if any
                unknown fields would be dropped from the object, or if any duplicate
                fields are present. The error returned from the server will contain
                all unknown and duplicate fields encountered.
            :param force: Force is going to "force" Apply requests. It means user will
                re-acquire conflicting fields owned by other people. Force flag must
                be unset for non-apply patch requests.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.patchPriorityLevelConfiguration(
            name=self.metadata.name,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            force=force,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def __enter__(self):
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        passed = ex_type is None and ex_value is None and ex_traceback is None
        has_rollback = hasattr(self, "__rollback")
        if passed:
            try:
                self.update()
            except Exception:
                if has_rollback:
                    self.merge(getattr(self, "__rollback"), overwrite=True)
                    delattr(self, "__rollback")
                raise
        if has_rollback:
            if not passed:
                self.merge(getattr(self, "__rollback"), overwrite=True)
            delattr(self, "__rollback")
        return False

    def replacePriorityLevelConfiguration(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PriorityLevelConfiguration"]:
        r"""
        replace the specified PriorityLevelConfiguration

        operationID: replacePriorityLevelConfiguration
        path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields, provided that the `ServerSideFieldValidation`
            feature gate is also enabled. Valid values are: - Ignore: This will
            ignore any unknown fields that are silently dropped from the object,
            and will ignore all but the last duplicate field that the decoder
            encounters. This is the default behavior prior to v1.23 and is the
            default behavior when the `ServerSideFieldValidation` feature gate
            is disabled. - Warn: This will send a warning via the standard
            warning response header for each unknown field that is dropped from
            the object, and for each duplicate field that is encountered. The
            request will still succeed if there are no other errors, and will
            only persist the last of any duplicate fields. This is the default
            when the `ServerSideFieldValidation` feature gate is enabled. -
            Strict: This will fail the request with a BadRequest error if any
            unknown fields would be dropped from the object, or if any duplicate
            fields are present. The error returned from the server will contain
            all unknown and duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   PriorityLevelConfiguration    OK
          201   PriorityLevelConfiguration    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = FlowcontrolApiserverV1beta3Api(api_client=client_to_use)
        the_method = getattr(
            inst, "replace_priority_level_configuration_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_priority_level_configuration_with_http_info "
                "on FlowcontrolApiserverV1beta3Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        return Response["PriorityLevelConfiguration"](result, codes_returning_objects)

    def replacePriorityLevelConfigurationStatus(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PriorityLevelConfiguration"]:
        r"""
        replace status of the specified PriorityLevelConfiguration

        operationID: replacePriorityLevelConfigurationStatus
        path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}/status

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields, provided that the `ServerSideFieldValidation`
            feature gate is also enabled. Valid values are: - Ignore: This will
            ignore any unknown fields that are silently dropped from the object,
            and will ignore all but the last duplicate field that the decoder
            encounters. This is the default behavior prior to v1.23 and is the
            default behavior when the `ServerSideFieldValidation` feature gate
            is disabled. - Warn: This will send a warning via the standard
            warning response header for each unknown field that is dropped from
            the object, and for each duplicate field that is encountered. The
            request will still succeed if there are no other errors, and will
            only persist the last of any duplicate fields. This is the default
            when the `ServerSideFieldValidation` feature gate is enabled. -
            Strict: This will fail the request with a BadRequest error if any
            unknown fields would be dropped from the object, or if any duplicate
            fields are present. The error returned from the server will contain
            all unknown and duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   PriorityLevelConfiguration    OK
          201   PriorityLevelConfiguration    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = FlowcontrolApiserverV1beta3Api(api_client=client_to_use)
        the_method = getattr(
            inst, "replace_priority_level_configuration_status_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_priority_level_configuration_status_with_http_info "
                "on FlowcontrolApiserverV1beta3Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        return Response["PriorityLevelConfiguration"](result, codes_returning_objects)


@dataclass
class PriorityLevelConfigurationCondition(HikaruBase):
    r"""
    PriorityLevelConfigurationCondition defines the condition of priority level.

    Full name: PriorityLevelConfigurationCondition

    Attributes:
    lastTransitionTime: `lastTransitionTime` is the last time the condition transitioned
        from one status to another.
    message: `message` is a human-readable message indicating details about last
        transition.
    reason: `reason` is a unique, one-word, CamelCase reason for the condition's last
        transition.
    status: `status` is the status of the condition. Can be True, False, Unknown.
        Required.
    type: `type` is the type of the condition. Required.
    """

    lastTransitionTime: Optional[str] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


@dataclass
class PriorityLevelConfigurationList(HikaruDocumentBase):
    r"""
    PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.

    Full name: PriorityLevelConfigurationList

    Attributes:
    items: `items` is a list of request-priorities.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: `metadata` is the standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = "v1beta3"
    items: List["PriorityLevelConfiguration"]
    apiVersion: Optional[str] = "flowcontrol.apiserver.k8s.io/v1beta3"
    kind: Optional[str] = "PriorityLevelConfigurationList"
    metadata: Optional["ListMeta"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def listPriorityLevelConfiguration(
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PriorityLevelConfigurationList"]:
        r"""
        list or watch objects of kind PriorityLevelConfiguration

        operationID: listPriorityLevelConfiguration
        path: /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations

        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   PriorityLevelConfigurationList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = FlowcontrolApiserverV1beta3Api(api_client=client_to_use)
        the_method = getattr(inst, "list_priority_level_configuration_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_priority_level_configuration_with_http_info "
                "on FlowcontrolApiserverV1beta3Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        return Response["PriorityLevelConfigurationList"](
            result, codes_returning_objects
        )

    _watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".flowcontrol_apiserver_v1beta3_api",
        "FlowcontrolApiserverV1beta3Api",
        "list_priority_level_configuration",
    )


@dataclass
class PriorityLevelConfigurationReference(HikaruBase):
    r"""
    PriorityLevelConfigurationReference contains information that points to the
    "request-priority" being used.

    Full name: PriorityLevelConfigurationReference

    Attributes:
    name: `name` is the name of the priority level configuration being referenced
        Required.
    """

    name: str


@dataclass
class PriorityLevelConfigurationSpec(HikaruBase):
    r"""
    PriorityLevelConfigurationSpec specifies the configuration of a priority level.

    Full name: PriorityLevelConfigurationSpec

    Attributes:
    type: `type` indicates whether this priority level is subject to limitation on request
        execution. A value of `"Exempt"` means that requests of this priority level are
        not subject to a limit (and thus are never queued) and do not detract from the
        capacity made available to other priority levels. A value of `"Limited"` means
        that (a) requests of this priority level _are_ subject to limits and (b) some of
        the server's limited capacity is made available exclusively to this priority
        level. Required.
    limited: `limited` specifies how requests are handled for a Limited priority level.
        This field must be non-empty if and only if `type` is `"Limited"`.
    """

    type: str
    limited: Optional["LimitedPriorityLevelConfiguration"] = None


@dataclass
class PriorityLevelConfigurationStatus(HikaruBase):
    r"""
    PriorityLevelConfigurationStatus represents the current state of a "request-priority".

    Full name: PriorityLevelConfigurationStatus

    Attributes:
    conditions: `conditions` is the current state of "request-priority".
    """

    conditions: Optional[List["PriorityLevelConfigurationCondition"]] = field(
        default_factory=list
    )


@dataclass
class QueuingConfiguration(HikaruBase):
    r"""
    QueuingConfiguration holds the configuration parameters for queuing

    Full name: QueuingConfiguration

    Attributes:
    handSize: `handSize` is a small positive number that configures the shuffle sharding
        of requests into queues. When enqueuing a request at this priority level the
        request's flow identifier (a string pair) is hashed and the hash value is used to
        shuffle the list of queues and deal a hand of the size specified here. The request
        is put into one of the shortest queues in that hand. `handSize` must be no larger
        than `queues`, and should be significantly smaller (so that a few heavy flows do
        not saturate most of the queues). See the user-facing documentation for more
        extensive guidance on setting this field. This field has a default value of 8.
    queueLengthLimit: `queueLengthLimit` is the maximum number of requests allowed to be
        waiting in a given queue of this priority level at a time; excess requests are
        rejected. This value must be positive. If not specified, it will be defaulted to
        50.
    queues: `queues` is the number of queues for this priority level. The queues exist
        independently at each apiserver. The value must be positive. Setting it to 1
        effectively precludes shufflesharding and thus makes the distinguisher method of
        associated flow schemas irrelevant. This field has a default value of 64.
    """

    handSize: Optional[int] = None
    queueLengthLimit: Optional[int] = None
    queues: Optional[int] = None


@dataclass
class ResourcePolicyRule(HikaruBase):
    r"""
    ResourcePolicyRule is a predicate that matches some resource requests, testing the
    request's verb and the target resource. A ResourcePolicyRule matches a resource
    request if and only if: (a) at least one member of verbs matches the request, (b) at
    least one member of apiGroups matches the request, (c) at least one member of
    resources matches the request, and (d) either (d1) the request does not specify a
    namespace (i.e., `Namespace==""`) and clusterScope is true or (d2) the request
    specifies a namespace and least one member of namespaces matches the request's
    namespace.

    Full name: ResourcePolicyRule

    Attributes:
    apiGroups: `apiGroups` is a list of matching API groups and may not be empty. "*"
        matches all API groups and, if present, must be the only entry. Required.
    resources: `resources` is a list of matching resources (i.e., lowercase and plural)
        with, if desired, subresource. For example, [ "services", "nodes/status" ]. This
        list may not be empty. "*" matches all resources and, if present, must be the only
        entry. Required.
    verbs: `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs
        and, if present, must be the only entry. Required.
    clusterScope: `clusterScope` indicates whether to match requests that do not specify a
        namespace (which happens either because the resource is not namespaced or the
        request targets all namespaces). If this field is omitted or false then the
        `namespaces` field must contain a non-empty list.
    namespaces: `namespaces` is a list of target namespaces that restricts matches. A
        request that specifies a target namespace matches only if either (a) this list
        contains that target namespace or (b) this list contains "*". Note that "*"
        matches any specified namespace but does not match a request that _does not
        specify_ a namespace (see the `clusterScope` field for that). This list may be
        empty, but only if `clusterScope` is true.
    """

    apiGroups: List[str]
    resources: List[str]
    verbs: List[str]
    clusterScope: Optional[bool] = None
    namespaces: Optional[List[str]] = field(default_factory=list)


@dataclass
class ServiceAccountSubject(HikaruBase):
    r"""
    ServiceAccountSubject holds detailed information for service-account-kind subject.

    Full name: ServiceAccountSubject

    Attributes:
    name: `name` is the name of matching ServiceAccount objects, or "*" to match
        regardless of name. Required.
    namespace: `namespace` is the namespace of matching ServiceAccount objects. Required.
    """

    name: str
    namespace: str


@dataclass
class Subject(HikaruBase):
    r"""
    Subject matches the originator of a request, as identified by the request
    authentication system. There are three ways of matching an originator; by user, group,
    or service account.

    Full name: Subject

    Attributes:
    kind: `kind` indicates which one of the other fields is non-empty. Required
    group: `group` matches based on user group name.
    serviceAccount: `serviceAccount` matches ServiceAccounts.
    user: `user` matches based on username.
    """

    kind: str
    group: Optional["GroupSubject"] = None
    serviceAccount: Optional["ServiceAccountSubject"] = None
    user: Optional["UserSubject"] = None


@dataclass
class UserSubject(HikaruBase):
    r"""
    UserSubject holds detailed information for user-kind subject.

    Full name: UserSubject

    Attributes:
    name: `name` is the username that matches, or "*" to match all usernames. Required.
    """

    name: str


FlowSchema._watcher_cls = FlowSchemaList
PriorityLevelConfiguration._watcher_cls = PriorityLevelConfigurationList


globs = dict(globals())
__all__ = [c.__name__ for c in globs.values()
           if type(c) == type]
del globs
