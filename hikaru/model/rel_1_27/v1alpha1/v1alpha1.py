#
# Copyright (c) 2021 Incisive Technology Ltd
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""
DO NOT EDIT THIS FILE!

This module is automatically generated using the Hikaru build program that turns
a Kubernetes swagger spec into the code for the hikaru.model package.
"""


from hikaru.meta import HikaruBase, HikaruDocumentBase, KubernetesException, WatcherDescriptor
from hikaru.generate import get_clean_dict
from hikaru.utils import Response
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field, InitVar
from kubernetes.client import CoreV1Api
from ..unversioned import *

from kubernetes.client import AdmissionregistrationV1alpha1Api
from kubernetes.client import ApiClient
from kubernetes.client import AuthenticationV1alpha1Api
from kubernetes.client import CertificatesV1alpha1Api
from kubernetes.client import InternalApiserverV1alpha1Api
from kubernetes.client import NetworkingV1alpha1Api
from ..v1 import Status
from ..v1 import LabelSelector
from ..v1 import ObjectMeta
from ..v1 import DeleteOptions
from ..v1 import ListMeta
from ..v1 import Condition
from ..v1 import UserInfo
from ..v1 import NodeSelector


@dataclass
class AuditAnnotation(HikaruBase):
    r"""
    AuditAnnotation describes how to produce an audit annotation for an API request.

    Full name: AuditAnnotation

    Attributes:
    key: key specifies the audit annotation key. The audit annotation keys of a
        ValidatingAdmissionPolicy must be unique. The key must be a qualified name
        ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length. The key is combined
        with the resource name of the ValidatingAdmissionPolicy to construct an audit
        annotation key: "{ValidatingAdmissionPolicy name}/{key}". If an admission webhook
        uses the same resource name as this ValidatingAdmissionPolicy and the same audit
        annotation key, the annotation key will be identical. In this case, the first
        annotation written with the key will be included in the audit event and all
        subsequent annotations with the same key will be discarded. Required.
    valueExpression: valueExpression represents the expression which is evaluated by CEL
        to produce an audit annotation value. The expression must evaluate to either a
        string or null value. If the expression evaluates to a string, the audit
        annotation is included with the string value. If the expression evaluates to null
        or empty string the audit annotation will be omitted. The valueExpression may be
        no longer than 5kb in length. If the result of the valueExpression is more than
        10kb in length, it will be truncated to 10kb. If multiple
        ValidatingAdmissionPolicyBinding resources match an API request, then the
        valueExpression will be evaluated for each binding. All unique values produced by
        the valueExpressions will be joined together in a comma-separated list. Required.
    """

    key: str
    valueExpression: str


@dataclass
class ExpressionWarning(HikaruBase):
    r"""
    ExpressionWarning is a warning information that targets a specific expression.

    Full name: ExpressionWarning

    Attributes:
    fieldRef: The path to the field that refers the expression. For example, the reference
        to the expression of the first item of validations is
        "spec.validations[0].expression"
    warning: The content of type checking information in a human-readable form. Each line
        of the warning contains the type that the expression is checked against, followed
        by the type check error from the compiler.
    """

    fieldRef: str
    warning: str


@dataclass
class MatchCondition(HikaruBase):
    r"""


    Full name: MatchCondition

    Attributes:
    expression: Expression represents the expression which will be evaluated by CEL. Must
        evaluate to bool. CEL expressions have access to the contents of the
        AdmissionRequest and Authorizer, organized into CEL variables: 'object' - The
        object from the incoming request. The value is null for DELETE requests.
        'oldObject' - The existing object. The value is null for CREATE requests.
        'request' - Attributes of the admission
        request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL
        Authorizer. May be used to perform authorization checks for the principal (user or
        service account) of the request. See
        https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
        'authorizer.requestResource' - A CEL ResourceCheck constructed from the
        'authorizer' and configured with the request resource. Documentation on CEL:
        https://kubernetes.io/docs/reference/using-api/cel/ Required.
    name: Name is an identifier for this match condition, used for strategic merging of
        MatchConditions, as well as providing an identifier for logging purposes. A good
        name should be descriptive of the associated expression. Name must be a qualified
        name consisting of alphanumeric characters, '-', '_' or '.', and must start and
        end with an alphanumeric character (e.g. 'MyName', or 'my.name', or '123-abc',
        regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an
        optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName') Required.
    """

    expression: str
    name: str


@dataclass
class MatchResources(HikaruBase):
    r"""
    MatchResources decides whether to run the admission control policy on an object based
    on whether it meets the match criteria. The exclude rules take precedence over include
    rules (if a resource matches both, it is excluded)

    Full name: MatchResources

    Attributes:
    matchPolicy: matchPolicy defines how the "MatchResources" list is used to match
        incoming requests. Allowed values are "Exact" or "Equivalent". - Exact: match a
        request only if it exactly matches a specified rule. For example, if deployments
        can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules"
        only included `apiGroups:["apps"], apiVersions:["v1"], resources:
        ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be
        sent to the ValidatingAdmissionPolicy. - Equivalent: match a request if modifies a
        resource listed in rules, even via another API group or version. For example, if
        deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and
        "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources:
        ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be
        converted to apps/v1 and sent to the ValidatingAdmissionPolicy. Defaults to
        "Equivalent"
    namespaceSelector: NamespaceSelector decides whether to run the admission control
        policy on an object based on whether the namespace for that object matches the
        selector. If the object itself is a namespace, the matching is performed on
        object.metadata.labels. If the object is another cluster scoped resource, it never
        skips the policy. For example, to run the webhook on any objects whose namespace
        is not associated with "runlevel" of "0" or "1"; you will set the selector as
        follows: "namespaceSelector": { "matchExpressions": [ { "key": "runlevel",
        "operator": "NotIn", "values": [ "0", "1" ] } ] } If instead you want to only run
        the policy on any objects whose namespace is associated with the "environment" of
        "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
        "matchExpressions": [ { "key": "environment", "operator": "In", "values": [
        "prod", "staging" ] } ] } See
        https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more
        examples of label selectors. Default to the empty LabelSelector, which matches
        everything.
    objectSelector: ObjectSelector decides whether to run the validation based on if the
        object has matching labels. objectSelector is evaluated against both the oldObject
        and newObject that would be sent to the cel validation, and is considered to match
        if either object matches the selector. A null object (oldObject in the case of
        create, or newObject in the case of delete) or an object that cannot have labels
        (like a DeploymentRollback or a PodProxyOptions object) is not considered to
        match. Use the object selector only if the webhook is opt-in, because end users
        may skip the admission webhook by setting the labels. Default to the empty
        LabelSelector, which matches everything.
    excludeResourceRules: ExcludeResourceRules describes what operations on what
        resources/subresources the ValidatingAdmissionPolicy should not care about. The
        exclude rules take precedence over include rules (if a resource matches both, it
        is excluded)
    resourceRules: ResourceRules describes what operations on what resources/subresources
        the ValidatingAdmissionPolicy matches. The policy cares about an operation if it
        matches _any_ Rule.
    """

    matchPolicy: Optional[str] = None
    namespaceSelector: Optional["LabelSelector"] = None
    objectSelector: Optional["LabelSelector"] = None
    excludeResourceRules: Optional[List["NamedRuleWithOperations"]] = field(
        default_factory=list
    )
    resourceRules: Optional[List["NamedRuleWithOperations"]] = field(
        default_factory=list
    )


@dataclass
class NamedRuleWithOperations(HikaruBase):
    r"""
    NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.

    Full name: NamedRuleWithOperations

    Attributes:
    scope: scope specifies the scope of this rule. Valid values are "Cluster",
        "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will
        match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that
        only namespaced resources will match this rule. "*" means that there are no scope
        restrictions. Subresources match the scope of their parent resource. Default is
        "*".
    apiGroups: APIGroups is the API groups the resources belong to. '*' is all groups. If
        '*' is present, the length of the slice must be one. Required.
    apiVersions: APIVersions is the API versions the resources belong to. '*' is all
        versions. If '*' is present, the length of the slice must be one. Required.
    operations: Operations is the operations the admission hook cares about - CREATE,
        UPDATE, DELETE, CONNECT or * for all of those operations and any future admission
        operations that are added. If '*' is present, the length of the slice must be one.
        Required.
    resourceNames: ResourceNames is an optional white list of names that the rule applies
        to. An empty set means that everything is allowed.
    resources: Resources is a list of resources this rule applies to. For example: 'pods'
        means pods. 'pods/log' means the log subresource of pods. '*' means all resources,
        but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all
        scale subresources. '*/*' means all resources and their subresources. If wildcard
        is present, the validation rule will ensure resources do not overlap with each
        other. Depending on the enclosing object, subresources might not be allowed.
        Required.
    """

    scope: Optional[str] = None
    apiGroups: Optional[List[str]] = field(default_factory=list)
    apiVersions: Optional[List[str]] = field(default_factory=list)
    operations: Optional[List[str]] = field(default_factory=list)
    resourceNames: Optional[List[str]] = field(default_factory=list)
    resources: Optional[List[str]] = field(default_factory=list)


@dataclass
class ParamKind(HikaruBase):
    r"""
    ParamKind is a tuple of Group Kind and Version.

    Full name: ParamKind

    Attributes:
    apiVersion: APIVersion is the API group version the resources belong to. In format of
        "group/version". Required.
    kind: Kind is the API kind the resources belong to. Required.
    """

    apiVersion: Optional[str] = "v1alpha1"
    kind: Optional[str] = "ParamKind"


@dataclass
class ParamRef(HikaruBase):
    r"""
    ParamRef references a parameter resource

    Full name: ParamRef

    Attributes:
    name: Name of the resource being referenced.
    namespace: Namespace of the referenced resource. Should be empty for the
        cluster-scoped resources
    """

    name: Optional[str] = None
    namespace: Optional[str] = None


@dataclass
class TypeChecking(HikaruBase):
    r"""
    TypeChecking contains results of type checking the expressions in the
    ValidatingAdmissionPolicy

    Full name: TypeChecking

    Attributes:
    expressionWarnings: The type checking warnings for each expression.
    """

    expressionWarnings: Optional[List["ExpressionWarning"]] = field(
        default_factory=list
    )


@dataclass
class ValidatingAdmissionPolicy(HikaruDocumentBase):
    r"""
    ValidatingAdmissionPolicy describes the definition of an admission validation policy
    that accepts or rejects an object without changing it.

    Full name: ValidatingAdmissionPolicy

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object metadata; More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    spec: Specification of the desired behavior of the ValidatingAdmissionPolicy.
    status: The status of the ValidatingAdmissionPolicy, including warnings that are
        useful to determine if the policy behaves in the expected way. Populated by the
        system. Read-only.
    """

    _version = "v1alpha1"
    apiVersion: Optional[str] = "admissionregistration.k8s.io/v1alpha1"
    kind: Optional[str] = "ValidatingAdmissionPolicy"
    metadata: Optional["ObjectMeta"] = None
    spec: Optional["ValidatingAdmissionPolicySpec"] = None
    status: Optional["ValidatingAdmissionPolicyStatus"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def deleteCollectionValidatingAdmissionPolicy(
        continue_: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_selector: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicy"]:
        r"""
        delete collection of ValidatingAdmissionPolicy

        operationID: deleteCollectionValidatingAdmissionPolicy
        path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies

        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AdmissionregistrationV1alpha1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "delete_collection_validating_admission_policy_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_collection_validating_admission_policy_with_http_info "
                "on AdmissionregistrationV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["_continue"] = continue_
        all_args["dry_run"] = dry_run
        all_args["field_selector"] = field_selector
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ValidatingAdmissionPolicy"] = Response[
            "ValidatingAdmissionPolicy"
        ](result, codes_returning_objects)
        return resp

    def createValidatingAdmissionPolicy(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicy"]:
        r"""
        create a ValidatingAdmissionPolicy

        operationID: createValidatingAdmissionPolicy
        path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies

        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicy    OK
          201   ValidatingAdmissionPolicy    Created
          202   ValidatingAdmissionPolicy    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AdmissionregistrationV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "create_validating_admission_policy_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_validating_admission_policy_with_http_info "
                "on AdmissionregistrationV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        resp: Response["ValidatingAdmissionPolicy"] = Response[
            "ValidatingAdmissionPolicy"
        ](result, codes_returning_objects)
        return resp

    def create(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ValidatingAdmissionPolicy":
        r"""
            create a ValidatingAdmissionPolicy

            operationID: createValidatingAdmissionPolicy
            path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint.
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.createValidatingAdmissionPolicy(
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def deleteValidatingAdmissionPolicy(
        name: str,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicy"]:
        r"""
        delete a ValidatingAdmissionPolicy

        operationID: deleteValidatingAdmissionPolicy
        path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          202   Status    Accepted
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AdmissionregistrationV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "delete_validating_admission_policy_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_validating_admission_policy_with_http_info "
                "on AdmissionregistrationV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 202)
        resp: Response["ValidatingAdmissionPolicy"] = Response[
            "ValidatingAdmissionPolicy"
        ](result, codes_returning_objects)
        return resp

    def delete(
        self,
        name: Optional[str] = None,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ValidatingAdmissionPolicy":
        r"""
            delete a ValidatingAdmissionPolicy

            operationID: deleteValidatingAdmissionPolicy
            path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param grace_period_seconds: The duration in seconds before the object should
                be deleted. Value must be non-negative integer. The value zero
                indicates delete immediately. If this value is nil, the default
                grace period for the specified type will be used. Defaults to a per
                object value if not specified. zero means delete immediately.
            :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
                field will be deprecated in 1.7. Should the dependent objects be
                orphaned. If true/false, the "orphan" finalizer will be added
                to/removed from the object's finalizers list. Either this field or
                PropagationPolicy may be set, but not both.
            :param propagation_policy: Whether and how garbage collection will be
                performed. Either this field or OrphanDependents may be set, but not
                both. The default policy is decided by the existing finalizer set in
                the metadata.finalizers and the resource-specific default policy.
                Acceptable values are: 'Orphan' - orphan the dependents;
                'Background' - allow the garbage collector to delete the dependents
                in the background; 'Foreground' - a cascading policy that deletes
                all dependents in the foreground.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to delete() or in a "
                "ValidatingAdmissionPolicy's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.deleteValidatingAdmissionPolicy(
            name=effective_name,
            dry_run=dry_run,
            grace_period_seconds=grace_period_seconds,
            orphan_dependents=orphan_dependents,
            propagation_policy=propagation_policy,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    @staticmethod
    def readValidatingAdmissionPolicy(
        name: str,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicy"]:
        r"""
        read the specified ValidatingAdmissionPolicy

        operationID: readValidatingAdmissionPolicy
        path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}

        :param name: name for the resource
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicy    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AdmissionregistrationV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "read_validating_admission_policy_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "read_validating_admission_policy_with_http_info "
                "on AdmissionregistrationV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ValidatingAdmissionPolicy"] = Response[
            "ValidatingAdmissionPolicy"
        ](result, codes_returning_objects)
        return resp

    def read(
        self,
        name: Optional[str] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ValidatingAdmissionPolicy":
        r"""
            read the specified ValidatingAdmissionPolicy

            operationID: readValidatingAdmissionPolicy
            path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param pretty: If 'true', then the output is pretty printed.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to read() or in a "
                "ValidatingAdmissionPolicy's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.readValidatingAdmissionPolicy(
            name=effective_name, pretty=pretty, client=client
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    def patchValidatingAdmissionPolicy(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicy"]:
        r"""
        partially update the specified ValidatingAdmissionPolicy

        operationID: patchValidatingAdmissionPolicy
        path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint. This field is
            required for apply requests (application/apply-patch) but optional
            for non-apply patch types (JsonPatch, MergePatch,
            StrategicMergePatch).
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param force: Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicy    OK
          201   ValidatingAdmissionPolicy    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AdmissionregistrationV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "patch_validating_admission_policy_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "patch_validating_admission_policy_with_http_info "
                "on AdmissionregistrationV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        all_args["force"] = force
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ValidatingAdmissionPolicy"] = Response[
            "ValidatingAdmissionPolicy"
        ](result, codes_returning_objects)
        return resp

    def update(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
    ) -> "ValidatingAdmissionPolicy":
        r"""
            partially update the specified ValidatingAdmissionPolicy

            operationID: patchValidatingAdmissionPolicy
            path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint. This field is
                required for apply requests (application/apply-patch) but optional
                for non-apply patch types (JsonPatch, MergePatch,
                StrategicMergePatch).
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param force: Force is going to "force" Apply requests. It means user will
                re-acquire conflicting fields owned by other people. Force flag must
                be unset for non-apply patch requests.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.patchValidatingAdmissionPolicy(
            name=self.metadata.name,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            force=force,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def __enter__(self):
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        passed = ex_type is None and ex_value is None and ex_traceback is None
        has_rollback = hasattr(self, "__rollback")
        if passed:
            try:
                self.update()
            except Exception:
                if has_rollback:
                    self.merge(getattr(self, "__rollback"), overwrite=True)
                    delattr(self, "__rollback")
                raise
        if has_rollback:
            if not passed:
                self.merge(getattr(self, "__rollback"), overwrite=True)
            delattr(self, "__rollback")
        return False

    def replaceValidatingAdmissionPolicy(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicy"]:
        r"""
        replace the specified ValidatingAdmissionPolicy

        operationID: replaceValidatingAdmissionPolicy
        path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicy    OK
          201   ValidatingAdmissionPolicy    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AdmissionregistrationV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "replace_validating_admission_policy_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_validating_admission_policy_with_http_info "
                "on AdmissionregistrationV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ValidatingAdmissionPolicy"] = Response[
            "ValidatingAdmissionPolicy"
        ](result, codes_returning_objects)
        return resp

    def replaceValidatingAdmissionPolicyStatus(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicy"]:
        r"""
        replace status of the specified ValidatingAdmissionPolicy

        operationID: replaceValidatingAdmissionPolicyStatus
        path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}/status

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicy    OK
          201   ValidatingAdmissionPolicy    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AdmissionregistrationV1alpha1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "replace_validating_admission_policy_status_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_validating_admission_policy_status_with_http_info "
                "on AdmissionregistrationV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ValidatingAdmissionPolicy"] = Response[
            "ValidatingAdmissionPolicy"
        ](result, codes_returning_objects)
        return resp


@dataclass
class ValidatingAdmissionPolicyBinding(HikaruDocumentBase):
    r"""
    ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized
    resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how
    cluster administrators configure policies for clusters.

    Full name: ValidatingAdmissionPolicyBinding

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object metadata; More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    spec: Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
    """

    _version = "v1alpha1"
    apiVersion: Optional[str] = "admissionregistration.k8s.io/v1alpha1"
    kind: Optional[str] = "ValidatingAdmissionPolicyBinding"
    metadata: Optional["ObjectMeta"] = None
    spec: Optional["ValidatingAdmissionPolicyBindingSpec"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def deleteCollectionValidatingAdmissionPolicyBinding(
        continue_: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_selector: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicyBinding"]:
        r"""
        delete collection of ValidatingAdmissionPolicyBinding

        operationID: deleteCollectionValidatingAdmissionPolicyBinding
        path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings

        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AdmissionregistrationV1alpha1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "delete_collection_validating_admission_policy_binding_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_collection_validating_admission_policy_binding_with_http_info "
                "on AdmissionregistrationV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["_continue"] = continue_
        all_args["dry_run"] = dry_run
        all_args["field_selector"] = field_selector
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ValidatingAdmissionPolicyBinding"] = Response[
            "ValidatingAdmissionPolicyBinding"
        ](result, codes_returning_objects)
        return resp

    def createValidatingAdmissionPolicyBinding(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicyBinding"]:
        r"""
        create a ValidatingAdmissionPolicyBinding

        operationID: createValidatingAdmissionPolicyBinding
        path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings

        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicyBinding    OK
          201   ValidatingAdmissionPolicyBinding    Created
          202   ValidatingAdmissionPolicyBinding    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AdmissionregistrationV1alpha1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "create_validating_admission_policy_binding_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_validating_admission_policy_binding_with_http_info "
                "on AdmissionregistrationV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        resp: Response["ValidatingAdmissionPolicyBinding"] = Response[
            "ValidatingAdmissionPolicyBinding"
        ](result, codes_returning_objects)
        return resp

    def create(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ValidatingAdmissionPolicyBinding":
        r"""
            create a ValidatingAdmissionPolicyBinding

            operationID: createValidatingAdmissionPolicyBinding
            path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint.
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.createValidatingAdmissionPolicyBinding(
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def deleteValidatingAdmissionPolicyBinding(
        name: str,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicyBinding"]:
        r"""
        delete a ValidatingAdmissionPolicyBinding

        operationID: deleteValidatingAdmissionPolicyBinding
        path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          202   Status    Accepted
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AdmissionregistrationV1alpha1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "delete_validating_admission_policy_binding_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_validating_admission_policy_binding_with_http_info "
                "on AdmissionregistrationV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 202)
        resp: Response["ValidatingAdmissionPolicyBinding"] = Response[
            "ValidatingAdmissionPolicyBinding"
        ](result, codes_returning_objects)
        return resp

    def delete(
        self,
        name: Optional[str] = None,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ValidatingAdmissionPolicyBinding":
        r"""
            delete a ValidatingAdmissionPolicyBinding

            operationID: deleteValidatingAdmissionPolicyBinding
            path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param grace_period_seconds: The duration in seconds before the object should
                be deleted. Value must be non-negative integer. The value zero
                indicates delete immediately. If this value is nil, the default
                grace period for the specified type will be used. Defaults to a per
                object value if not specified. zero means delete immediately.
            :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
                field will be deprecated in 1.7. Should the dependent objects be
                orphaned. If true/false, the "orphan" finalizer will be added
                to/removed from the object's finalizers list. Either this field or
                PropagationPolicy may be set, but not both.
            :param propagation_policy: Whether and how garbage collection will be
                performed. Either this field or OrphanDependents may be set, but not
                both. The default policy is decided by the existing finalizer set in
                the metadata.finalizers and the resource-specific default policy.
                Acceptable values are: 'Orphan' - orphan the dependents;
                'Background' - allow the garbage collector to delete the dependents
                in the background; 'Foreground' - a cascading policy that deletes
                all dependents in the foreground.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to delete() or in a "
                "ValidatingAdmissionPolicyBinding's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.deleteValidatingAdmissionPolicyBinding(
            name=effective_name,
            dry_run=dry_run,
            grace_period_seconds=grace_period_seconds,
            orphan_dependents=orphan_dependents,
            propagation_policy=propagation_policy,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    @staticmethod
    def readValidatingAdmissionPolicyBinding(
        name: str,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicyBinding"]:
        r"""
        read the specified ValidatingAdmissionPolicyBinding

        operationID: readValidatingAdmissionPolicyBinding
        path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}

        :param name: name for the resource
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicyBinding    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AdmissionregistrationV1alpha1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "read_validating_admission_policy_binding_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "read_validating_admission_policy_binding_with_http_info "
                "on AdmissionregistrationV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ValidatingAdmissionPolicyBinding"] = Response[
            "ValidatingAdmissionPolicyBinding"
        ](result, codes_returning_objects)
        return resp

    def read(
        self,
        name: Optional[str] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ValidatingAdmissionPolicyBinding":
        r"""
            read the specified ValidatingAdmissionPolicyBinding

            operationID: readValidatingAdmissionPolicyBinding
            path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param pretty: If 'true', then the output is pretty printed.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to read() or in a "
                "ValidatingAdmissionPolicyBinding's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.readValidatingAdmissionPolicyBinding(
            name=effective_name, pretty=pretty, client=client
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    def patchValidatingAdmissionPolicyBinding(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicyBinding"]:
        r"""
        partially update the specified ValidatingAdmissionPolicyBinding

        operationID: patchValidatingAdmissionPolicyBinding
        path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint. This field is
            required for apply requests (application/apply-patch) but optional
            for non-apply patch types (JsonPatch, MergePatch,
            StrategicMergePatch).
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param force: Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicyBinding    OK
          201   ValidatingAdmissionPolicyBinding    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AdmissionregistrationV1alpha1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "patch_validating_admission_policy_binding_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "patch_validating_admission_policy_binding_with_http_info "
                "on AdmissionregistrationV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        all_args["force"] = force
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ValidatingAdmissionPolicyBinding"] = Response[
            "ValidatingAdmissionPolicyBinding"
        ](result, codes_returning_objects)
        return resp

    def update(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
    ) -> "ValidatingAdmissionPolicyBinding":
        r"""
            partially update the specified ValidatingAdmissionPolicyBinding

            operationID: patchValidatingAdmissionPolicyBinding
            path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint. This field is
                required for apply requests (application/apply-patch) but optional
                for non-apply patch types (JsonPatch, MergePatch,
                StrategicMergePatch).
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param force: Force is going to "force" Apply requests. It means user will
                re-acquire conflicting fields owned by other people. Force flag must
                be unset for non-apply patch requests.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.patchValidatingAdmissionPolicyBinding(
            name=self.metadata.name,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            force=force,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def __enter__(self):
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        passed = ex_type is None and ex_value is None and ex_traceback is None
        has_rollback = hasattr(self, "__rollback")
        if passed:
            try:
                self.update()
            except Exception:
                if has_rollback:
                    self.merge(getattr(self, "__rollback"), overwrite=True)
                    delattr(self, "__rollback")
                raise
        if has_rollback:
            if not passed:
                self.merge(getattr(self, "__rollback"), overwrite=True)
            delattr(self, "__rollback")
        return False

    def replaceValidatingAdmissionPolicyBinding(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicyBinding"]:
        r"""
        replace the specified ValidatingAdmissionPolicyBinding

        operationID: replaceValidatingAdmissionPolicyBinding
        path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicyBinding    OK
          201   ValidatingAdmissionPolicyBinding    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AdmissionregistrationV1alpha1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "replace_validating_admission_policy_binding_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_validating_admission_policy_binding_with_http_info "
                "on AdmissionregistrationV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ValidatingAdmissionPolicyBinding"] = Response[
            "ValidatingAdmissionPolicyBinding"
        ](result, codes_returning_objects)
        return resp


@dataclass
class ValidatingAdmissionPolicyBindingList(HikaruDocumentBase):
    r"""
    ValidatingAdmissionPolicyBindingList is a list of ValidatingAdmissionPolicyBinding.

    Full name: ValidatingAdmissionPolicyBindingList

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    items: List of PolicyBinding.
    """

    _version = "v1alpha1"
    apiVersion: Optional[str] = "admissionregistration.k8s.io/v1alpha1"
    kind: Optional[str] = "ValidatingAdmissionPolicyBindingList"
    metadata: Optional["ListMeta"] = None
    items: Optional[List["ValidatingAdmissionPolicyBinding"]] = field(
        default_factory=list
    )
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def listValidatingAdmissionPolicyBinding(
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicyBindingList"]:
        r"""
        list or watch objects of kind ValidatingAdmissionPolicyBinding

        operationID: listValidatingAdmissionPolicyBinding
        path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings

        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicyBindingList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AdmissionregistrationV1alpha1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "list_validating_admission_policy_binding_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_validating_admission_policy_binding_with_http_info "
                "on AdmissionregistrationV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ValidatingAdmissionPolicyBindingList"] = Response[
            "ValidatingAdmissionPolicyBindingList"
        ](result, codes_returning_objects)
        return resp

    _watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".admissionregistration_v1alpha1_api",
        "AdmissionregistrationV1alpha1Api",
        "list_validating_admission_policy_binding",
    )


@dataclass
class ValidatingAdmissionPolicyBindingSpec(HikaruBase):
    r"""
    ValidatingAdmissionPolicyBindingSpec is the specification of the
    ValidatingAdmissionPolicyBinding.

    Full name: ValidatingAdmissionPolicyBindingSpec

    Attributes:
    matchResources: MatchResources declares what resources match this binding and will be
        validated by it. Note that this is intersected with the policy's matchConstraints,
        so only requests that are matched by the policy can be selected by this. If this
        is unset, all resources matched by the policy are validated by this binding When
        resourceRules is unset, it does not constrain resource matching. If a resource is
        matched by the other fields of this object, it will be validated. Note that this
        is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules
        are required.
    paramRef: ParamRef specifies the parameter resource used to configure the admission
        control policy. It should point to a resource of the type specified in ParamKind
        of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and
        the resource referred to by ParamRef does not exist, this binding is considered
        mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied.
    policyName: PolicyName references a ValidatingAdmissionPolicy name which the
        ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not
        exist, this binding is considered invalid and will be ignored Required.
    validationActions: validationActions declares how Validations of the referenced
        ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is
        always enforced according to these actions. Failures defined by the
        ValidatingAdmissionPolicy's FailurePolicy are enforced according to these actions
        only if the FailurePolicy is set to Fail, otherwise the failures are ignored. This
        includes compilation errors, runtime errors and misconfigurations of the policy.
        validationActions is declared as a set of action values. Order does not matter.
        validationActions may not contain duplicates of the same action. The supported
        actions values are: "Deny" specifies that a validation failure results in a denied
        request. "Warn" specifies that a validation failure is reported to the request
        client in HTTP Warning headers, with a warning code of 299. Warnings can be sent
        both for allowed or denied admission responses. "Audit" specifies that a
        validation failure is included in the published audit event for the request. The
        audit event will contain a `validation.policy.admission.k8s.io/validation_failure`
        audit annotation with a value containing the details of the validation failures,
        formatted as a JSON list of objects, each with the following fields: - message:
        The validation failure message string - policy: The resource name of the
        ValidatingAdmissionPolicy - binding: The resource name of the
        ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed
        validations in the ValidatingAdmissionPolicy - validationActions: The enforcement
        actions enacted for the validation failure Example audit annotation:
        `"validation.policy.admission.k8s.io/validation_failure": "[{"message": "Invalid
        value", {"policy": "policy.example.com", {"binding": "policybinding.example.com",
        {"expressionIndex": "1", {"validationActions": ["Audit"]}]"` Clients should expect
        to handle additional values by ignoring any values not recognized. "Deny" and
        "Warn" may not be used together since this combination needlessly duplicates the
        validation failure both in the API response body and the HTTP warning headers.
        Required.
    """

    matchResources: Optional["MatchResources"] = None
    paramRef: Optional["ParamRef"] = None
    policyName: Optional[str] = None
    validationActions: Optional[List[str]] = field(default_factory=list)


@dataclass
class ValidatingAdmissionPolicyList(HikaruDocumentBase):
    r"""
    ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.

    Full name: ValidatingAdmissionPolicyList

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    items: List of ValidatingAdmissionPolicy.
    """

    _version = "v1alpha1"
    apiVersion: Optional[str] = "admissionregistration.k8s.io/v1alpha1"
    kind: Optional[str] = "ValidatingAdmissionPolicyList"
    metadata: Optional["ListMeta"] = None
    items: Optional[List["ValidatingAdmissionPolicy"]] = field(default_factory=list)
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def listValidatingAdmissionPolicy(
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicyList"]:
        r"""
        list or watch objects of kind ValidatingAdmissionPolicy

        operationID: listValidatingAdmissionPolicy
        path: /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies

        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicyList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AdmissionregistrationV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "list_validating_admission_policy_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_validating_admission_policy_with_http_info "
                "on AdmissionregistrationV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ValidatingAdmissionPolicyList"] = Response[
            "ValidatingAdmissionPolicyList"
        ](result, codes_returning_objects)
        return resp

    _watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".admissionregistration_v1alpha1_api",
        "AdmissionregistrationV1alpha1Api",
        "list_validating_admission_policy",
    )


@dataclass
class ValidatingAdmissionPolicySpec(HikaruBase):
    r"""
    ValidatingAdmissionPolicySpec is the specification of the desired behavior of the
    AdmissionPolicy.

    Full name: ValidatingAdmissionPolicySpec

    Attributes:
    failurePolicy: failurePolicy defines how to handle failures for the admission policy.
        Failures can occur from CEL expression parse errors, type check errors, runtime
        errors and invalid or mis-configured policy definitions or bindings. A policy is
        invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if
        spec.paramRef.name refers to a non-existent resource. failurePolicy does not
        define how validations that evaluate to false are handled. When failurePolicy is
        set to Fail, ValidatingAdmissionPolicyBinding validationActions define how
        failures are enforced. Allowed values are Ignore or Fail. Defaults to Fail.
    matchConstraints: MatchConstraints specifies what resources this policy is designed to
        validate. The AdmissionPolicy cares about a request if it matches _all_
        Constraints. However, in order to prevent clusters from being put into an unstable
        state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot
        match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
    paramKind: ParamKind specifies the kind of resources used to parameterize this policy.
        If absent, there are no parameters for this policy and the param CEL variable will
        not be provided to validation expressions. If ParamKind refers to a non-existent
        kind, this policy definition is mis-configured and the FailurePolicy is applied.
        If paramKind is specified but paramRef is unset in
        ValidatingAdmissionPolicyBinding, the params variable will be null.
    auditAnnotations: auditAnnotations contains CEL expressions which are used to produce
        audit annotations for the audit event of the API request. validations and
        auditAnnotations may not both be empty; a least one of validations or
        auditAnnotations is required.
    matchConditions: MatchConditions is a list of conditions that must be met for a
        request to be validated. Match conditions filter requests that have already been
        matched by the rules, namespaceSelector, and objectSelector. An empty list of
        matchConditions matches all requests. There are a maximum of 64 match conditions
        allowed. If a parameter object is provided, it can be accessed via the `params`
        handle in the same manner as validation expressions. The exact matching logic is
        (in order): 1. If ANY matchCondition evaluates to FALSE, the policy is skipped. 2.
        If ALL matchConditions evaluate to TRUE, the policy is evaluated. 3. If any
        matchCondition evaluates to an error (but none are FALSE): - If
        failurePolicy=Fail, reject the request - If failurePolicy=Ignore, the policy is
        skipped
    validations: Validations contain CEL expressions which is used to apply the
        validation. Validations and AuditAnnotations may not both be empty; a minimum of
        one Validations or AuditAnnotations is required.
    """

    failurePolicy: Optional[str] = None
    matchConstraints: Optional["MatchResources"] = None
    paramKind: Optional["ParamKind"] = None
    auditAnnotations: Optional[List["AuditAnnotation"]] = field(default_factory=list)
    matchConditions: Optional[List["MatchCondition"]] = field(default_factory=list)
    validations: Optional[List["Validation"]] = field(default_factory=list)


@dataclass
class ValidatingAdmissionPolicyStatus(HikaruBase):
    r"""
    ValidatingAdmissionPolicyStatus represents the status of a ValidatingAdmissionPolicy.

    Full name: ValidatingAdmissionPolicyStatus

    Attributes:
    observedGeneration: The generation observed by the controller.
    typeChecking: The results of type checking for each expression. Presence of this field
        indicates the completion of the type checking.
    conditions: The conditions represent the latest available observations of a policy's
        current state.
    """

    observedGeneration: Optional[int] = None
    typeChecking: Optional["TypeChecking"] = None
    conditions: Optional[List["Condition"]] = field(default_factory=list)


@dataclass
class Validation(HikaruBase):
    r"""
    Validation specifies the CEL expression which is used to apply the validation.

    Full name: Validation

    Attributes:
    expression: Expression represents the expression which will be evaluated by CEL. ref:
        https://github.com/google/cel-spec CEL expressions have access to the contents of
        the API request/response, organized into CEL variables as well as some other
        useful variables: - 'object' - The object from the incoming request. The value is
        null for DELETE requests. - 'oldObject' - The existing object. The value is null
        for CREATE requests. - 'request' - Attributes of the API
        request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' -
        Parameter resource referred to by the policy binding being evaluated. Only
        populated if the policy has a ParamKind. - 'authorizer' - A CEL Authorizer. May be
        used to perform authorization checks for the principal (user or service account)
        of the request. See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz -
        'authorizer.requestResource' - A CEL ResourceCheck constructed from the
        'authorizer' and configured with the request resource. The `apiVersion`, `kind`,
        `metadata.name` and `metadata.generateName` are always accessible from the root of
        the object. No other metadata properties are accessible. Only property names of
        the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names
        are escaped according to the following rules when accessed in the expression: -
        '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to
        '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL
        RESERVED keyword escape to '__{keyword}__'. The keywords are: "true", "false",
        "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
        "import", "let", "loop", "package", "namespace", "return". Examples: - Expression
        accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
        - Expression accessing a property named "x-prop": {"Expression":
        "object.x__dash__prop > 0"} - Expression accessing a property named "redact__d":
        {"Expression": "object.redact__underscores__d > 0"} Equality on arrays with list
        type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation
        on arrays with x-kubernetes-list-type use the semantics of the list type: - 'set':
        `X + Y` performs a union where the array positions of all elements in `X` are
        preserved and non-intersecting elements in `Y` are appended, retaining their
        partial order. - 'map': `X + Y` performs a merge where the array positions of all
        keys in `X` are preserved but the values are overwritten by values in `Y` when the
        key sets of `X` and `Y` intersect. Elements in `Y` with non-intersecting keys are
        appended, retaining their partial order. Required.
    message: Message represents the message displayed when validation fails. The message
        is required if the Expression contains line breaks. The message must not contain
        line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL
        with the host matching spec.host" If the Expression contains line breaks. Message
        is required. The message must not contain line breaks. If unset, the message is
        "failed Expression: {Expression}".
    messageExpression: messageExpression declares a CEL expression that evaluates to the
        validation failure message that is returned when this rule fails. Since
        messageExpression is used as a failure message, it must evaluate to a string. If
        both message and messageExpression are present on a validation, then
        messageExpression will be used if validation fails. If messageExpression results
        in a runtime error, the runtime error is logged, and the validation failure
        message is produced as if the messageExpression field were unset. If
        messageExpression evaluates to an empty string, a string with only spaces, or a
        string that contains line breaks, then the validation failure message will also be
        produced as if the messageExpression field were unset, and the fact that
        messageExpression produced an empty string/string with only spaces/string with
        line breaks will be logged. messageExpression has access to all the same variables
        as the `expression` except for 'authorizer' and 'authorizer.requestResource'.
        Example: "object.x must be less than max ("+string(params.max)+")"
    reason: Reason represents a machine-readable description of why this validation
        failed. If this is the first validation in the list to fail, this reason, as well
        as the corresponding HTTP response code, are used in the HTTP response to the
        client. The currently supported reasons are: "Unauthorized", "Forbidden",
        "Invalid", "RequestEntityTooLarge". If not set, StatusReasonInvalid is used in the
        response to the client.
    """

    expression: str
    message: Optional[str] = None
    messageExpression: Optional[str] = None
    reason: Optional[str] = None


@dataclass
class ServerStorageVersion(HikaruBase):
    r"""
    An API server instance reports the version it can decode and the version it encodes
    objects to when persisting objects in the backend.

    Full name: ServerStorageVersion

    Attributes:
    apiServerID: The ID of the reporting API server.
    encodingVersion: The API server encodes the object to this version when persisting it
        in the backend (e.g., etcd).
    decodableVersions: The API server can decode objects encoded in these versions. The
        encodingVersion must be included in the decodableVersions.
    """

    apiServerID: Optional[str] = None
    encodingVersion: Optional[str] = None
    decodableVersions: Optional[List[str]] = field(default_factory=list)


@dataclass
class StorageVersion(HikaruDocumentBase):
    r"""
    Storage version of a specific resource.

    Full name: StorageVersion

    Attributes:
    spec: Spec is an empty spec. It is here to comply with Kubernetes API style.
    status: API server instances report the version they can decode and the version they
        encode objects to when persisting objects in the backend.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: The name is <group>.<resource>.
    """

    _version = "v1alpha1"
    spec: object
    status: "StorageVersionStatus"
    apiVersion: Optional[str] = "internal.apiserver.k8s.io/v1alpha1"
    kind: Optional[str] = "StorageVersion"
    metadata: Optional["ObjectMeta"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def deleteCollectionStorageVersion(
        continue_: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_selector: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["StorageVersion"]:
        r"""
        delete collection of StorageVersion

        operationID: deleteCollectionStorageVersion
        path: /apis/internal.apiserver.k8s.io/v1alpha1/storageversions

        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = InternalApiserverV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "delete_collection_storage_version_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_collection_storage_version_with_http_info "
                "on InternalApiserverV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["_continue"] = continue_
        all_args["dry_run"] = dry_run
        all_args["field_selector"] = field_selector
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["StorageVersion"] = Response["StorageVersion"](
            result, codes_returning_objects
        )
        return resp

    def createStorageVersion(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["StorageVersion"]:
        r"""
        create a StorageVersion

        operationID: createStorageVersion
        path: /apis/internal.apiserver.k8s.io/v1alpha1/storageversions

        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   StorageVersion    OK
          201   StorageVersion    Created
          202   StorageVersion    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = InternalApiserverV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "create_storage_version_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_storage_version_with_http_info "
                "on InternalApiserverV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        resp: Response["StorageVersion"] = Response["StorageVersion"](
            result, codes_returning_objects
        )
        return resp

    def create(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
    ) -> "StorageVersion":
        r"""
            create a StorageVersion

            operationID: createStorageVersion
            path: /apis/internal.apiserver.k8s.io/v1alpha1/storageversions

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint.
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.createStorageVersion(
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def deleteStorageVersion(
        name: str,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["StorageVersion"]:
        r"""
        delete a StorageVersion

        operationID: deleteStorageVersion
        path: /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          202   Status    Accepted
          401   None    Unauthorized
        """
        client_to_use = client
        inst = InternalApiserverV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "delete_storage_version_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_storage_version_with_http_info "
                "on InternalApiserverV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 202)
        resp: Response["StorageVersion"] = Response["StorageVersion"](
            result, codes_returning_objects
        )
        return resp

    def delete(
        self,
        name: Optional[str] = None,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        client: ApiClient = None,
    ) -> "StorageVersion":
        r"""
            delete a StorageVersion

            operationID: deleteStorageVersion
            path: /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param grace_period_seconds: The duration in seconds before the object should
                be deleted. Value must be non-negative integer. The value zero
                indicates delete immediately. If this value is nil, the default
                grace period for the specified type will be used. Defaults to a per
                object value if not specified. zero means delete immediately.
            :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
                field will be deprecated in 1.7. Should the dependent objects be
                orphaned. If true/false, the "orphan" finalizer will be added
                to/removed from the object's finalizers list. Either this field or
                PropagationPolicy may be set, but not both.
            :param propagation_policy: Whether and how garbage collection will be
                performed. Either this field or OrphanDependents may be set, but not
                both. The default policy is decided by the existing finalizer set in
                the metadata.finalizers and the resource-specific default policy.
                Acceptable values are: 'Orphan' - orphan the dependents;
                'Background' - allow the garbage collector to delete the dependents
                in the background; 'Foreground' - a cascading policy that deletes
                all dependents in the foreground.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to delete() or in a "
                "StorageVersion's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.deleteStorageVersion(
            name=effective_name,
            dry_run=dry_run,
            grace_period_seconds=grace_period_seconds,
            orphan_dependents=orphan_dependents,
            propagation_policy=propagation_policy,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    @staticmethod
    def readStorageVersion(
        name: str,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["StorageVersion"]:
        r"""
        read the specified StorageVersion

        operationID: readStorageVersion
        path: /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}

        :param name: name for the resource
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   StorageVersion    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = InternalApiserverV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "read_storage_version_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "read_storage_version_with_http_info "
                "on InternalApiserverV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["StorageVersion"] = Response["StorageVersion"](
            result, codes_returning_objects
        )
        return resp

    def read(
        self,
        name: Optional[str] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
    ) -> "StorageVersion":
        r"""
            read the specified StorageVersion

            operationID: readStorageVersion
            path: /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param pretty: If 'true', then the output is pretty printed.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to read() or in a "
                "StorageVersion's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.readStorageVersion(name=effective_name, pretty=pretty, client=client)
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    def patchStorageVersion(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["StorageVersion"]:
        r"""
        partially update the specified StorageVersion

        operationID: patchStorageVersion
        path: /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint. This field is
            required for apply requests (application/apply-patch) but optional
            for non-apply patch types (JsonPatch, MergePatch,
            StrategicMergePatch).
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param force: Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   StorageVersion    OK
          201   StorageVersion    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = InternalApiserverV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "patch_storage_version_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "patch_storage_version_with_http_info "
                "on InternalApiserverV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        all_args["force"] = force
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["StorageVersion"] = Response["StorageVersion"](
            result, codes_returning_objects
        )
        return resp

    def update(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
    ) -> "StorageVersion":
        r"""
            partially update the specified StorageVersion

            operationID: patchStorageVersion
            path: /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint. This field is
                required for apply requests (application/apply-patch) but optional
                for non-apply patch types (JsonPatch, MergePatch,
                StrategicMergePatch).
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param force: Force is going to "force" Apply requests. It means user will
                re-acquire conflicting fields owned by other people. Force flag must
                be unset for non-apply patch requests.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.patchStorageVersion(
            name=self.metadata.name,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            force=force,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def __enter__(self):
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        passed = ex_type is None and ex_value is None and ex_traceback is None
        has_rollback = hasattr(self, "__rollback")
        if passed:
            try:
                self.update()
            except Exception:
                if has_rollback:
                    self.merge(getattr(self, "__rollback"), overwrite=True)
                    delattr(self, "__rollback")
                raise
        if has_rollback:
            if not passed:
                self.merge(getattr(self, "__rollback"), overwrite=True)
            delattr(self, "__rollback")
        return False

    def replaceStorageVersion(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["StorageVersion"]:
        r"""
        replace the specified StorageVersion

        operationID: replaceStorageVersion
        path: /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   StorageVersion    OK
          201   StorageVersion    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = InternalApiserverV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "replace_storage_version_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_storage_version_with_http_info "
                "on InternalApiserverV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["StorageVersion"] = Response["StorageVersion"](
            result, codes_returning_objects
        )
        return resp

    def replaceStorageVersionStatus(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["StorageVersion"]:
        r"""
        replace status of the specified StorageVersion

        operationID: replaceStorageVersionStatus
        path: /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}/status

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   StorageVersion    OK
          201   StorageVersion    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = InternalApiserverV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "replace_storage_version_status_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_storage_version_status_with_http_info "
                "on InternalApiserverV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["StorageVersion"] = Response["StorageVersion"](
            result, codes_returning_objects
        )
        return resp


@dataclass
class StorageVersionCondition(HikaruBase):
    r"""
    Describes the state of the storageVersion at a certain point.

    Full name: StorageVersionCondition

    Attributes:
    reason: The reason for the condition's last transition.
    status: Status of the condition, one of True, False, Unknown.
    type: Type of the condition.
    lastTransitionTime: Last time the condition transitioned from one status to another.
    message: A human readable message indicating details about the transition.
    observedGeneration: If set, this represents the .metadata.generation that the
        condition was set based upon.
    """

    reason: str
    status: str
    type: str
    lastTransitionTime: Optional[str] = None
    message: Optional[str] = None
    observedGeneration: Optional[int] = None


@dataclass
class StorageVersionList(HikaruDocumentBase):
    r"""
    A list of StorageVersions.

    Full name: StorageVersionList

    Attributes:
    items: Items holds a list of StorageVersion
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = "v1alpha1"
    items: List["StorageVersion"]
    apiVersion: Optional[str] = "internal.apiserver.k8s.io/v1alpha1"
    kind: Optional[str] = "StorageVersionList"
    metadata: Optional["ListMeta"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def listStorageVersion(
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["StorageVersionList"]:
        r"""
        list or watch objects of kind StorageVersion

        operationID: listStorageVersion
        path: /apis/internal.apiserver.k8s.io/v1alpha1/storageversions

        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   StorageVersionList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = InternalApiserverV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "list_storage_version_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_storage_version_with_http_info "
                "on InternalApiserverV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["StorageVersionList"] = Response["StorageVersionList"](
            result, codes_returning_objects
        )
        return resp

    _watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".internal_apiserver_v1alpha1_api",
        "InternalApiserverV1alpha1Api",
        "list_storage_version",
    )


@dataclass
class StorageVersionStatus(HikaruBase):
    r"""
    API server instances report the versions they can decode and the version they encode
    objects to when persisting objects in the backend.

    Full name: StorageVersionStatus

    Attributes:
    commonEncodingVersion: If all API server instances agree on the same encoding storage
        version, then this field is set to that version. Otherwise this field is left
        empty. API servers should finish updating its storageVersionStatus entry before
        serving write operations, so that this field will be in sync with the reality.
    conditions: The latest available observations of the storageVersion's state.
    storageVersions: The reported versions per API server instance.
    """

    commonEncodingVersion: Optional[str] = None
    conditions: Optional[List["StorageVersionCondition"]] = field(default_factory=list)
    storageVersions: Optional[List["ServerStorageVersion"]] = field(
        default_factory=list
    )


@dataclass
class SelfSubjectReview(HikaruDocumentBase):
    r"""
    SelfSubjectReview contains the user information that the kube-apiserver has about the
    user making this request. When using impersonation, users will receive the user info
    of the user being impersonated. If impersonation or request header authentication is
    used, any extra keys will have their case ignored and returned as lowercase.

    Full name: SelfSubjectReview

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    status: Status is filled in by the server with the user attributes.
    """

    _version = "v1alpha1"
    apiVersion: Optional[str] = "authentication.k8s.io/v1alpha1"
    kind: Optional[str] = "SelfSubjectReview"
    metadata: Optional["ObjectMeta"] = None
    status: Optional["SelfSubjectReviewStatus"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    def createSelfSubjectReview(
        self, client: ApiClient = None, async_req: bool = False
    ) -> Response["SelfSubjectReview"]:
        r"""
        create a SelfSubjectReview

        operationID: createSelfSubjectReview
        path: /apis/authentication.k8s.io/v1alpha1/selfsubjectreviews
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   SelfSubjectReview    OK
          201   SelfSubjectReview    Created
          202   SelfSubjectReview    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AuthenticationV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "create_self_subject_review_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_self_subject_review_with_http_info "
                "on AuthenticationV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()

        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        resp: Response["SelfSubjectReview"] = Response["SelfSubjectReview"](
            result, codes_returning_objects
        )
        return resp

    def create(self, client: ApiClient = None) -> "SelfSubjectReview":
        r"""
            create a SelfSubjectReview

            operationID: createSelfSubjectReview
            path: /apis/authentication.k8s.io/v1alpha1/selfsubjectreviews
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.createSelfSubjectReview(client=client)
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self


@dataclass
class SelfSubjectReviewStatus(HikaruBase):
    r"""
    SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.

    Full name: SelfSubjectReviewStatus

    Attributes:
    userInfo: User attributes of the user making this request.
    """

    userInfo: Optional["UserInfo"] = None


@dataclass
class ClusterTrustBundle(HikaruDocumentBase):
    r"""
    ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root
    certificates). ClusterTrustBundle objects are considered to be readable by any
    authenticated user in the cluster, because they can be mounted by pods using the
    `clusterTrustBundle` projection. All service accounts have read access to
    ClusterTrustBundles by default. Users who only have namespace-level access to a
    cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have
    access to. It can be optionally associated with a particular assigner, in which case
    it contains one valid set of trust anchors for that signer. Signers may have multiple
    associated ClusterTrustBundles; each is an independent set of trust anchors for that
    signer. Admission control is used to enforce that only users with permissions on the
    signer can create or modify the corresponding bundle.

    Full name: ClusterTrustBundle

    Attributes:
    spec: spec contains the signer (if any) and trust anchors.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: metadata contains the object metadata.
    """

    _version = "v1alpha1"
    spec: "ClusterTrustBundleSpec"
    apiVersion: Optional[str] = "certificates.k8s.io/v1alpha1"
    kind: Optional[str] = "ClusterTrustBundle"
    metadata: Optional["ObjectMeta"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def deleteCollectionClusterTrustBundle(
        continue_: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_selector: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ClusterTrustBundle"]:
        r"""
        delete collection of ClusterTrustBundle

        operationID: deleteCollectionClusterTrustBundle
        path: /apis/certificates.k8s.io/v1alpha1/clustertrustbundles

        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CertificatesV1alpha1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "delete_collection_cluster_trust_bundle_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_collection_cluster_trust_bundle_with_http_info "
                "on CertificatesV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["_continue"] = continue_
        all_args["dry_run"] = dry_run
        all_args["field_selector"] = field_selector
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ClusterTrustBundle"] = Response["ClusterTrustBundle"](
            result, codes_returning_objects
        )
        return resp

    def createClusterTrustBundle(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ClusterTrustBundle"]:
        r"""
        create a ClusterTrustBundle

        operationID: createClusterTrustBundle
        path: /apis/certificates.k8s.io/v1alpha1/clustertrustbundles

        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ClusterTrustBundle    OK
          201   ClusterTrustBundle    Created
          202   ClusterTrustBundle    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = CertificatesV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "create_cluster_trust_bundle_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_cluster_trust_bundle_with_http_info "
                "on CertificatesV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        resp: Response["ClusterTrustBundle"] = Response["ClusterTrustBundle"](
            result, codes_returning_objects
        )
        return resp

    def create(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ClusterTrustBundle":
        r"""
            create a ClusterTrustBundle

            operationID: createClusterTrustBundle
            path: /apis/certificates.k8s.io/v1alpha1/clustertrustbundles

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint.
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.createClusterTrustBundle(
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def deleteClusterTrustBundle(
        name: str,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ClusterTrustBundle"]:
        r"""
        delete a ClusterTrustBundle

        operationID: deleteClusterTrustBundle
        path: /apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          202   Status    Accepted
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CertificatesV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "delete_cluster_trust_bundle_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_cluster_trust_bundle_with_http_info "
                "on CertificatesV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 202)
        resp: Response["ClusterTrustBundle"] = Response["ClusterTrustBundle"](
            result, codes_returning_objects
        )
        return resp

    def delete(
        self,
        name: Optional[str] = None,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ClusterTrustBundle":
        r"""
            delete a ClusterTrustBundle

            operationID: deleteClusterTrustBundle
            path: /apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param grace_period_seconds: The duration in seconds before the object should
                be deleted. Value must be non-negative integer. The value zero
                indicates delete immediately. If this value is nil, the default
                grace period for the specified type will be used. Defaults to a per
                object value if not specified. zero means delete immediately.
            :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
                field will be deprecated in 1.7. Should the dependent objects be
                orphaned. If true/false, the "orphan" finalizer will be added
                to/removed from the object's finalizers list. Either this field or
                PropagationPolicy may be set, but not both.
            :param propagation_policy: Whether and how garbage collection will be
                performed. Either this field or OrphanDependents may be set, but not
                both. The default policy is decided by the existing finalizer set in
                the metadata.finalizers and the resource-specific default policy.
                Acceptable values are: 'Orphan' - orphan the dependents;
                'Background' - allow the garbage collector to delete the dependents
                in the background; 'Foreground' - a cascading policy that deletes
                all dependents in the foreground.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to delete() or in a "
                "ClusterTrustBundle's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.deleteClusterTrustBundle(
            name=effective_name,
            dry_run=dry_run,
            grace_period_seconds=grace_period_seconds,
            orphan_dependents=orphan_dependents,
            propagation_policy=propagation_policy,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    @staticmethod
    def readClusterTrustBundle(
        name: str,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ClusterTrustBundle"]:
        r"""
        read the specified ClusterTrustBundle

        operationID: readClusterTrustBundle
        path: /apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}

        :param name: name for the resource
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ClusterTrustBundle    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CertificatesV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "read_cluster_trust_bundle_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "read_cluster_trust_bundle_with_http_info "
                "on CertificatesV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ClusterTrustBundle"] = Response["ClusterTrustBundle"](
            result, codes_returning_objects
        )
        return resp

    def read(
        self,
        name: Optional[str] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ClusterTrustBundle":
        r"""
            read the specified ClusterTrustBundle

            operationID: readClusterTrustBundle
            path: /apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param pretty: If 'true', then the output is pretty printed.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to read() or in a "
                "ClusterTrustBundle's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.readClusterTrustBundle(
            name=effective_name, pretty=pretty, client=client
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    def patchClusterTrustBundle(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ClusterTrustBundle"]:
        r"""
        partially update the specified ClusterTrustBundle

        operationID: patchClusterTrustBundle
        path: /apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint. This field is
            required for apply requests (application/apply-patch) but optional
            for non-apply patch types (JsonPatch, MergePatch,
            StrategicMergePatch).
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param force: Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ClusterTrustBundle    OK
          201   ClusterTrustBundle    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = CertificatesV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "patch_cluster_trust_bundle_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "patch_cluster_trust_bundle_with_http_info "
                "on CertificatesV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        all_args["force"] = force
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ClusterTrustBundle"] = Response["ClusterTrustBundle"](
            result, codes_returning_objects
        )
        return resp

    def update(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
    ) -> "ClusterTrustBundle":
        r"""
            partially update the specified ClusterTrustBundle

            operationID: patchClusterTrustBundle
            path: /apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint. This field is
                required for apply requests (application/apply-patch) but optional
                for non-apply patch types (JsonPatch, MergePatch,
                StrategicMergePatch).
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param force: Force is going to "force" Apply requests. It means user will
                re-acquire conflicting fields owned by other people. Force flag must
                be unset for non-apply patch requests.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.patchClusterTrustBundle(
            name=self.metadata.name,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            force=force,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def __enter__(self):
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        passed = ex_type is None and ex_value is None and ex_traceback is None
        has_rollback = hasattr(self, "__rollback")
        if passed:
            try:
                self.update()
            except Exception:
                if has_rollback:
                    self.merge(getattr(self, "__rollback"), overwrite=True)
                    delattr(self, "__rollback")
                raise
        if has_rollback:
            if not passed:
                self.merge(getattr(self, "__rollback"), overwrite=True)
            delattr(self, "__rollback")
        return False

    def replaceClusterTrustBundle(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ClusterTrustBundle"]:
        r"""
        replace the specified ClusterTrustBundle

        operationID: replaceClusterTrustBundle
        path: /apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ClusterTrustBundle    OK
          201   ClusterTrustBundle    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = CertificatesV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "replace_cluster_trust_bundle_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_cluster_trust_bundle_with_http_info "
                "on CertificatesV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ClusterTrustBundle"] = Response["ClusterTrustBundle"](
            result, codes_returning_objects
        )
        return resp


@dataclass
class ClusterTrustBundleList(HikaruDocumentBase):
    r"""
    ClusterTrustBundleList is a collection of ClusterTrustBundle objects

    Full name: ClusterTrustBundleList

    Attributes:
    items: items is a collection of ClusterTrustBundle objects
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: metadata contains the list metadata.
    """

    _version = "v1alpha1"
    items: List["ClusterTrustBundle"]
    apiVersion: Optional[str] = "certificates.k8s.io/v1alpha1"
    kind: Optional[str] = "ClusterTrustBundleList"
    metadata: Optional["ListMeta"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def listClusterTrustBundle(
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ClusterTrustBundleList"]:
        r"""
        list or watch objects of kind ClusterTrustBundle

        operationID: listClusterTrustBundle
        path: /apis/certificates.k8s.io/v1alpha1/clustertrustbundles

        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ClusterTrustBundleList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CertificatesV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "list_cluster_trust_bundle_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_cluster_trust_bundle_with_http_info "
                "on CertificatesV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ClusterTrustBundleList"] = Response["ClusterTrustBundleList"](
            result, codes_returning_objects
        )
        return resp

    _watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".certificates_v1alpha1_api",
        "CertificatesV1alpha1Api",
        "list_cluster_trust_bundle",
    )


@dataclass
class ClusterTrustBundleSpec(HikaruBase):
    r"""
    ClusterTrustBundleSpec contains the signer and trust anchors.

    Full name: ClusterTrustBundleSpec

    Attributes:
    trustBundle: trustBundle contains the individual X.509 trust anchors for this bundle,
        as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates. The data must
        consist only of PEM certificate blocks that parse as valid X.509 certificates.
        Each certificate must include a basic constraints extension with the CA bit set.
        The API server will reject objects that contain duplicate certificates, or that
        use PEM block headers. Users of ClusterTrustBundles, including Kubelet, are free
        to reorder and deduplicate certificate blocks in this file according to their own
        logic, as well as to drop PEM block headers and inter-block data.
    signerName: signerName indicates the associated signer, if any. In order to create or
        update a ClusterTrustBundle that sets signerName, you must have the following
        cluster-scoped permission: group=certificates.k8s.io resource=signers
        resourceName=<the signer name> verb=attest. If signerName is not empty, then the
        ClusterTrustBundle object must be named with the signer name as a prefix
        (translating slashes to colons). For example, for the signer name
        `example.com/foo`, valid ClusterTrustBundle object names include
        `example.com:foo:abc` and `example.com:foo:v1`. If signerName is empty, then the
        ClusterTrustBundle object's name must not have such a prefix. List/watch requests
        for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME`
        field selector.
    """

    trustBundle: str
    signerName: Optional[str] = None


@dataclass
class ClusterCIDR(HikaruDocumentBase):
    r"""
    ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when
    the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager). A
    cluster may have any number of ClusterCIDR resources, all of which will be considered
    when allocating a CIDR for a Node. A ClusterCIDR is eligible to be used for a given
    Node when the node selector matches the node in question and has free CIDRs to
    allocate. In case of multiple matching ClusterCIDR resources, the allocator will
    attempt to break ties using internal heuristics, but any ClusterCIDR whose node
    selector matches the Node may be used.

    Full name: ClusterCIDR

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: spec is the desired state of the ClusterCIDR. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    _version = "v1alpha1"
    apiVersion: Optional[str] = "networking.k8s.io/v1alpha1"
    kind: Optional[str] = "ClusterCIDR"
    metadata: Optional["ObjectMeta"] = None
    spec: Optional["ClusterCIDRSpec"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def deleteCollectionClusterCIDR(
        continue_: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_selector: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ClusterCIDR"]:
        r"""
        delete collection of ClusterCIDR

        operationID: deleteCollectionClusterCIDR
        path: /apis/networking.k8s.io/v1alpha1/clustercidrs

        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = NetworkingV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "delete_collection_cluster_cidr_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_collection_cluster_cidr_with_http_info "
                "on NetworkingV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["_continue"] = continue_
        all_args["dry_run"] = dry_run
        all_args["field_selector"] = field_selector
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ClusterCIDR"] = Response["ClusterCIDR"](
            result, codes_returning_objects
        )
        return resp

    def createClusterCIDR(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ClusterCIDR"]:
        r"""
        create a ClusterCIDR

        operationID: createClusterCIDR
        path: /apis/networking.k8s.io/v1alpha1/clustercidrs

        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ClusterCIDR    OK
          201   ClusterCIDR    Created
          202   ClusterCIDR    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = NetworkingV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "create_cluster_cidr_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_cluster_cidr_with_http_info "
                "on NetworkingV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        resp: Response["ClusterCIDR"] = Response["ClusterCIDR"](
            result, codes_returning_objects
        )
        return resp

    def create(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ClusterCIDR":
        r"""
            create a ClusterCIDR

            operationID: createClusterCIDR
            path: /apis/networking.k8s.io/v1alpha1/clustercidrs

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint.
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.createClusterCIDR(
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def deleteClusterCIDR(
        name: str,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ClusterCIDR"]:
        r"""
        delete a ClusterCIDR

        operationID: deleteClusterCIDR
        path: /apis/networking.k8s.io/v1alpha1/clustercidrs/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          202   Status    Accepted
          401   None    Unauthorized
        """
        client_to_use = client
        inst = NetworkingV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "delete_cluster_cidr_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_cluster_cidr_with_http_info "
                "on NetworkingV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 202)
        resp: Response["ClusterCIDR"] = Response["ClusterCIDR"](
            result, codes_returning_objects
        )
        return resp

    def delete(
        self,
        name: Optional[str] = None,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ClusterCIDR":
        r"""
            delete a ClusterCIDR

            operationID: deleteClusterCIDR
            path: /apis/networking.k8s.io/v1alpha1/clustercidrs/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param grace_period_seconds: The duration in seconds before the object should
                be deleted. Value must be non-negative integer. The value zero
                indicates delete immediately. If this value is nil, the default
                grace period for the specified type will be used. Defaults to a per
                object value if not specified. zero means delete immediately.
            :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
                field will be deprecated in 1.7. Should the dependent objects be
                orphaned. If true/false, the "orphan" finalizer will be added
                to/removed from the object's finalizers list. Either this field or
                PropagationPolicy may be set, but not both.
            :param propagation_policy: Whether and how garbage collection will be
                performed. Either this field or OrphanDependents may be set, but not
                both. The default policy is decided by the existing finalizer set in
                the metadata.finalizers and the resource-specific default policy.
                Acceptable values are: 'Orphan' - orphan the dependents;
                'Background' - allow the garbage collector to delete the dependents
                in the background; 'Foreground' - a cascading policy that deletes
                all dependents in the foreground.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to delete() or in a "
                "ClusterCIDR's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.deleteClusterCIDR(
            name=effective_name,
            dry_run=dry_run,
            grace_period_seconds=grace_period_seconds,
            orphan_dependents=orphan_dependents,
            propagation_policy=propagation_policy,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    @staticmethod
    def readClusterCIDR(
        name: str,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ClusterCIDR"]:
        r"""
        read the specified ClusterCIDR

        operationID: readClusterCIDR
        path: /apis/networking.k8s.io/v1alpha1/clustercidrs/{name}

        :param name: name for the resource
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ClusterCIDR    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = NetworkingV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "read_cluster_cidr_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "read_cluster_cidr_with_http_info "
                "on NetworkingV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ClusterCIDR"] = Response["ClusterCIDR"](
            result, codes_returning_objects
        )
        return resp

    def read(
        self,
        name: Optional[str] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ClusterCIDR":
        r"""
            read the specified ClusterCIDR

            operationID: readClusterCIDR
            path: /apis/networking.k8s.io/v1alpha1/clustercidrs/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param pretty: If 'true', then the output is pretty printed.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to read() or in a "
                "ClusterCIDR's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.readClusterCIDR(name=effective_name, pretty=pretty, client=client)
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    def patchClusterCIDR(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ClusterCIDR"]:
        r"""
        partially update the specified ClusterCIDR

        operationID: patchClusterCIDR
        path: /apis/networking.k8s.io/v1alpha1/clustercidrs/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint. This field is
            required for apply requests (application/apply-patch) but optional
            for non-apply patch types (JsonPatch, MergePatch,
            StrategicMergePatch).
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param force: Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ClusterCIDR    OK
          201   ClusterCIDR    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = NetworkingV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "patch_cluster_cidr_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "patch_cluster_cidr_with_http_info "
                "on NetworkingV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        all_args["force"] = force
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ClusterCIDR"] = Response["ClusterCIDR"](
            result, codes_returning_objects
        )
        return resp

    def update(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
    ) -> "ClusterCIDR":
        r"""
            partially update the specified ClusterCIDR

            operationID: patchClusterCIDR
            path: /apis/networking.k8s.io/v1alpha1/clustercidrs/{name}

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint. This field is
                required for apply requests (application/apply-patch) but optional
                for non-apply patch types (JsonPatch, MergePatch,
                StrategicMergePatch).
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param force: Force is going to "force" Apply requests. It means user will
                re-acquire conflicting fields owned by other people. Force flag must
                be unset for non-apply patch requests.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.patchClusterCIDR(
            name=self.metadata.name,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            force=force,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def __enter__(self):
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        passed = ex_type is None and ex_value is None and ex_traceback is None
        has_rollback = hasattr(self, "__rollback")
        if passed:
            try:
                self.update()
            except Exception:
                if has_rollback:
                    self.merge(getattr(self, "__rollback"), overwrite=True)
                    delattr(self, "__rollback")
                raise
        if has_rollback:
            if not passed:
                self.merge(getattr(self, "__rollback"), overwrite=True)
            delattr(self, "__rollback")
        return False

    def replaceClusterCIDR(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ClusterCIDR"]:
        r"""
        replace the specified ClusterCIDR

        operationID: replaceClusterCIDR
        path: /apis/networking.k8s.io/v1alpha1/clustercidrs/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ClusterCIDR    OK
          201   ClusterCIDR    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = NetworkingV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "replace_cluster_cidr_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_cluster_cidr_with_http_info "
                "on NetworkingV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ClusterCIDR"] = Response["ClusterCIDR"](
            result, codes_returning_objects
        )
        return resp


@dataclass
class ClusterCIDRList(HikaruDocumentBase):
    r"""
    ClusterCIDRList contains a list of ClusterCIDR.

    Full name: ClusterCIDRList

    Attributes:
    items: items is the list of ClusterCIDRs.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = "v1alpha1"
    items: List["ClusterCIDR"]
    apiVersion: Optional[str] = "networking.k8s.io/v1alpha1"
    kind: Optional[str] = "ClusterCIDRList"
    metadata: Optional["ListMeta"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def listClusterCIDR(
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ClusterCIDRList"]:
        r"""
        list or watch objects of kind ClusterCIDR

        operationID: listClusterCIDR
        path: /apis/networking.k8s.io/v1alpha1/clustercidrs

        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ClusterCIDRList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = NetworkingV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "list_cluster_cidr_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_cluster_cidr_with_http_info "
                "on NetworkingV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ClusterCIDRList"] = Response["ClusterCIDRList"](
            result, codes_returning_objects
        )
        return resp

    _watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".networking_v1alpha1_api",
        "NetworkingV1alpha1Api",
        "list_cluster_cidr",
    )


@dataclass
class ClusterCIDRSpec(HikaruBase):
    r"""
    ClusterCIDRSpec defines the desired state of ClusterCIDR.

    Full name: ClusterCIDRSpec

    Attributes:
    perNodeHostBits: perNodeHostBits defines the number of host bits to be configured per
        node. A subnet mask determines how much of the address is used for network bits
        and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address
        into 24 bits for the network portion and 8 bits for the host portion. To allocate
        256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum
        value is 4 (16 IPs). This field is immutable.
    ipv4: ipv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8"). At least one
        of ipv4 and ipv6 must be specified. This field is immutable.
    ipv6: ipv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64"). At least
        one of ipv4 and ipv6 must be specified. This field is immutable.
    nodeSelector: nodeSelector defines which nodes the config is applicable to. An empty
        or nil nodeSelector selects all nodes. This field is immutable.
    """

    perNodeHostBits: int
    ipv4: Optional[str] = None
    ipv6: Optional[str] = None
    nodeSelector: Optional["NodeSelector"] = None


@dataclass
class IPAddress(HikaruDocumentBase):
    r"""
    IPAddress represents a single IP of a single IP Family. The object is designed to be
    used by APIs that operate on IP addresses. The object is used by the Service core API
    for allocation of IP addresses. An IP address can be represented in different formats,
    to guarantee the uniqueness of the IP, the name of the object is the IP address in
    canonical format, four decimal digits separated by dots suppressing leading zeros for
    IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or
    2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or
    2001:db8:0:0:0::1

    Full name: IPAddress

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: spec is the desired state of the IPAddress. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    _version = "v1alpha1"
    apiVersion: Optional[str] = "networking.k8s.io/v1alpha1"
    kind: Optional[str] = "IPAddress"
    metadata: Optional["ObjectMeta"] = None
    spec: Optional["IPAddressSpec"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def deleteCollectionIPAddress(
        continue_: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_selector: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["IPAddress"]:
        r"""
        delete collection of IPAddress

        operationID: deleteCollectionIPAddress
        path: /apis/networking.k8s.io/v1alpha1/ipaddresses

        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = NetworkingV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "delete_collection_ip_address_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_collection_ip_address_with_http_info "
                "on NetworkingV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["_continue"] = continue_
        all_args["dry_run"] = dry_run
        all_args["field_selector"] = field_selector
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["IPAddress"] = Response["IPAddress"](
            result, codes_returning_objects
        )
        return resp

    def createIPAddress(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["IPAddress"]:
        r"""
        create an IPAddress

        operationID: createIPAddress
        path: /apis/networking.k8s.io/v1alpha1/ipaddresses

        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   IPAddress    OK
          201   IPAddress    Created
          202   IPAddress    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = NetworkingV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "create_ip_address_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_ip_address_with_http_info "
                "on NetworkingV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        resp: Response["IPAddress"] = Response["IPAddress"](
            result, codes_returning_objects
        )
        return resp

    def create(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
    ) -> "IPAddress":
        r"""
            create an IPAddress

            operationID: createIPAddress
            path: /apis/networking.k8s.io/v1alpha1/ipaddresses

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint.
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.createIPAddress(
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def deleteIPAddress(
        name: str,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["IPAddress"]:
        r"""
        delete an IPAddress

        operationID: deleteIPAddress
        path: /apis/networking.k8s.io/v1alpha1/ipaddresses/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          202   Status    Accepted
          401   None    Unauthorized
        """
        client_to_use = client
        inst = NetworkingV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "delete_ip_address_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_ip_address_with_http_info "
                "on NetworkingV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 202)
        resp: Response["IPAddress"] = Response["IPAddress"](
            result, codes_returning_objects
        )
        return resp

    def delete(
        self,
        name: Optional[str] = None,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        client: ApiClient = None,
    ) -> "IPAddress":
        r"""
            delete an IPAddress

            operationID: deleteIPAddress
            path: /apis/networking.k8s.io/v1alpha1/ipaddresses/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param grace_period_seconds: The duration in seconds before the object should
                be deleted. Value must be non-negative integer. The value zero
                indicates delete immediately. If this value is nil, the default
                grace period for the specified type will be used. Defaults to a per
                object value if not specified. zero means delete immediately.
            :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
                field will be deprecated in 1.7. Should the dependent objects be
                orphaned. If true/false, the "orphan" finalizer will be added
                to/removed from the object's finalizers list. Either this field or
                PropagationPolicy may be set, but not both.
            :param propagation_policy: Whether and how garbage collection will be
                performed. Either this field or OrphanDependents may be set, but not
                both. The default policy is decided by the existing finalizer set in
                the metadata.finalizers and the resource-specific default policy.
                Acceptable values are: 'Orphan' - orphan the dependents;
                'Background' - allow the garbage collector to delete the dependents
                in the background; 'Foreground' - a cascading policy that deletes
                all dependents in the foreground.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to delete() or in a "
                "IPAddress's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.deleteIPAddress(
            name=effective_name,
            dry_run=dry_run,
            grace_period_seconds=grace_period_seconds,
            orphan_dependents=orphan_dependents,
            propagation_policy=propagation_policy,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    @staticmethod
    def readIPAddress(
        name: str,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["IPAddress"]:
        r"""
        read the specified IPAddress

        operationID: readIPAddress
        path: /apis/networking.k8s.io/v1alpha1/ipaddresses/{name}

        :param name: name for the resource
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   IPAddress    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = NetworkingV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "read_ip_address_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "read_ip_address_with_http_info "
                "on NetworkingV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["IPAddress"] = Response["IPAddress"](
            result, codes_returning_objects
        )
        return resp

    def read(
        self,
        name: Optional[str] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
    ) -> "IPAddress":
        r"""
            read the specified IPAddress

            operationID: readIPAddress
            path: /apis/networking.k8s.io/v1alpha1/ipaddresses/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param pretty: If 'true', then the output is pretty printed.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to read() or in a "
                "IPAddress's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.readIPAddress(name=effective_name, pretty=pretty, client=client)
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    def patchIPAddress(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["IPAddress"]:
        r"""
        partially update the specified IPAddress

        operationID: patchIPAddress
        path: /apis/networking.k8s.io/v1alpha1/ipaddresses/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint. This field is
            required for apply requests (application/apply-patch) but optional
            for non-apply patch types (JsonPatch, MergePatch,
            StrategicMergePatch).
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param force: Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   IPAddress    OK
          201   IPAddress    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = NetworkingV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "patch_ip_address_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "patch_ip_address_with_http_info "
                "on NetworkingV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        all_args["force"] = force
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["IPAddress"] = Response["IPAddress"](
            result, codes_returning_objects
        )
        return resp

    def update(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
    ) -> "IPAddress":
        r"""
            partially update the specified IPAddress

            operationID: patchIPAddress
            path: /apis/networking.k8s.io/v1alpha1/ipaddresses/{name}

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint. This field is
                required for apply requests (application/apply-patch) but optional
                for non-apply patch types (JsonPatch, MergePatch,
                StrategicMergePatch).
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param force: Force is going to "force" Apply requests. It means user will
                re-acquire conflicting fields owned by other people. Force flag must
                be unset for non-apply patch requests.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.patchIPAddress(
            name=self.metadata.name,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            force=force,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def __enter__(self):
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        passed = ex_type is None and ex_value is None and ex_traceback is None
        has_rollback = hasattr(self, "__rollback")
        if passed:
            try:
                self.update()
            except Exception:
                if has_rollback:
                    self.merge(getattr(self, "__rollback"), overwrite=True)
                    delattr(self, "__rollback")
                raise
        if has_rollback:
            if not passed:
                self.merge(getattr(self, "__rollback"), overwrite=True)
            delattr(self, "__rollback")
        return False

    def replaceIPAddress(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["IPAddress"]:
        r"""
        replace the specified IPAddress

        operationID: replaceIPAddress
        path: /apis/networking.k8s.io/v1alpha1/ipaddresses/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   IPAddress    OK
          201   IPAddress    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = NetworkingV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "replace_ip_address_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_ip_address_with_http_info "
                "on NetworkingV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["IPAddress"] = Response["IPAddress"](
            result, codes_returning_objects
        )
        return resp


@dataclass
class IPAddressList(HikaruDocumentBase):
    r"""
    IPAddressList contains a list of IPAddress.

    Full name: IPAddressList

    Attributes:
    items: items is the list of IPAddresses.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = "v1alpha1"
    items: List["IPAddress"]
    apiVersion: Optional[str] = "networking.k8s.io/v1alpha1"
    kind: Optional[str] = "IPAddressList"
    metadata: Optional["ListMeta"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def listIPAddress(
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["IPAddressList"]:
        r"""
        list or watch objects of kind IPAddress

        operationID: listIPAddress
        path: /apis/networking.k8s.io/v1alpha1/ipaddresses

        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   IPAddressList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = NetworkingV1alpha1Api(api_client=client_to_use)
        the_method = getattr(inst, "list_ip_address_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_ip_address_with_http_info "
                "on NetworkingV1alpha1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["IPAddressList"] = Response["IPAddressList"](
            result, codes_returning_objects
        )
        return resp

    _watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".networking_v1alpha1_api",
        "NetworkingV1alpha1Api",
        "list_ip_address",
    )


@dataclass
class IPAddressSpec(HikaruBase):
    r"""
    IPAddressSpec describe the attributes in an IP Address.

    Full name: IPAddressSpec

    Attributes:
    parentRef: ParentRef references the resource that an IPAddress is attached to. An
        IPAddress must reference a parent object.
    """

    parentRef: Optional["ParentReference"] = None


@dataclass
class ParentReference(HikaruBase):
    r"""
    ParentReference describes a reference to a parent object.

    Full name: ParentReference

    Attributes:
    group: Group is the group of the object being referenced.
    name: Name is the name of the object being referenced.
    namespace: Namespace is the namespace of the object being referenced.
    resource: Resource is the resource of the object being referenced.
    uid: UID is the uid of the object being referenced.
    """

    group: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    resource: Optional[str] = None
    uid: Optional[str] = None


ValidatingAdmissionPolicyBinding._watcher_cls = ValidatingAdmissionPolicyBindingList
ValidatingAdmissionPolicy._watcher_cls = ValidatingAdmissionPolicyList
StorageVersion._watcher_cls = StorageVersionList
ClusterTrustBundle._watcher_cls = ClusterTrustBundleList
ClusterCIDR._watcher_cls = ClusterCIDRList
IPAddress._watcher_cls = IPAddressList


globs = dict(globals())
__all__ = [c.__name__ for c in globs.values()
           if type(c) == type]
del globs
