#
# Copyright (c) 2021 Incisive Technology Ltd
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""
DO NOT EDIT THIS FILE!

This module is automatically generated using the Hikaru build program that turns
a Kubernetes swagger spec into the code for the hikaru.model package.
"""


from hikaru.meta import HikaruBase, HikaruDocumentBase, KubernetesException, WatcherDescriptor
from hikaru.generate import get_clean_dict
from hikaru.utils import Response
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field, InitVar
from kubernetes.client import CoreV1Api
from ..unversioned import *

from kubernetes.client import ApiClient
from kubernetes.client import ResourceV1alpha2Api
from ..v1 import Status
from ..v1 import NodeSelector
from ..v1 import ObjectMeta
from ..v1 import DeleteOptions
from ..v1 import ListMeta


@dataclass
class AllocationResult(HikaruBase):
    r"""
    AllocationResult contains attributes of an allocated resource.

    Full name: AllocationResult

    Attributes:
    availableOnNodes: This field will get set by the resource driver after it has
        allocated the resource to inform the scheduler where it can schedule Pods using
        the ResourceClaim. Setting this field is optional. If null, the resource is
        available everywhere.
    shareable: Shareable determines whether the resource supports more than one consumer
        at a time.
    resourceHandles: ResourceHandles contain the state associated with an allocation that
        should be maintained throughout the lifetime of a claim. Each ResourceHandle
        contains data that should be passed to a specific kubelet plugin once it lands on
        a node. This data is returned by the driver after a successful allocation and is
        opaque to Kubernetes. Driver documentation may explain to users how to interpret
        this data if needed. Setting this field is optional. It has a maximum size of 32
        entries. If null (or empty), it is assumed this allocation will be processed by a
        single kubelet plugin with no ResourceHandle data attached. The name of the
        kubelet plugin invoked will match the DriverName set in the ResourceClaimStatus
        this AllocationResult is embedded in.
    """

    availableOnNodes: Optional["NodeSelector"] = None
    shareable: Optional[bool] = None
    resourceHandles: Optional[List["ResourceHandle"]] = field(default_factory=list)


@dataclass
class PodSchedulingContext(HikaruDocumentBase):
    r"""
    PodSchedulingContext objects hold information that is needed to schedule a Pod with
    ResourceClaims that use "WaitForFirstConsumer" allocation mode. This is an alpha type
    and requires enabling the DynamicResourceAllocation feature gate.

    Full name: PodSchedulingContext

    Attributes:
    spec: Spec describes where resources for the Pod are needed.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object metadata
    status: Status describes where resources for the Pod can be allocated.
    """

    _version = "v1alpha2"
    spec: "PodSchedulingContextSpec"
    apiVersion: Optional[str] = "resource.k8s.io/v1alpha2"
    kind: Optional[str] = "PodSchedulingContext"
    metadata: Optional["ObjectMeta"] = None
    status: Optional["PodSchedulingContextStatus"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def deleteCollectionNamespacedPodSchedulingContext(
        namespace: str,
        continue_: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_selector: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PodSchedulingContext"]:
        r"""
        delete collection of PodSchedulingContext

        operationID: deleteCollectionNamespacedPodSchedulingContext
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts

        :param namespace: namespace for the resource
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "delete_collection_namespaced_pod_scheduling_context_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_collection_namespaced_pod_scheduling_context_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["namespace"] = namespace
        all_args["_continue"] = continue_
        all_args["dry_run"] = dry_run
        all_args["field_selector"] = field_selector
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["PodSchedulingContext"] = Response["PodSchedulingContext"](
            result, codes_returning_objects
        )
        return resp

    def createNamespacedPodSchedulingContext(
        self,
        namespace: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PodSchedulingContext"]:
        r"""
        create a PodSchedulingContext

        operationID: createNamespacedPodSchedulingContext
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts

        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   PodSchedulingContext    OK
          201   PodSchedulingContext    Created
          202   PodSchedulingContext    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "create_namespaced_pod_scheduling_context_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_namespaced_pod_scheduling_context_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        resp: Response["PodSchedulingContext"] = Response["PodSchedulingContext"](
            result, codes_returning_objects
        )
        return resp

    def create(
        self,
        namespace: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
    ) -> "PodSchedulingContext":
        r"""
            create a PodSchedulingContext

            operationID: createNamespacedPodSchedulingContext
            path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts

            :param namespace: namespace for the resource. NOTE: if you leave out the
                namespace from the arguments you *must* have filled in the namespace
                attribute in the metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint.
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if namespace is not None:
            effective_namespace = namespace
        elif not self.metadata or not self.metadata.namespace:
            raise RuntimeError(
                "There must be a namespace supplied in either "
                "the arguments to create() or in a "
                "PodSchedulingContext's metadata"
            )
        else:
            effective_namespace = self.metadata.namespace
        res = self.createNamespacedPodSchedulingContext(
            namespace=effective_namespace,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def deleteNamespacedPodSchedulingContext(
        name: str,
        namespace: str,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PodSchedulingContext"]:
        r"""
        delete a PodSchedulingContext

        operationID: deleteNamespacedPodSchedulingContext
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   PodSchedulingContext    OK
          202   PodSchedulingContext    Accepted
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "delete_namespaced_pod_scheduling_context_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_namespaced_pod_scheduling_context_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 202)
        resp: Response["PodSchedulingContext"] = Response["PodSchedulingContext"](
            result, codes_returning_objects
        )
        return resp

    def delete(
        self,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        client: ApiClient = None,
    ) -> "PodSchedulingContext":
        r"""
            delete a PodSchedulingContext

            operationID: deleteNamespacedPodSchedulingContext
            path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param namespace: namespace for the resource. NOTE: if you leave out the
                namespace from the arguments you *must* have filled in the namespace
                attribute in the metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param grace_period_seconds: The duration in seconds before the object should
                be deleted. Value must be non-negative integer. The value zero
                indicates delete immediately. If this value is nil, the default
                grace period for the specified type will be used. Defaults to a per
                object value if not specified. zero means delete immediately.
            :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
                field will be deprecated in 1.7. Should the dependent objects be
                orphaned. If true/false, the "orphan" finalizer will be added
                to/removed from the object's finalizers list. Either this field or
                PropagationPolicy may be set, but not both.
            :param propagation_policy: Whether and how garbage collection will be
                performed. Either this field or OrphanDependents may be set, but not
                both. The default policy is decided by the existing finalizer set in
                the metadata.finalizers and the resource-specific default policy.
                Acceptable values are: 'Orphan' - orphan the dependents;
                'Background' - allow the garbage collector to delete the dependents
                in the background; 'Foreground' - a cascading policy that deletes
                all dependents in the foreground.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if namespace is not None:
            effective_namespace = namespace
        elif not self.metadata or not self.metadata.namespace:
            raise RuntimeError(
                "There must be a namespace supplied in either "
                "the arguments to delete() or in a "
                "PodSchedulingContext's metadata"
            )
        else:
            effective_namespace = self.metadata.namespace

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to delete() or in a "
                "PodSchedulingContext's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.deleteNamespacedPodSchedulingContext(
            name=effective_name,
            namespace=effective_namespace,
            dry_run=dry_run,
            grace_period_seconds=grace_period_seconds,
            orphan_dependents=orphan_dependents,
            propagation_policy=propagation_policy,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    @staticmethod
    def readNamespacedPodSchedulingContext(
        name: str,
        namespace: str,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PodSchedulingContext"]:
        r"""
        read the specified PodSchedulingContext

        operationID: readNamespacedPodSchedulingContext
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   PodSchedulingContext    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "read_namespaced_pod_scheduling_context_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "read_namespaced_pod_scheduling_context_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["PodSchedulingContext"] = Response["PodSchedulingContext"](
            result, codes_returning_objects
        )
        return resp

    def read(
        self,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
    ) -> "PodSchedulingContext":
        r"""
            read the specified PodSchedulingContext

            operationID: readNamespacedPodSchedulingContext
            path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param namespace: namespace for the resource. NOTE: if you leave out the
                namespace from the arguments you *must* have filled in the namespace
                attribute in the metadata for the resource!
            :param pretty: If 'true', then the output is pretty printed.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if namespace is not None:
            effective_namespace = namespace
        elif not self.metadata or not self.metadata.namespace:
            raise RuntimeError(
                "There must be a namespace supplied in either "
                "the arguments to read() or in a "
                "PodSchedulingContext's metadata"
            )
        else:
            effective_namespace = self.metadata.namespace

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to read() or in a "
                "PodSchedulingContext's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.readNamespacedPodSchedulingContext(
            name=effective_name,
            namespace=effective_namespace,
            pretty=pretty,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    def patchNamespacedPodSchedulingContext(
        self,
        name: str,
        namespace: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PodSchedulingContext"]:
        r"""
        partially update the specified PodSchedulingContext

        operationID: patchNamespacedPodSchedulingContext
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint. This field is
            required for apply requests (application/apply-patch) but optional
            for non-apply patch types (JsonPatch, MergePatch,
            StrategicMergePatch).
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param force: Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   PodSchedulingContext    OK
          201   PodSchedulingContext    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "patch_namespaced_pod_scheduling_context_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "patch_namespaced_pod_scheduling_context_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        all_args["force"] = force
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["PodSchedulingContext"] = Response["PodSchedulingContext"](
            result, codes_returning_objects
        )
        return resp

    def update(
        self,
        namespace: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
    ) -> "PodSchedulingContext":
        r"""
            partially update the specified PodSchedulingContext

            operationID: patchNamespacedPodSchedulingContext
            path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}

            :param namespace: namespace for the resource. NOTE: if you leave out the
                namespace from the arguments you *must* have filled in the namespace
                attribute in the metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint. This field is
                required for apply requests (application/apply-patch) but optional
                for non-apply patch types (JsonPatch, MergePatch,
                StrategicMergePatch).
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param force: Force is going to "force" Apply requests. It means user will
                re-acquire conflicting fields owned by other people. Force flag must
                be unset for non-apply patch requests.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if namespace is not None:
            effective_namespace = namespace
        elif not self.metadata or not self.metadata.namespace:
            raise RuntimeError(
                "There must be a namespace supplied in either "
                "the arguments to update() or in a "
                "PodSchedulingContext's metadata"
            )
        else:
            effective_namespace = self.metadata.namespace
        res = self.patchNamespacedPodSchedulingContext(
            name=self.metadata.name,
            namespace=effective_namespace,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            force=force,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def __enter__(self):
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        passed = ex_type is None and ex_value is None and ex_traceback is None
        has_rollback = hasattr(self, "__rollback")
        if passed:
            try:
                self.update()
            except Exception:
                if has_rollback:
                    self.merge(getattr(self, "__rollback"), overwrite=True)
                    delattr(self, "__rollback")
                raise
        if has_rollback:
            if not passed:
                self.merge(getattr(self, "__rollback"), overwrite=True)
            delattr(self, "__rollback")
        return False

    def replaceNamespacedPodSchedulingContext(
        self,
        name: str,
        namespace: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PodSchedulingContext"]:
        r"""
        replace the specified PodSchedulingContext

        operationID: replaceNamespacedPodSchedulingContext
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   PodSchedulingContext    OK
          201   PodSchedulingContext    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "replace_namespaced_pod_scheduling_context_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_namespaced_pod_scheduling_context_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["PodSchedulingContext"] = Response["PodSchedulingContext"](
            result, codes_returning_objects
        )
        return resp

    def replaceNamespacedPodSchedulingContextStatus(
        self,
        name: str,
        namespace: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PodSchedulingContext"]:
        r"""
        replace status of the specified PodSchedulingContext

        operationID: replaceNamespacedPodSchedulingContextStatus
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}/status

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   PodSchedulingContext    OK
          201   PodSchedulingContext    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "replace_namespaced_pod_scheduling_context_status_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_namespaced_pod_scheduling_context_status_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["PodSchedulingContext"] = Response["PodSchedulingContext"](
            result, codes_returning_objects
        )
        return resp


@dataclass
class PodSchedulingContextList(HikaruDocumentBase):
    r"""
    PodSchedulingContextList is a collection of Pod scheduling objects.

    Full name: PodSchedulingContextList

    Attributes:
    items: Items is the list of PodSchedulingContext objects.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata
    """

    _version = "v1alpha2"
    items: List["PodSchedulingContext"]
    apiVersion: Optional[str] = "resource.k8s.io/v1alpha2"
    kind: Optional[str] = "PodSchedulingContextList"
    metadata: Optional["ListMeta"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def listNamespacedPodSchedulingContext(
        namespace: str,
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PodSchedulingContextList"]:
        r"""
        list or watch objects of kind PodSchedulingContext

        operationID: listNamespacedPodSchedulingContext
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts

        :param namespace: namespace for the resource
        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   PodSchedulingContextList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "list_namespaced_pod_scheduling_context_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_namespaced_pod_scheduling_context_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["namespace"] = namespace
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["PodSchedulingContextList"] = Response[
            "PodSchedulingContextList"
        ](result, codes_returning_objects)
        return resp

    _namespaced_watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".resource_v1alpha2_api",
        "ResourceV1alpha2Api",
        "list_namespaced_pod_scheduling_context",
    )

    @staticmethod
    def listPodSchedulingContextForAllNamespaces(
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        pretty: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["PodSchedulingContextList"]:
        r"""
        list or watch objects of kind PodSchedulingContext

        operationID: listPodSchedulingContextForAllNamespaces
        path: /apis/resource.k8s.io/v1alpha2/podschedulingcontexts

        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param pretty: If 'true', then the output is pretty printed.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   PodSchedulingContextList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "list_pod_scheduling_context_for_all_namespaces_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_pod_scheduling_context_for_all_namespaces_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["pretty"] = pretty
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["PodSchedulingContextList"] = Response[
            "PodSchedulingContextList"
        ](result, codes_returning_objects)
        return resp

    _watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".resource_v1alpha2_api",
        "ResourceV1alpha2Api",
        "list_pod_scheduling_context_for_all_namespaces",
    )


@dataclass
class PodSchedulingContextSpec(HikaruBase):
    r"""
    PodSchedulingContextSpec describes where resources for the Pod are needed.

    Full name: PodSchedulingContextSpec

    Attributes:
    selectedNode: SelectedNode is the node for which allocation of ResourceClaims that are
        referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be
        attempted.
    potentialNodes: PotentialNodes lists nodes where the Pod might be able to run. The
        size of this field is limited to 128. This is large enough for many clusters.
        Larger clusters may need more attempts to find a node that suits all pending
        resources. This may get increased in the future, but not reduced.
    """

    selectedNode: Optional[str] = None
    potentialNodes: Optional[List[str]] = field(default_factory=list)


@dataclass
class PodSchedulingContextStatus(HikaruBase):
    r"""
    PodSchedulingContextStatus describes where resources for the Pod can be allocated.

    Full name: PodSchedulingContextStatus

    Attributes:
    resourceClaims: ResourceClaims describes resource availability for each
        pod.spec.resourceClaim entry where the corresponding ResourceClaim uses
        "WaitForFirstConsumer" allocation mode.
    """

    resourceClaims: Optional[List["ResourceClaimSchedulingStatus"]] = field(
        default_factory=list
    )


@dataclass
class ResourceClaim(HikaruDocumentBase):
    r"""
    ResourceClaim describes which resources are needed by a resource consumer. Its status
    tracks whether the resource has been allocated and what the resulting attributes are.
    This is an alpha type and requires enabling the DynamicResourceAllocation feature
    gate.

    Full name: ResourceClaim

    Attributes:
    spec: Spec describes the desired attributes of a resource that then needs to be
        allocated. It can only be set once when creating the ResourceClaim.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object metadata
    status: Status describes whether the resource is available and with which attributes.
    """

    _version = "v1alpha2"
    spec: "ResourceClaimSpec"
    apiVersion: Optional[str] = "resource.k8s.io/v1alpha2"
    kind: Optional[str] = "ResourceClaim"
    metadata: Optional["ObjectMeta"] = None
    status: Optional["ResourceClaimStatus"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def deleteCollectionNamespacedResourceClaim(
        namespace: str,
        continue_: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_selector: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaim"]:
        r"""
        delete collection of ResourceClaim

        operationID: deleteCollectionNamespacedResourceClaim
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims

        :param namespace: namespace for the resource
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "delete_collection_namespaced_resource_claim_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_collection_namespaced_resource_claim_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["namespace"] = namespace
        all_args["_continue"] = continue_
        all_args["dry_run"] = dry_run
        all_args["field_selector"] = field_selector
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ResourceClaim"] = Response["ResourceClaim"](
            result, codes_returning_objects
        )
        return resp

    def createNamespacedResourceClaim(
        self,
        namespace: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaim"]:
        r"""
        create a ResourceClaim

        operationID: createNamespacedResourceClaim
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims

        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClaim    OK
          201   ResourceClaim    Created
          202   ResourceClaim    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(inst, "create_namespaced_resource_claim_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_namespaced_resource_claim_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        resp: Response["ResourceClaim"] = Response["ResourceClaim"](
            result, codes_returning_objects
        )
        return resp

    def create(
        self,
        namespace: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ResourceClaim":
        r"""
            create a ResourceClaim

            operationID: createNamespacedResourceClaim
            path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims

            :param namespace: namespace for the resource. NOTE: if you leave out the
                namespace from the arguments you *must* have filled in the namespace
                attribute in the metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint.
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if namespace is not None:
            effective_namespace = namespace
        elif not self.metadata or not self.metadata.namespace:
            raise RuntimeError(
                "There must be a namespace supplied in either "
                "the arguments to create() or in a "
                "ResourceClaim's metadata"
            )
        else:
            effective_namespace = self.metadata.namespace
        res = self.createNamespacedResourceClaim(
            namespace=effective_namespace,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def deleteNamespacedResourceClaim(
        name: str,
        namespace: str,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaim"]:
        r"""
        delete a ResourceClaim

        operationID: deleteNamespacedResourceClaim
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClaim    OK
          202   ResourceClaim    Accepted
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(inst, "delete_namespaced_resource_claim_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_namespaced_resource_claim_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 202)
        resp: Response["ResourceClaim"] = Response["ResourceClaim"](
            result, codes_returning_objects
        )
        return resp

    def delete(
        self,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ResourceClaim":
        r"""
            delete a ResourceClaim

            operationID: deleteNamespacedResourceClaim
            path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param namespace: namespace for the resource. NOTE: if you leave out the
                namespace from the arguments you *must* have filled in the namespace
                attribute in the metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param grace_period_seconds: The duration in seconds before the object should
                be deleted. Value must be non-negative integer. The value zero
                indicates delete immediately. If this value is nil, the default
                grace period for the specified type will be used. Defaults to a per
                object value if not specified. zero means delete immediately.
            :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
                field will be deprecated in 1.7. Should the dependent objects be
                orphaned. If true/false, the "orphan" finalizer will be added
                to/removed from the object's finalizers list. Either this field or
                PropagationPolicy may be set, but not both.
            :param propagation_policy: Whether and how garbage collection will be
                performed. Either this field or OrphanDependents may be set, but not
                both. The default policy is decided by the existing finalizer set in
                the metadata.finalizers and the resource-specific default policy.
                Acceptable values are: 'Orphan' - orphan the dependents;
                'Background' - allow the garbage collector to delete the dependents
                in the background; 'Foreground' - a cascading policy that deletes
                all dependents in the foreground.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if namespace is not None:
            effective_namespace = namespace
        elif not self.metadata or not self.metadata.namespace:
            raise RuntimeError(
                "There must be a namespace supplied in either "
                "the arguments to delete() or in a "
                "ResourceClaim's metadata"
            )
        else:
            effective_namespace = self.metadata.namespace

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to delete() or in a "
                "ResourceClaim's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.deleteNamespacedResourceClaim(
            name=effective_name,
            namespace=effective_namespace,
            dry_run=dry_run,
            grace_period_seconds=grace_period_seconds,
            orphan_dependents=orphan_dependents,
            propagation_policy=propagation_policy,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    @staticmethod
    def readNamespacedResourceClaim(
        name: str,
        namespace: str,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaim"]:
        r"""
        read the specified ResourceClaim

        operationID: readNamespacedResourceClaim
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClaim    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(inst, "read_namespaced_resource_claim_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "read_namespaced_resource_claim_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ResourceClaim"] = Response["ResourceClaim"](
            result, codes_returning_objects
        )
        return resp

    def read(
        self,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ResourceClaim":
        r"""
            read the specified ResourceClaim

            operationID: readNamespacedResourceClaim
            path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param namespace: namespace for the resource. NOTE: if you leave out the
                namespace from the arguments you *must* have filled in the namespace
                attribute in the metadata for the resource!
            :param pretty: If 'true', then the output is pretty printed.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if namespace is not None:
            effective_namespace = namespace
        elif not self.metadata or not self.metadata.namespace:
            raise RuntimeError(
                "There must be a namespace supplied in either "
                "the arguments to read() or in a "
                "ResourceClaim's metadata"
            )
        else:
            effective_namespace = self.metadata.namespace

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to read() or in a "
                "ResourceClaim's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.readNamespacedResourceClaim(
            name=effective_name,
            namespace=effective_namespace,
            pretty=pretty,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    def patchNamespacedResourceClaim(
        self,
        name: str,
        namespace: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaim"]:
        r"""
        partially update the specified ResourceClaim

        operationID: patchNamespacedResourceClaim
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint. This field is
            required for apply requests (application/apply-patch) but optional
            for non-apply patch types (JsonPatch, MergePatch,
            StrategicMergePatch).
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param force: Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClaim    OK
          201   ResourceClaim    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(inst, "patch_namespaced_resource_claim_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "patch_namespaced_resource_claim_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        all_args["force"] = force
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ResourceClaim"] = Response["ResourceClaim"](
            result, codes_returning_objects
        )
        return resp

    def update(
        self,
        namespace: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
    ) -> "ResourceClaim":
        r"""
            partially update the specified ResourceClaim

            operationID: patchNamespacedResourceClaim
            path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}

            :param namespace: namespace for the resource. NOTE: if you leave out the
                namespace from the arguments you *must* have filled in the namespace
                attribute in the metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint. This field is
                required for apply requests (application/apply-patch) but optional
                for non-apply patch types (JsonPatch, MergePatch,
                StrategicMergePatch).
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param force: Force is going to "force" Apply requests. It means user will
                re-acquire conflicting fields owned by other people. Force flag must
                be unset for non-apply patch requests.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if namespace is not None:
            effective_namespace = namespace
        elif not self.metadata or not self.metadata.namespace:
            raise RuntimeError(
                "There must be a namespace supplied in either "
                "the arguments to update() or in a "
                "ResourceClaim's metadata"
            )
        else:
            effective_namespace = self.metadata.namespace
        res = self.patchNamespacedResourceClaim(
            name=self.metadata.name,
            namespace=effective_namespace,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            force=force,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def __enter__(self):
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        passed = ex_type is None and ex_value is None and ex_traceback is None
        has_rollback = hasattr(self, "__rollback")
        if passed:
            try:
                self.update()
            except Exception:
                if has_rollback:
                    self.merge(getattr(self, "__rollback"), overwrite=True)
                    delattr(self, "__rollback")
                raise
        if has_rollback:
            if not passed:
                self.merge(getattr(self, "__rollback"), overwrite=True)
            delattr(self, "__rollback")
        return False

    def replaceNamespacedResourceClaim(
        self,
        name: str,
        namespace: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaim"]:
        r"""
        replace the specified ResourceClaim

        operationID: replaceNamespacedResourceClaim
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClaim    OK
          201   ResourceClaim    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(inst, "replace_namespaced_resource_claim_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_namespaced_resource_claim_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ResourceClaim"] = Response["ResourceClaim"](
            result, codes_returning_objects
        )
        return resp

    def replaceNamespacedResourceClaimStatus(
        self,
        name: str,
        namespace: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaim"]:
        r"""
        replace status of the specified ResourceClaim

        operationID: replaceNamespacedResourceClaimStatus
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}/status

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClaim    OK
          201   ResourceClaim    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "replace_namespaced_resource_claim_status_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_namespaced_resource_claim_status_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ResourceClaim"] = Response["ResourceClaim"](
            result, codes_returning_objects
        )
        return resp


@dataclass
class ResourceClaimConsumerReference(HikaruBase):
    r"""
    ResourceClaimConsumerReference contains enough information to let you locate the
    consumer of a ResourceClaim. The user must be a resource in the same namespace as the
    ResourceClaim.

    Full name: ResourceClaimConsumerReference

    Attributes:
    name: Name is the name of resource being referenced.
    resource: Resource is the type of resource being referenced, for example "pods".
    uid: UID identifies exactly one incarnation of the resource.
    apiGroup: APIGroup is the group for the resource being referenced. It is empty for the
        core API. This matches the group in the APIVersion that is used when creating the
        resources.
    """

    name: str
    resource: str
    uid: str
    apiGroup: Optional[str] = None


@dataclass
class ResourceClaimList(HikaruDocumentBase):
    r"""
    ResourceClaimList is a collection of claims.

    Full name: ResourceClaimList

    Attributes:
    items: Items is the list of resource claims.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata
    """

    _version = "v1alpha2"
    items: List["ResourceClaim"]
    apiVersion: Optional[str] = "resource.k8s.io/v1alpha2"
    kind: Optional[str] = "ResourceClaimList"
    metadata: Optional["ListMeta"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def listNamespacedResourceClaim(
        namespace: str,
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaimList"]:
        r"""
        list or watch objects of kind ResourceClaim

        operationID: listNamespacedResourceClaim
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims

        :param namespace: namespace for the resource
        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClaimList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(inst, "list_namespaced_resource_claim_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_namespaced_resource_claim_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["namespace"] = namespace
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ResourceClaimList"] = Response["ResourceClaimList"](
            result, codes_returning_objects
        )
        return resp

    _namespaced_watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".resource_v1alpha2_api",
        "ResourceV1alpha2Api",
        "list_namespaced_resource_claim",
    )

    @staticmethod
    def listResourceClaimForAllNamespaces(
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        pretty: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaimList"]:
        r"""
        list or watch objects of kind ResourceClaim

        operationID: listResourceClaimForAllNamespaces
        path: /apis/resource.k8s.io/v1alpha2/resourceclaims

        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param pretty: If 'true', then the output is pretty printed.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClaimList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "list_resource_claim_for_all_namespaces_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_resource_claim_for_all_namespaces_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["pretty"] = pretty
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ResourceClaimList"] = Response["ResourceClaimList"](
            result, codes_returning_objects
        )
        return resp

    _watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".resource_v1alpha2_api",
        "ResourceV1alpha2Api",
        "list_resource_claim_for_all_namespaces",
    )


@dataclass
class ResourceClaimParametersReference(HikaruBase):
    r"""
    ResourceClaimParametersReference contains enough information to let you locate the
    parameters for a ResourceClaim. The object must be in the same namespace as the
    ResourceClaim.

    Full name: ResourceClaimParametersReference

    Attributes:
    kind: Kind is the type of resource being referenced. This is the same value as in the
        parameter object's metadata, for example "ConfigMap".
    name: Name is the name of resource being referenced.
    apiGroup: APIGroup is the group for the resource being referenced. It is empty for the
        core API. This matches the group in the APIVersion that is used when creating the
        resources.
    """

    kind: str
    name: str
    apiGroup: Optional[str] = None


@dataclass
class ResourceClaimSchedulingStatus(HikaruBase):
    r"""
    ResourceClaimSchedulingStatus contains information about one particular ResourceClaim
    with "WaitForFirstConsumer" allocation mode.

    Full name: ResourceClaimSchedulingStatus

    Attributes:
    name: Name matches the pod.spec.resourceClaims[*].Name field.
    unsuitableNodes: UnsuitableNodes lists nodes that the ResourceClaim cannot be
        allocated for. The size of this field is limited to 128, the same as for
        PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not
        reduced.
    """

    name: Optional[str] = None
    unsuitableNodes: Optional[List[str]] = field(default_factory=list)


@dataclass
class ResourceClaimSpec(HikaruBase):
    r"""
    ResourceClaimSpec defines how a resource is to be allocated.

    Full name: ResourceClaimSpec

    Attributes:
    resourceClassName: ResourceClassName references the driver and additional parameters
        via the name of a ResourceClass that was created as part of the driver deployment.
    allocationMode: Allocation can start immediately or when a Pod wants to use the
        resource. "WaitForFirstConsumer" is the default.
    parametersRef: ParametersRef references a separate object with arbitrary parameters
        that will be used by the driver when allocating a resource for the claim. The
        object must be in the same namespace as the ResourceClaim.
    """

    resourceClassName: str
    allocationMode: Optional[str] = None
    parametersRef: Optional["ResourceClaimParametersReference"] = None


@dataclass
class ResourceClaimStatus(HikaruBase):
    r"""
    ResourceClaimStatus tracks whether the resource has been allocated and what the
    resulting attributes are.

    Full name: ResourceClaimStatus

    Attributes:
    allocation: Allocation is set by the resource driver once a resource or set of
        resources has been allocated successfully. If this is not specified, the resources
        have not been allocated yet.
    deallocationRequested: DeallocationRequested indicates that a ResourceClaim is to be
        deallocated. The driver then must deallocate this claim and reset the field
        together with clearing the Allocation field. While DeallocationRequested is set,
        no new consumers may be added to ReservedFor.
    driverName: DriverName is a copy of the driver name from the ResourceClass at the time
        when allocation started.
    reservedFor: ReservedFor indicates which entities are currently allowed to use the
        claim. A Pod which references a ResourceClaim which is not reserved for that Pod
        will not be started. There can be at most 32 such reservations. This may get
        increased in the future, but not reduced.
    """

    allocation: Optional["AllocationResult"] = None
    deallocationRequested: Optional[bool] = None
    driverName: Optional[str] = None
    reservedFor: Optional[List["ResourceClaimConsumerReference"]] = field(
        default_factory=list
    )


@dataclass
class ResourceClaimTemplate(HikaruDocumentBase):
    r"""
    ResourceClaimTemplate is used to produce ResourceClaim objects.

    Full name: ResourceClaimTemplate

    Attributes:
    spec: Describes the ResourceClaim that is to be generated. This field is immutable. A
        ResourceClaim will get created by the control plane for a Pod when needed and then
        not get updated anymore.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object metadata
    """

    _version = "v1alpha2"
    spec: "ResourceClaimTemplateSpec"
    apiVersion: Optional[str] = "resource.k8s.io/v1alpha2"
    kind: Optional[str] = "ResourceClaimTemplate"
    metadata: Optional["ObjectMeta"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def deleteCollectionNamespacedResourceClaimTemplate(
        namespace: str,
        continue_: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_selector: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaimTemplate"]:
        r"""
        delete collection of ResourceClaimTemplate

        operationID: deleteCollectionNamespacedResourceClaimTemplate
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates

        :param namespace: namespace for the resource
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "delete_collection_namespaced_resource_claim_template_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_collection_namespaced_resource_claim_template_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["namespace"] = namespace
        all_args["_continue"] = continue_
        all_args["dry_run"] = dry_run
        all_args["field_selector"] = field_selector
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ResourceClaimTemplate"] = Response["ResourceClaimTemplate"](
            result, codes_returning_objects
        )
        return resp

    def createNamespacedResourceClaimTemplate(
        self,
        namespace: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaimTemplate"]:
        r"""
        create a ResourceClaimTemplate

        operationID: createNamespacedResourceClaimTemplate
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates

        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClaimTemplate    OK
          201   ResourceClaimTemplate    Created
          202   ResourceClaimTemplate    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "create_namespaced_resource_claim_template_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_namespaced_resource_claim_template_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        resp: Response["ResourceClaimTemplate"] = Response["ResourceClaimTemplate"](
            result, codes_returning_objects
        )
        return resp

    def create(
        self,
        namespace: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ResourceClaimTemplate":
        r"""
            create a ResourceClaimTemplate

            operationID: createNamespacedResourceClaimTemplate
            path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates

            :param namespace: namespace for the resource. NOTE: if you leave out the
                namespace from the arguments you *must* have filled in the namespace
                attribute in the metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint.
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if namespace is not None:
            effective_namespace = namespace
        elif not self.metadata or not self.metadata.namespace:
            raise RuntimeError(
                "There must be a namespace supplied in either "
                "the arguments to create() or in a "
                "ResourceClaimTemplate's metadata"
            )
        else:
            effective_namespace = self.metadata.namespace
        res = self.createNamespacedResourceClaimTemplate(
            namespace=effective_namespace,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def deleteNamespacedResourceClaimTemplate(
        name: str,
        namespace: str,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaimTemplate"]:
        r"""
        delete a ResourceClaimTemplate

        operationID: deleteNamespacedResourceClaimTemplate
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClaimTemplate    OK
          202   ResourceClaimTemplate    Accepted
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "delete_namespaced_resource_claim_template_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_namespaced_resource_claim_template_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 202)
        resp: Response["ResourceClaimTemplate"] = Response["ResourceClaimTemplate"](
            result, codes_returning_objects
        )
        return resp

    def delete(
        self,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ResourceClaimTemplate":
        r"""
            delete a ResourceClaimTemplate

            operationID: deleteNamespacedResourceClaimTemplate
            path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param namespace: namespace for the resource. NOTE: if you leave out the
                namespace from the arguments you *must* have filled in the namespace
                attribute in the metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param grace_period_seconds: The duration in seconds before the object should
                be deleted. Value must be non-negative integer. The value zero
                indicates delete immediately. If this value is nil, the default
                grace period for the specified type will be used. Defaults to a per
                object value if not specified. zero means delete immediately.
            :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
                field will be deprecated in 1.7. Should the dependent objects be
                orphaned. If true/false, the "orphan" finalizer will be added
                to/removed from the object's finalizers list. Either this field or
                PropagationPolicy may be set, but not both.
            :param propagation_policy: Whether and how garbage collection will be
                performed. Either this field or OrphanDependents may be set, but not
                both. The default policy is decided by the existing finalizer set in
                the metadata.finalizers and the resource-specific default policy.
                Acceptable values are: 'Orphan' - orphan the dependents;
                'Background' - allow the garbage collector to delete the dependents
                in the background; 'Foreground' - a cascading policy that deletes
                all dependents in the foreground.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if namespace is not None:
            effective_namespace = namespace
        elif not self.metadata or not self.metadata.namespace:
            raise RuntimeError(
                "There must be a namespace supplied in either "
                "the arguments to delete() or in a "
                "ResourceClaimTemplate's metadata"
            )
        else:
            effective_namespace = self.metadata.namespace

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to delete() or in a "
                "ResourceClaimTemplate's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.deleteNamespacedResourceClaimTemplate(
            name=effective_name,
            namespace=effective_namespace,
            dry_run=dry_run,
            grace_period_seconds=grace_period_seconds,
            orphan_dependents=orphan_dependents,
            propagation_policy=propagation_policy,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    @staticmethod
    def readNamespacedResourceClaimTemplate(
        name: str,
        namespace: str,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaimTemplate"]:
        r"""
        read the specified ResourceClaimTemplate

        operationID: readNamespacedResourceClaimTemplate
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClaimTemplate    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "read_namespaced_resource_claim_template_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "read_namespaced_resource_claim_template_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ResourceClaimTemplate"] = Response["ResourceClaimTemplate"](
            result, codes_returning_objects
        )
        return resp

    def read(
        self,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ResourceClaimTemplate":
        r"""
            read the specified ResourceClaimTemplate

            operationID: readNamespacedResourceClaimTemplate
            path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param namespace: namespace for the resource. NOTE: if you leave out the
                namespace from the arguments you *must* have filled in the namespace
                attribute in the metadata for the resource!
            :param pretty: If 'true', then the output is pretty printed.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if namespace is not None:
            effective_namespace = namespace
        elif not self.metadata or not self.metadata.namespace:
            raise RuntimeError(
                "There must be a namespace supplied in either "
                "the arguments to read() or in a "
                "ResourceClaimTemplate's metadata"
            )
        else:
            effective_namespace = self.metadata.namespace

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to read() or in a "
                "ResourceClaimTemplate's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.readNamespacedResourceClaimTemplate(
            name=effective_name,
            namespace=effective_namespace,
            pretty=pretty,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    def patchNamespacedResourceClaimTemplate(
        self,
        name: str,
        namespace: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaimTemplate"]:
        r"""
        partially update the specified ResourceClaimTemplate

        operationID: patchNamespacedResourceClaimTemplate
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint. This field is
            required for apply requests (application/apply-patch) but optional
            for non-apply patch types (JsonPatch, MergePatch,
            StrategicMergePatch).
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param force: Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClaimTemplate    OK
          201   ResourceClaimTemplate    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "patch_namespaced_resource_claim_template_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "patch_namespaced_resource_claim_template_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        all_args["force"] = force
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ResourceClaimTemplate"] = Response["ResourceClaimTemplate"](
            result, codes_returning_objects
        )
        return resp

    def update(
        self,
        namespace: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
    ) -> "ResourceClaimTemplate":
        r"""
            partially update the specified ResourceClaimTemplate

            operationID: patchNamespacedResourceClaimTemplate
            path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}

            :param namespace: namespace for the resource. NOTE: if you leave out the
                namespace from the arguments you *must* have filled in the namespace
                attribute in the metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint. This field is
                required for apply requests (application/apply-patch) but optional
                for non-apply patch types (JsonPatch, MergePatch,
                StrategicMergePatch).
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param force: Force is going to "force" Apply requests. It means user will
                re-acquire conflicting fields owned by other people. Force flag must
                be unset for non-apply patch requests.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if namespace is not None:
            effective_namespace = namespace
        elif not self.metadata or not self.metadata.namespace:
            raise RuntimeError(
                "There must be a namespace supplied in either "
                "the arguments to update() or in a "
                "ResourceClaimTemplate's metadata"
            )
        else:
            effective_namespace = self.metadata.namespace
        res = self.patchNamespacedResourceClaimTemplate(
            name=self.metadata.name,
            namespace=effective_namespace,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            force=force,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def __enter__(self):
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        passed = ex_type is None and ex_value is None and ex_traceback is None
        has_rollback = hasattr(self, "__rollback")
        if passed:
            try:
                self.update()
            except Exception:
                if has_rollback:
                    self.merge(getattr(self, "__rollback"), overwrite=True)
                    delattr(self, "__rollback")
                raise
        if has_rollback:
            if not passed:
                self.merge(getattr(self, "__rollback"), overwrite=True)
            delattr(self, "__rollback")
        return False

    def replaceNamespacedResourceClaimTemplate(
        self,
        name: str,
        namespace: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaimTemplate"]:
        r"""
        replace the specified ResourceClaimTemplate

        operationID: replaceNamespacedResourceClaimTemplate
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}

        :param name: name for the resource
        :param namespace: namespace for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClaimTemplate    OK
          201   ResourceClaimTemplate    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "replace_namespaced_resource_claim_template_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_namespaced_resource_claim_template_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ResourceClaimTemplate"] = Response["ResourceClaimTemplate"](
            result, codes_returning_objects
        )
        return resp


@dataclass
class ResourceClaimTemplateList(HikaruDocumentBase):
    r"""
    ResourceClaimTemplateList is a collection of claim templates.

    Full name: ResourceClaimTemplateList

    Attributes:
    items: Items is the list of resource claim templates.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata
    """

    _version = "v1alpha2"
    items: List["ResourceClaimTemplate"]
    apiVersion: Optional[str] = "resource.k8s.io/v1alpha2"
    kind: Optional[str] = "ResourceClaimTemplateList"
    metadata: Optional["ListMeta"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def listNamespacedResourceClaimTemplate(
        namespace: str,
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaimTemplateList"]:
        r"""
        list or watch objects of kind ResourceClaimTemplate

        operationID: listNamespacedResourceClaimTemplate
        path: /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates

        :param namespace: namespace for the resource
        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClaimTemplateList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "list_namespaced_resource_claim_template_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_namespaced_resource_claim_template_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["namespace"] = namespace
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ResourceClaimTemplateList"] = Response[
            "ResourceClaimTemplateList"
        ](result, codes_returning_objects)
        return resp

    _namespaced_watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".resource_v1alpha2_api",
        "ResourceV1alpha2Api",
        "list_namespaced_resource_claim_template",
    )

    @staticmethod
    def listResourceClaimTemplateForAllNamespaces(
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        pretty: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClaimTemplateList"]:
        r"""
        list or watch objects of kind ResourceClaimTemplate

        operationID: listResourceClaimTemplateForAllNamespaces
        path: /apis/resource.k8s.io/v1alpha2/resourceclaimtemplates

        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param pretty: If 'true', then the output is pretty printed.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClaimTemplateList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(
            inst, "list_resource_claim_template_for_all_namespaces_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_resource_claim_template_for_all_namespaces_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["pretty"] = pretty
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ResourceClaimTemplateList"] = Response[
            "ResourceClaimTemplateList"
        ](result, codes_returning_objects)
        return resp

    _watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".resource_v1alpha2_api",
        "ResourceV1alpha2Api",
        "list_resource_claim_template_for_all_namespaces",
    )


@dataclass
class ResourceClaimTemplateSpec(HikaruBase):
    r"""
    ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.

    Full name: ResourceClaimTemplateSpec

    Attributes:
    spec: Spec for the ResourceClaim. The entire content is copied unchanged into the
        ResourceClaim that gets created from this template. The same fields as in a
        ResourceClaim are also valid here.
    metadata: ObjectMeta may contain labels and annotations that will be copied into the
        PVC when creating it. No other fields are allowed and will be rejected during
        validation.
    """

    spec: "ResourceClaimSpec"
    metadata: Optional["ObjectMeta"] = None


@dataclass
class ResourceClass(HikaruDocumentBase):
    r"""
    ResourceClass is used by administrators to influence how resources are allocated. This
    is an alpha type and requires enabling the DynamicResourceAllocation feature gate.

    Full name: ResourceClass

    Attributes:
    driverName: DriverName defines the name of the dynamic resource driver that is used
        for allocation of a ResourceClaim that uses this class. Resource drivers have a
        unique name in forward domain order (acme.example.com).
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object metadata
    parametersRef: ParametersRef references an arbitrary separate object that may hold
        parameters that will be used by the driver when allocating a resource that uses
        this class. A dynamic resource driver can distinguish between parameters stored
        here and and those stored in ResourceClaimSpec.
    suitableNodes: Only nodes matching the selector will be considered by the scheduler
        when trying to find a Node that fits a Pod when that Pod uses a ResourceClaim that
        has not been allocated yet. Setting this field is optional. If null, all nodes are
        candidates.
    """

    _version = "v1alpha2"
    driverName: str
    apiVersion: Optional[str] = "resource.k8s.io/v1alpha2"
    kind: Optional[str] = "ResourceClass"
    metadata: Optional["ObjectMeta"] = None
    parametersRef: Optional["ResourceClassParametersReference"] = None
    suitableNodes: Optional["NodeSelector"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def deleteCollectionResourceClass(
        continue_: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_selector: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClass"]:
        r"""
        delete collection of ResourceClass

        operationID: deleteCollectionResourceClass
        path: /apis/resource.k8s.io/v1alpha2/resourceclasses

        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(inst, "delete_collection_resource_class_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_collection_resource_class_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["_continue"] = continue_
        all_args["dry_run"] = dry_run
        all_args["field_selector"] = field_selector
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ResourceClass"] = Response["ResourceClass"](
            result, codes_returning_objects
        )
        return resp

    def createResourceClass(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClass"]:
        r"""
        create a ResourceClass

        operationID: createResourceClass
        path: /apis/resource.k8s.io/v1alpha2/resourceclasses

        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClass    OK
          201   ResourceClass    Created
          202   ResourceClass    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(inst, "create_resource_class_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_resource_class_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        resp: Response["ResourceClass"] = Response["ResourceClass"](
            result, codes_returning_objects
        )
        return resp

    def create(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ResourceClass":
        r"""
            create a ResourceClass

            operationID: createResourceClass
            path: /apis/resource.k8s.io/v1alpha2/resourceclasses

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint.
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.createResourceClass(
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def deleteResourceClass(
        name: str,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClass"]:
        r"""
        delete a ResourceClass

        operationID: deleteResourceClass
        path: /apis/resource.k8s.io/v1alpha2/resourceclasses/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClass    OK
          202   ResourceClass    Accepted
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(inst, "delete_resource_class_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_resource_class_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 202)
        resp: Response["ResourceClass"] = Response["ResourceClass"](
            result, codes_returning_objects
        )
        return resp

    def delete(
        self,
        name: Optional[str] = None,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ResourceClass":
        r"""
            delete a ResourceClass

            operationID: deleteResourceClass
            path: /apis/resource.k8s.io/v1alpha2/resourceclasses/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param grace_period_seconds: The duration in seconds before the object should
                be deleted. Value must be non-negative integer. The value zero
                indicates delete immediately. If this value is nil, the default
                grace period for the specified type will be used. Defaults to a per
                object value if not specified. zero means delete immediately.
            :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
                field will be deprecated in 1.7. Should the dependent objects be
                orphaned. If true/false, the "orphan" finalizer will be added
                to/removed from the object's finalizers list. Either this field or
                PropagationPolicy may be set, but not both.
            :param propagation_policy: Whether and how garbage collection will be
                performed. Either this field or OrphanDependents may be set, but not
                both. The default policy is decided by the existing finalizer set in
                the metadata.finalizers and the resource-specific default policy.
                Acceptable values are: 'Orphan' - orphan the dependents;
                'Background' - allow the garbage collector to delete the dependents
                in the background; 'Foreground' - a cascading policy that deletes
                all dependents in the foreground.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to delete() or in a "
                "ResourceClass's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.deleteResourceClass(
            name=effective_name,
            dry_run=dry_run,
            grace_period_seconds=grace_period_seconds,
            orphan_dependents=orphan_dependents,
            propagation_policy=propagation_policy,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    @staticmethod
    def readResourceClass(
        name: str,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClass"]:
        r"""
        read the specified ResourceClass

        operationID: readResourceClass
        path: /apis/resource.k8s.io/v1alpha2/resourceclasses/{name}

        :param name: name for the resource
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClass    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(inst, "read_resource_class_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "read_resource_class_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ResourceClass"] = Response["ResourceClass"](
            result, codes_returning_objects
        )
        return resp

    def read(
        self,
        name: Optional[str] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ResourceClass":
        r"""
            read the specified ResourceClass

            operationID: readResourceClass
            path: /apis/resource.k8s.io/v1alpha2/resourceclasses/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param pretty: If 'true', then the output is pretty printed.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to read() or in a "
                "ResourceClass's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.readResourceClass(name=effective_name, pretty=pretty, client=client)
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    def patchResourceClass(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClass"]:
        r"""
        partially update the specified ResourceClass

        operationID: patchResourceClass
        path: /apis/resource.k8s.io/v1alpha2/resourceclasses/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint. This field is
            required for apply requests (application/apply-patch) but optional
            for non-apply patch types (JsonPatch, MergePatch,
            StrategicMergePatch).
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param force: Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClass    OK
          201   ResourceClass    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(inst, "patch_resource_class_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "patch_resource_class_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        all_args["force"] = force
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ResourceClass"] = Response["ResourceClass"](
            result, codes_returning_objects
        )
        return resp

    def update(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
    ) -> "ResourceClass":
        r"""
            partially update the specified ResourceClass

            operationID: patchResourceClass
            path: /apis/resource.k8s.io/v1alpha2/resourceclasses/{name}

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint. This field is
                required for apply requests (application/apply-patch) but optional
                for non-apply patch types (JsonPatch, MergePatch,
                StrategicMergePatch).
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param force: Force is going to "force" Apply requests. It means user will
                re-acquire conflicting fields owned by other people. Force flag must
                be unset for non-apply patch requests.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.patchResourceClass(
            name=self.metadata.name,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            force=force,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def __enter__(self):
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        passed = ex_type is None and ex_value is None and ex_traceback is None
        has_rollback = hasattr(self, "__rollback")
        if passed:
            try:
                self.update()
            except Exception:
                if has_rollback:
                    self.merge(getattr(self, "__rollback"), overwrite=True)
                    delattr(self, "__rollback")
                raise
        if has_rollback:
            if not passed:
                self.merge(getattr(self, "__rollback"), overwrite=True)
            delattr(self, "__rollback")
        return False

    def replaceResourceClass(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClass"]:
        r"""
        replace the specified ResourceClass

        operationID: replaceResourceClass
        path: /apis/resource.k8s.io/v1alpha2/resourceclasses/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClass    OK
          201   ResourceClass    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(inst, "replace_resource_class_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_resource_class_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ResourceClass"] = Response["ResourceClass"](
            result, codes_returning_objects
        )
        return resp


@dataclass
class ResourceClassList(HikaruDocumentBase):
    r"""
    ResourceClassList is a collection of classes.

    Full name: ResourceClassList

    Attributes:
    items: Items is the list of resource classes.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata
    """

    _version = "v1alpha2"
    items: List["ResourceClass"]
    apiVersion: Optional[str] = "resource.k8s.io/v1alpha2"
    kind: Optional[str] = "ResourceClassList"
    metadata: Optional["ListMeta"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def listResourceClass(
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ResourceClassList"]:
        r"""
        list or watch objects of kind ResourceClass

        operationID: listResourceClass
        path: /apis/resource.k8s.io/v1alpha2/resourceclasses

        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ResourceClassList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = ResourceV1alpha2Api(api_client=client_to_use)
        the_method = getattr(inst, "list_resource_class_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_resource_class_with_http_info "
                "on ResourceV1alpha2Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ResourceClassList"] = Response["ResourceClassList"](
            result, codes_returning_objects
        )
        return resp

    _watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".resource_v1alpha2_api",
        "ResourceV1alpha2Api",
        "list_resource_class",
    )


@dataclass
class ResourceClassParametersReference(HikaruBase):
    r"""
    ResourceClassParametersReference contains enough information to let you locate the
    parameters for a ResourceClass.

    Full name: ResourceClassParametersReference

    Attributes:
    kind: Kind is the type of resource being referenced. This is the same value as in the
        parameter object's metadata.
    name: Name is the name of resource being referenced.
    apiGroup: APIGroup is the group for the resource being referenced. It is empty for the
        core API. This matches the group in the APIVersion that is used when creating the
        resources.
    namespace: Namespace that contains the referenced resource. Must be empty for
        cluster-scoped resources and non-empty for namespaced resources.
    """

    kind: str
    name: str
    apiGroup: Optional[str] = None
    namespace: Optional[str] = None


@dataclass
class ResourceHandle(HikaruBase):
    r"""
    ResourceHandle holds opaque resource data for processing by a specific kubelet plugin.

    Full name: ResourceHandle

    Attributes:
    data: Data contains the opaque data associated with this ResourceHandle. It is set by
        the controller component of the resource driver whose name matches the DriverName
        set in the ResourceClaimStatus this ResourceHandle is embedded in. It is set at
        allocation time and is intended for processing by the kubelet plugin whose name
        matches the DriverName set in this ResourceHandle. The maximum size of this field
        is 16KiB. This may get increased in the future, but not reduced.
    driverName: DriverName specifies the name of the resource driver whose kubelet plugin
        should be invoked to process this ResourceHandle's data once it lands on a node.
        This may differ from the DriverName set in ResourceClaimStatus this ResourceHandle
        is embedded in.
    """

    data: Optional[str] = None
    driverName: Optional[str] = None


PodSchedulingContext._watcher_cls = PodSchedulingContextList
ResourceClaim._watcher_cls = ResourceClaimList
ResourceClaimTemplate._watcher_cls = ResourceClaimTemplateList
ResourceClass._watcher_cls = ResourceClassList


globs = dict(globals())
__all__ = [c.__name__ for c in globs.values()
           if type(c) == type]
del globs
