#
# Copyright (c) 2021 Incisive Technology Ltd
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""
DO NOT EDIT THIS FILE!

This module is automatically generated using the Hikaru build program that turns
a Kubernetes swagger spec into the code for the hikaru.model package.
"""


from hikaru.meta import HikaruBase, HikaruDocumentBase, KubernetesException, WatcherDescriptor
from hikaru.generate import get_clean_dict
from hikaru.utils import Response
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field, InitVar
from kubernetes.client import CoreV1Api
from ..unversioned import *

from kubernetes.client import ApiClient
from kubernetes.client import AuthenticationV1beta1Api
from ..v1 import Status
from ..v1 import ObjectMeta
from ..v1 import UserInfo


@dataclass
class SelfSubjectReview(HikaruDocumentBase):
    r"""
    SelfSubjectReview contains the user information that the kube-apiserver has about the
    user making this request. When using impersonation, users will receive the user info
    of the user being impersonated. If impersonation or request header authentication is
    used, any extra keys will have their case ignored and returned as lowercase.

    Full name: SelfSubjectReview

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    status: Status is filled in by the server with the user attributes.
    """

    _version = "v1beta1"
    apiVersion: Optional[str] = "authentication.k8s.io/v1beta1"
    kind: Optional[str] = "SelfSubjectReview"
    metadata: Optional["ObjectMeta"] = None
    status: Optional["SelfSubjectReviewStatus"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    def createSelfSubjectReview(
        self, client: ApiClient = None, async_req: bool = False
    ) -> Response["SelfSubjectReview"]:
        r"""
        create a SelfSubjectReview

        operationID: createSelfSubjectReview
        path: /apis/authentication.k8s.io/v1beta1/selfsubjectreviews
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   SelfSubjectReview    OK
          201   SelfSubjectReview    Created
          202   SelfSubjectReview    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AuthenticationV1beta1Api(api_client=client_to_use)
        the_method = getattr(inst, "create_self_subject_review_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_self_subject_review_with_http_info "
                "on AuthenticationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()

        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        resp: Response["SelfSubjectReview"] = Response["SelfSubjectReview"](
            result, codes_returning_objects
        )
        return resp

    def create(self, client: ApiClient = None) -> "SelfSubjectReview":
        r"""
            create a SelfSubjectReview

            operationID: createSelfSubjectReview
            path: /apis/authentication.k8s.io/v1beta1/selfsubjectreviews
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.createSelfSubjectReview(client=client)
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self


@dataclass
class SelfSubjectReviewStatus(HikaruBase):
    r"""
    SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.

    Full name: SelfSubjectReviewStatus

    Attributes:
    userInfo: User attributes of the user making this request.
    """

    userInfo: Optional["UserInfo"] = None


globs = dict(globals())
__all__ = [c.__name__ for c in globs.values()
           if type(c) == type]
del globs
