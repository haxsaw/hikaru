#
# Copyright (c) 2021 Incisive Technology Ltd
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""
DO NOT EDIT THIS FILE!

This module is automatically generated using the Hikaru build program that turns
a Kubernetes swagger spec into the code for the hikaru.model package.
"""


from hikaru.meta import HikaruBase, HikaruDocumentBase, KubernetesException, WatcherDescriptor
from hikaru.generate import get_clean_dict
from hikaru.utils import Response
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field, InitVar
from kubernetes.client import CoreV1Api
from ..unversioned import *

from kubernetes.client import AdmissionregistrationV1beta1Api
from kubernetes.client import ApiClient
from kubernetes.client import AuthenticationV1beta1Api
from ..v1 import Status
from ..v1 import LabelSelector
from ..v1 import ObjectMeta
from ..v1 import DeleteOptions
from ..v1 import ListMeta
from ..v1 import Condition
from ..v1 import UserInfo


@dataclass
class AuditAnnotation(HikaruBase):
    r"""
    AuditAnnotation describes how to produce an audit annotation for an API request.

    Full name: AuditAnnotation

    Attributes:
    key: key specifies the audit annotation key. The audit annotation keys of a
        ValidatingAdmissionPolicy must be unique. The key must be a qualified name
        ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length. The key is combined
        with the resource name of the ValidatingAdmissionPolicy to construct an audit
        annotation key: "{ValidatingAdmissionPolicy name}/{key}". If an admission webhook
        uses the same resource name as this ValidatingAdmissionPolicy and the same audit
        annotation key, the annotation key will be identical. In this case, the first
        annotation written with the key will be included in the audit event and all
        subsequent annotations with the same key will be discarded. Required.
    valueExpression: valueExpression represents the expression which is evaluated by CEL
        to produce an audit annotation value. The expression must evaluate to either a
        string or null value. If the expression evaluates to a string, the audit
        annotation is included with the string value. If the expression evaluates to null
        or empty string the audit annotation will be omitted. The valueExpression may be
        no longer than 5kb in length. If the result of the valueExpression is more than
        10kb in length, it will be truncated to 10kb. If multiple
        ValidatingAdmissionPolicyBinding resources match an API request, then the
        valueExpression will be evaluated for each binding. All unique values produced by
        the valueExpressions will be joined together in a comma-separated list. Required.
    """

    key: str
    valueExpression: str


@dataclass
class ExpressionWarning(HikaruBase):
    r"""
    ExpressionWarning is a warning information that targets a specific expression.

    Full name: ExpressionWarning

    Attributes:
    fieldRef: The path to the field that refers the expression. For example, the reference
        to the expression of the first item of validations is
        "spec.validations[0].expression"
    warning: The content of type checking information in a human-readable form. Each line
        of the warning contains the type that the expression is checked against, followed
        by the type check error from the compiler.
    """

    fieldRef: str
    warning: str


@dataclass
class MatchCondition(HikaruBase):
    r"""
    MatchCondition represents a condition which must be fulfilled for a request to be sent
    to a webhook.

    Full name: MatchCondition

    Attributes:
    expression: Expression represents the expression which will be evaluated by CEL. Must
        evaluate to bool. CEL expressions have access to the contents of the
        AdmissionRequest and Authorizer, organized into CEL variables: 'object' - The
        object from the incoming request. The value is null for DELETE requests.
        'oldObject' - The existing object. The value is null for CREATE requests.
        'request' - Attributes of the admission
        request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL
        Authorizer. May be used to perform authorization checks for the principal (user or
        service account) of the request. See
        https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
        'authorizer.requestResource' - A CEL ResourceCheck constructed from the
        'authorizer' and configured with the request resource. Documentation on CEL:
        https://kubernetes.io/docs/reference/using-api/cel/ Required.
    name: Name is an identifier for this match condition, used for strategic merging of
        MatchConditions, as well as providing an identifier for logging purposes. A good
        name should be descriptive of the associated expression. Name must be a qualified
        name consisting of alphanumeric characters, '-', '_' or '.', and must start and
        end with an alphanumeric character (e.g. 'MyName', or 'my.name', or '123-abc',
        regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an
        optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName') Required.
    """

    expression: str
    name: str


@dataclass
class MatchResources(HikaruBase):
    r"""
    MatchResources decides whether to run the admission control policy on an object based
    on whether it meets the match criteria. The exclude rules take precedence over include
    rules (if a resource matches both, it is excluded)

    Full name: MatchResources

    Attributes:
    matchPolicy: matchPolicy defines how the "MatchResources" list is used to match
        incoming requests. Allowed values are "Exact" or "Equivalent". - Exact: match a
        request only if it exactly matches a specified rule. For example, if deployments
        can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules"
        only included `apiGroups:["apps"], apiVersions:["v1"], resources:
        ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be
        sent to the ValidatingAdmissionPolicy. - Equivalent: match a request if modifies a
        resource listed in rules, even via another API group or version. For example, if
        deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and
        "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources:
        ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be
        converted to apps/v1 and sent to the ValidatingAdmissionPolicy. Defaults to
        "Equivalent"
    namespaceSelector: NamespaceSelector decides whether to run the admission control
        policy on an object based on whether the namespace for that object matches the
        selector. If the object itself is a namespace, the matching is performed on
        object.metadata.labels. If the object is another cluster scoped resource, it never
        skips the policy. For example, to run the webhook on any objects whose namespace
        is not associated with "runlevel" of "0" or "1"; you will set the selector as
        follows: "namespaceSelector": { "matchExpressions": [ { "key": "runlevel",
        "operator": "NotIn", "values": [ "0", "1" ] } ] } If instead you want to only run
        the policy on any objects whose namespace is associated with the "environment" of
        "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
        "matchExpressions": [ { "key": "environment", "operator": "In", "values": [
        "prod", "staging" ] } ] } See
        https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more
        examples of label selectors. Default to the empty LabelSelector, which matches
        everything.
    objectSelector: ObjectSelector decides whether to run the validation based on if the
        object has matching labels. objectSelector is evaluated against both the oldObject
        and newObject that would be sent to the cel validation, and is considered to match
        if either object matches the selector. A null object (oldObject in the case of
        create, or newObject in the case of delete) or an object that cannot have labels
        (like a DeploymentRollback or a PodProxyOptions object) is not considered to
        match. Use the object selector only if the webhook is opt-in, because end users
        may skip the admission webhook by setting the labels. Default to the empty
        LabelSelector, which matches everything.
    excludeResourceRules: ExcludeResourceRules describes what operations on what
        resources/subresources the ValidatingAdmissionPolicy should not care about. The
        exclude rules take precedence over include rules (if a resource matches both, it
        is excluded)
    resourceRules: ResourceRules describes what operations on what resources/subresources
        the ValidatingAdmissionPolicy matches. The policy cares about an operation if it
        matches _any_ Rule.
    """

    matchPolicy: Optional[str] = None
    namespaceSelector: Optional["LabelSelector"] = None
    objectSelector: Optional["LabelSelector"] = None
    excludeResourceRules: Optional[List["NamedRuleWithOperations"]] = field(
        default_factory=list
    )
    resourceRules: Optional[List["NamedRuleWithOperations"]] = field(
        default_factory=list
    )


@dataclass
class NamedRuleWithOperations(HikaruBase):
    r"""
    NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.

    Full name: NamedRuleWithOperations

    Attributes:
    scope: scope specifies the scope of this rule. Valid values are "Cluster",
        "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will
        match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that
        only namespaced resources will match this rule. "*" means that there are no scope
        restrictions. Subresources match the scope of their parent resource. Default is
        "*".
    apiGroups: APIGroups is the API groups the resources belong to. '*' is all groups. If
        '*' is present, the length of the slice must be one. Required.
    apiVersions: APIVersions is the API versions the resources belong to. '*' is all
        versions. If '*' is present, the length of the slice must be one. Required.
    operations: Operations is the operations the admission hook cares about - CREATE,
        UPDATE, DELETE, CONNECT or * for all of those operations and any future admission
        operations that are added. If '*' is present, the length of the slice must be one.
        Required.
    resourceNames: ResourceNames is an optional white list of names that the rule applies
        to. An empty set means that everything is allowed.
    resources: Resources is a list of resources this rule applies to. For example: 'pods'
        means pods. 'pods/log' means the log subresource of pods. '*' means all resources,
        but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all
        scale subresources. '*/*' means all resources and their subresources. If wildcard
        is present, the validation rule will ensure resources do not overlap with each
        other. Depending on the enclosing object, subresources might not be allowed.
        Required.
    """

    scope: Optional[str] = None
    apiGroups: Optional[List[str]] = field(default_factory=list)
    apiVersions: Optional[List[str]] = field(default_factory=list)
    operations: Optional[List[str]] = field(default_factory=list)
    resourceNames: Optional[List[str]] = field(default_factory=list)
    resources: Optional[List[str]] = field(default_factory=list)


@dataclass
class ParamKind(HikaruBase):
    r"""
    ParamKind is a tuple of Group Kind and Version.

    Full name: ParamKind

    Attributes:
    apiVersion: APIVersion is the API group version the resources belong to. In format of
        "group/version". Required.
    kind: Kind is the API kind the resources belong to. Required.
    """

    apiVersion: Optional[str] = "v1beta1"
    kind: Optional[str] = "ParamKind"


@dataclass
class ParamRef(HikaruBase):
    r"""
    ParamRef describes how to locate the params to be used as input to expressions of
    rules applied by a policy binding.

    Full name: ParamRef

    Attributes:
    name: name is the name of the resource being referenced. One of `name` or `selector`
        must be set, but `name` and `selector` are mutually exclusive properties. If one
        is set, the other must be unset. A single parameter used for all admission
        requests can be configured by setting the `name` field, leaving `selector` blank,
        and setting namespace if `paramKind` is namespace-scoped.
    namespace: namespace is the namespace of the referenced resource. Allows limiting the
        search for params to a specific namespace. Applies to both `name` and `selector`
        fields. A per-namespace parameter may be used by specifying a namespace-scoped
        `paramKind` in the policy and leaving this field empty. - If `paramKind` is
        cluster-scoped, this field MUST be unset. Setting this field results in a
        configuration error. - If `paramKind` is namespace-scoped, the namespace of the
        object being evaluated for admission will be used when this field is left unset.
        Take care that if this is left empty the binding must not match any cluster-scoped
        resources, which will result in an error.
    parameterNotFoundAction: `parameterNotFoundAction` controls the behavior of the
        binding when the resource exists, and name or selector is valid, but there are no
        parameters matched by the binding. If the value is set to `Allow`, then no matched
        parameters will be treated as successful validation by the binding. If set to
        `Deny`, then no matched parameters will be subject to the `failurePolicy` of the
        policy. Allowed values are `Allow` or `Deny` Required
    selector: selector can be used to match multiple param objects based on their labels.
        Supply selector: {} to match all resources of the ParamKind. If multiple params
        are found, they are all evaluated with the policy expressions and the results are
        ANDed together. One of `name` or `selector` must be set, but `name` and `selector`
        are mutually exclusive properties. If one is set, the other must be unset.
    """

    name: Optional[str] = None
    namespace: Optional[str] = None
    parameterNotFoundAction: Optional[str] = None
    selector: Optional["LabelSelector"] = None


@dataclass
class TypeChecking(HikaruBase):
    r"""
    TypeChecking contains results of type checking the expressions in the
    ValidatingAdmissionPolicy

    Full name: TypeChecking

    Attributes:
    expressionWarnings: The type checking warnings for each expression.
    """

    expressionWarnings: Optional[List["ExpressionWarning"]] = field(
        default_factory=list
    )


@dataclass
class ValidatingAdmissionPolicy(HikaruDocumentBase):
    r"""
    ValidatingAdmissionPolicy describes the definition of an admission validation policy
    that accepts or rejects an object without changing it.

    Full name: ValidatingAdmissionPolicy

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object metadata; More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    spec: Specification of the desired behavior of the ValidatingAdmissionPolicy.
    status: The status of the ValidatingAdmissionPolicy, including warnings that are
        useful to determine if the policy behaves in the expected way. Populated by the
        system. Read-only.
    """

    _version = "v1beta1"
    apiVersion: Optional[str] = "admissionregistration.k8s.io/v1beta1"
    kind: Optional[str] = "ValidatingAdmissionPolicy"
    metadata: Optional["ObjectMeta"] = None
    spec: Optional["ValidatingAdmissionPolicySpec"] = None
    status: Optional["ValidatingAdmissionPolicyStatus"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def deleteCollectionValidatingAdmissionPolicy(
        continue_: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_selector: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicy"]:
        r"""
        delete collection of ValidatingAdmissionPolicy

        operationID: deleteCollectionValidatingAdmissionPolicy
        path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies

        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AdmissionregistrationV1beta1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "delete_collection_validating_admission_policy_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_collection_validating_admission_policy_with_http_info "
                "on AdmissionregistrationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["_continue"] = continue_
        all_args["dry_run"] = dry_run
        all_args["field_selector"] = field_selector
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ValidatingAdmissionPolicy"] = Response[
            "ValidatingAdmissionPolicy"
        ](result, codes_returning_objects)
        return resp

    def createValidatingAdmissionPolicy(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicy"]:
        r"""
        create a ValidatingAdmissionPolicy

        operationID: createValidatingAdmissionPolicy
        path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies

        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicy    OK
          201   ValidatingAdmissionPolicy    Created
          202   ValidatingAdmissionPolicy    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AdmissionregistrationV1beta1Api(api_client=client_to_use)
        the_method = getattr(inst, "create_validating_admission_policy_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_validating_admission_policy_with_http_info "
                "on AdmissionregistrationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        resp: Response["ValidatingAdmissionPolicy"] = Response[
            "ValidatingAdmissionPolicy"
        ](result, codes_returning_objects)
        return resp

    def create(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ValidatingAdmissionPolicy":
        r"""
            create a ValidatingAdmissionPolicy

            operationID: createValidatingAdmissionPolicy
            path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint.
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.createValidatingAdmissionPolicy(
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def deleteValidatingAdmissionPolicy(
        name: str,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicy"]:
        r"""
        delete a ValidatingAdmissionPolicy

        operationID: deleteValidatingAdmissionPolicy
        path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          202   Status    Accepted
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AdmissionregistrationV1beta1Api(api_client=client_to_use)
        the_method = getattr(inst, "delete_validating_admission_policy_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_validating_admission_policy_with_http_info "
                "on AdmissionregistrationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 202)
        resp: Response["ValidatingAdmissionPolicy"] = Response[
            "ValidatingAdmissionPolicy"
        ](result, codes_returning_objects)
        return resp

    def delete(
        self,
        name: Optional[str] = None,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ValidatingAdmissionPolicy":
        r"""
            delete a ValidatingAdmissionPolicy

            operationID: deleteValidatingAdmissionPolicy
            path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param grace_period_seconds: The duration in seconds before the object should
                be deleted. Value must be non-negative integer. The value zero
                indicates delete immediately. If this value is nil, the default
                grace period for the specified type will be used. Defaults to a per
                object value if not specified. zero means delete immediately.
            :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
                field will be deprecated in 1.7. Should the dependent objects be
                orphaned. If true/false, the "orphan" finalizer will be added
                to/removed from the object's finalizers list. Either this field or
                PropagationPolicy may be set, but not both.
            :param propagation_policy: Whether and how garbage collection will be
                performed. Either this field or OrphanDependents may be set, but not
                both. The default policy is decided by the existing finalizer set in
                the metadata.finalizers and the resource-specific default policy.
                Acceptable values are: 'Orphan' - orphan the dependents;
                'Background' - allow the garbage collector to delete the dependents
                in the background; 'Foreground' - a cascading policy that deletes
                all dependents in the foreground.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to delete() or in a "
                "ValidatingAdmissionPolicy's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.deleteValidatingAdmissionPolicy(
            name=effective_name,
            dry_run=dry_run,
            grace_period_seconds=grace_period_seconds,
            orphan_dependents=orphan_dependents,
            propagation_policy=propagation_policy,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    @staticmethod
    def readValidatingAdmissionPolicy(
        name: str,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicy"]:
        r"""
        read the specified ValidatingAdmissionPolicy

        operationID: readValidatingAdmissionPolicy
        path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}

        :param name: name for the resource
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicy    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AdmissionregistrationV1beta1Api(api_client=client_to_use)
        the_method = getattr(inst, "read_validating_admission_policy_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "read_validating_admission_policy_with_http_info "
                "on AdmissionregistrationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ValidatingAdmissionPolicy"] = Response[
            "ValidatingAdmissionPolicy"
        ](result, codes_returning_objects)
        return resp

    def read(
        self,
        name: Optional[str] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ValidatingAdmissionPolicy":
        r"""
            read the specified ValidatingAdmissionPolicy

            operationID: readValidatingAdmissionPolicy
            path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param pretty: If 'true', then the output is pretty printed.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to read() or in a "
                "ValidatingAdmissionPolicy's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.readValidatingAdmissionPolicy(
            name=effective_name, pretty=pretty, client=client
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    def patchValidatingAdmissionPolicy(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicy"]:
        r"""
        partially update the specified ValidatingAdmissionPolicy

        operationID: patchValidatingAdmissionPolicy
        path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint. This field is
            required for apply requests (application/apply-patch) but optional
            for non-apply patch types (JsonPatch, MergePatch,
            StrategicMergePatch).
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param force: Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicy    OK
          201   ValidatingAdmissionPolicy    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AdmissionregistrationV1beta1Api(api_client=client_to_use)
        the_method = getattr(inst, "patch_validating_admission_policy_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "patch_validating_admission_policy_with_http_info "
                "on AdmissionregistrationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        all_args["force"] = force
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ValidatingAdmissionPolicy"] = Response[
            "ValidatingAdmissionPolicy"
        ](result, codes_returning_objects)
        return resp

    def update(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
    ) -> "ValidatingAdmissionPolicy":
        r"""
            partially update the specified ValidatingAdmissionPolicy

            operationID: patchValidatingAdmissionPolicy
            path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint. This field is
                required for apply requests (application/apply-patch) but optional
                for non-apply patch types (JsonPatch, MergePatch,
                StrategicMergePatch).
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param force: Force is going to "force" Apply requests. It means user will
                re-acquire conflicting fields owned by other people. Force flag must
                be unset for non-apply patch requests.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.patchValidatingAdmissionPolicy(
            name=self.metadata.name,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            force=force,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def __enter__(self):
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        passed = ex_type is None and ex_value is None and ex_traceback is None
        has_rollback = hasattr(self, "__rollback")
        if passed:
            try:
                self.update()
            except Exception:
                if has_rollback:
                    self.merge(getattr(self, "__rollback"), overwrite=True)
                    delattr(self, "__rollback")
                raise
        if has_rollback:
            if not passed:
                self.merge(getattr(self, "__rollback"), overwrite=True)
            delattr(self, "__rollback")
        return False

    def replaceValidatingAdmissionPolicy(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicy"]:
        r"""
        replace the specified ValidatingAdmissionPolicy

        operationID: replaceValidatingAdmissionPolicy
        path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicy    OK
          201   ValidatingAdmissionPolicy    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AdmissionregistrationV1beta1Api(api_client=client_to_use)
        the_method = getattr(inst, "replace_validating_admission_policy_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_validating_admission_policy_with_http_info "
                "on AdmissionregistrationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ValidatingAdmissionPolicy"] = Response[
            "ValidatingAdmissionPolicy"
        ](result, codes_returning_objects)
        return resp

    def replaceValidatingAdmissionPolicyStatus(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicy"]:
        r"""
        replace status of the specified ValidatingAdmissionPolicy

        operationID: replaceValidatingAdmissionPolicyStatus
        path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}/status

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicy    OK
          201   ValidatingAdmissionPolicy    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AdmissionregistrationV1beta1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "replace_validating_admission_policy_status_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_validating_admission_policy_status_with_http_info "
                "on AdmissionregistrationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ValidatingAdmissionPolicy"] = Response[
            "ValidatingAdmissionPolicy"
        ](result, codes_returning_objects)
        return resp


@dataclass
class ValidatingAdmissionPolicyBinding(HikaruDocumentBase):
    r"""
    ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized
    resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how
    cluster administrators configure policies for clusters. For a given admission request,
    each binding will cause its policy to be evaluated N times, where N is 1 for
    policies/bindings that don't use params, otherwise N is the number of parameters
    selected by the binding. The CEL expressions of a policy must have a computed CEL cost
    below the maximum CEL budget. Each evaluation of the policy is given an independent
    CEL cost budget. Adding/removing policies, bindings, or params can not affect whether
    a given (policy, binding, param) combination is within its own CEL budget.

    Full name: ValidatingAdmissionPolicyBinding

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object metadata; More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    spec: Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
    """

    _version = "v1beta1"
    apiVersion: Optional[str] = "admissionregistration.k8s.io/v1beta1"
    kind: Optional[str] = "ValidatingAdmissionPolicyBinding"
    metadata: Optional["ObjectMeta"] = None
    spec: Optional["ValidatingAdmissionPolicyBindingSpec"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def deleteCollectionValidatingAdmissionPolicyBinding(
        continue_: Optional[str] = None,
        dry_run: Optional[str] = None,
        field_selector: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicyBinding"]:
        r"""
        delete collection of ValidatingAdmissionPolicyBinding

        operationID: deleteCollectionValidatingAdmissionPolicyBinding
        path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings

        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AdmissionregistrationV1beta1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "delete_collection_validating_admission_policy_binding_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_collection_validating_admission_policy_binding_with_http_info "
                "on AdmissionregistrationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["_continue"] = continue_
        all_args["dry_run"] = dry_run
        all_args["field_selector"] = field_selector
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ValidatingAdmissionPolicyBinding"] = Response[
            "ValidatingAdmissionPolicyBinding"
        ](result, codes_returning_objects)
        return resp

    def createValidatingAdmissionPolicyBinding(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicyBinding"]:
        r"""
        create a ValidatingAdmissionPolicyBinding

        operationID: createValidatingAdmissionPolicyBinding
        path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings

        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicyBinding    OK
          201   ValidatingAdmissionPolicyBinding    Created
          202   ValidatingAdmissionPolicyBinding    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AdmissionregistrationV1beta1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "create_validating_admission_policy_binding_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_validating_admission_policy_binding_with_http_info "
                "on AdmissionregistrationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        resp: Response["ValidatingAdmissionPolicyBinding"] = Response[
            "ValidatingAdmissionPolicyBinding"
        ](result, codes_returning_objects)
        return resp

    def create(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ValidatingAdmissionPolicyBinding":
        r"""
            create a ValidatingAdmissionPolicyBinding

            operationID: createValidatingAdmissionPolicyBinding
            path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint.
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.createValidatingAdmissionPolicyBinding(
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    @staticmethod
    def deleteValidatingAdmissionPolicyBinding(
        name: str,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        body: Optional["DeleteOptions"] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicyBinding"]:
        r"""
        delete a ValidatingAdmissionPolicyBinding

        operationID: deleteValidatingAdmissionPolicyBinding
        path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param grace_period_seconds: The duration in seconds before the object should
            be deleted. Value must be non-negative integer. The value zero
            indicates delete immediately. If this value is nil, the default
            grace period for the specified type will be used. Defaults to a per
            object value if not specified. zero means delete immediately.
        :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
            field will be deprecated in 1.7. Should the dependent objects be
            orphaned. If true/false, the "orphan" finalizer will be added
            to/removed from the object's finalizers list. Either this field or
            PropagationPolicy may be set, but not both.
        :param propagation_policy: Whether and how garbage collection will be
            performed. Either this field or OrphanDependents may be set, but not
            both. The default policy is decided by the existing finalizer set in
            the metadata.finalizers and the resource-specific default policy.
            Acceptable values are: 'Orphan' - orphan the dependents;
            'Background' - allow the garbage collector to delete the dependents
            in the background; 'Foreground' - a cascading policy that deletes
            all dependents in the foreground.
        :param body:
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   Status    OK
          202   Status    Accepted
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AdmissionregistrationV1beta1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "delete_validating_admission_policy_binding_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "delete_validating_admission_policy_binding_with_http_info "
                "on AdmissionregistrationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["grace_period_seconds"] = grace_period_seconds
        all_args["orphan_dependents"] = orphan_dependents
        all_args["propagation_policy"] = propagation_policy
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 202)
        resp: Response["ValidatingAdmissionPolicyBinding"] = Response[
            "ValidatingAdmissionPolicyBinding"
        ](result, codes_returning_objects)
        return resp

    def delete(
        self,
        name: Optional[str] = None,
        dry_run: Optional[str] = None,
        grace_period_seconds: Optional[int] = None,
        orphan_dependents: Optional[bool] = None,
        propagation_policy: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ValidatingAdmissionPolicyBinding":
        r"""
            delete a ValidatingAdmissionPolicyBinding

            operationID: deleteValidatingAdmissionPolicyBinding
            path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param grace_period_seconds: The duration in seconds before the object should
                be deleted. Value must be non-negative integer. The value zero
                indicates delete immediately. If this value is nil, the default
                grace period for the specified type will be used. Defaults to a per
                object value if not specified. zero means delete immediately.
            :param orphan_dependents: Deprecated: please use the PropagationPolicy, this
                field will be deprecated in 1.7. Should the dependent objects be
                orphaned. If true/false, the "orphan" finalizer will be added
                to/removed from the object's finalizers list. Either this field or
                PropagationPolicy may be set, but not both.
            :param propagation_policy: Whether and how garbage collection will be
                performed. Either this field or OrphanDependents may be set, but not
                both. The default policy is decided by the existing finalizer set in
                the metadata.finalizers and the resource-specific default policy.
                Acceptable values are: 'Orphan' - orphan the dependents;
                'Background' - allow the garbage collector to delete the dependents
                in the background; 'Foreground' - a cascading policy that deletes
                all dependents in the foreground.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to delete() or in a "
                "ValidatingAdmissionPolicyBinding's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.deleteValidatingAdmissionPolicyBinding(
            name=effective_name,
            dry_run=dry_run,
            grace_period_seconds=grace_period_seconds,
            orphan_dependents=orphan_dependents,
            propagation_policy=propagation_policy,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    @staticmethod
    def readValidatingAdmissionPolicyBinding(
        name: str,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicyBinding"]:
        r"""
        read the specified ValidatingAdmissionPolicyBinding

        operationID: readValidatingAdmissionPolicyBinding
        path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings/{name}

        :param name: name for the resource
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicyBinding    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AdmissionregistrationV1beta1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "read_validating_admission_policy_binding_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "read_validating_admission_policy_binding_with_http_info "
                "on AdmissionregistrationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ValidatingAdmissionPolicyBinding"] = Response[
            "ValidatingAdmissionPolicyBinding"
        ](result, codes_returning_objects)
        return resp

    def read(
        self,
        name: Optional[str] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
    ) -> "ValidatingAdmissionPolicyBinding":
        r"""
            read the specified ValidatingAdmissionPolicyBinding

            operationID: readValidatingAdmissionPolicyBinding
            path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings/{name}

            :param name: name for the resource. NOTE: if you leave out the name from the
                arguments you *must* have filled in the name attribute in the
                metadata for the resource!
            :param pretty: If 'true', then the output is pretty printed.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        if name is not None:
            effective_name = name
        elif not self.metadata or not self.metadata.name:
            raise RuntimeError(
                "There must be a name supplied in either "
                "the arguments to read() or in a "
                "ValidatingAdmissionPolicyBinding's metadata"
            )
        else:
            effective_name = self.metadata.name
        res = self.readValidatingAdmissionPolicyBinding(
            name=effective_name, pretty=pretty, client=client
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        elif isinstance(res.obj, Status):
            self._status = res.obj
        return self

    def patchValidatingAdmissionPolicyBinding(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicyBinding"]:
        r"""
        partially update the specified ValidatingAdmissionPolicyBinding

        operationID: patchValidatingAdmissionPolicyBinding
        path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint. This field is
            required for apply requests (application/apply-patch) but optional
            for non-apply patch types (JsonPatch, MergePatch,
            StrategicMergePatch).
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param force: Force is going to "force" Apply requests. It means user will
            re-acquire conflicting fields owned by other people. Force flag must
            be unset for non-apply patch requests.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicyBinding    OK
          201   ValidatingAdmissionPolicyBinding    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AdmissionregistrationV1beta1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "patch_validating_admission_policy_binding_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "patch_validating_admission_policy_binding_with_http_info "
                "on AdmissionregistrationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        all_args["force"] = force
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ValidatingAdmissionPolicyBinding"] = Response[
            "ValidatingAdmissionPolicyBinding"
        ](result, codes_returning_objects)
        return resp

    def update(
        self,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        force: Optional[bool] = None,
        client: ApiClient = None,
    ) -> "ValidatingAdmissionPolicyBinding":
        r"""
            partially update the specified ValidatingAdmissionPolicyBinding

            operationID: patchValidatingAdmissionPolicyBinding
            path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings/{name}

            :param dry_run: When present, indicates that modifications should not be
                persisted. An invalid or unrecognized dryRun directive will result
                in an error response and no further processing of the request. Valid
                values are: - All: all dry run stages will be processed
            :param field_manager: fieldManager is a name associated with the actor or
                entity that is making these changes. The value must be less than or
                128 characters long, and only contain printable characters, as
                defined by https://golang.org/pkg/unicode/#IsPrint. This field is
                required for apply requests (application/apply-patch) but optional
                for non-apply patch types (JsonPatch, MergePatch,
                StrategicMergePatch).
            :param field_validation: fieldValidation instructs the server on how to handle
                objects in the request (POST/PUT/PATCH) containing unknown or
                duplicate fields. Valid values are: - Ignore: This will ignore any
                unknown fields that are silently dropped from the object, and will
                ignore all but the last duplicate field that the decoder encounters.
                This is the default behavior prior to v1.23. - Warn: This will send
                a warning via the standard warning response header for each unknown
                field that is dropped from the object, and for each duplicate field
                that is encountered. The request will still succeed if there are no
                other errors, and will only persist the last of any duplicate
                fields. This is the default in v1.23+ - Strict: This will fail the
                request with a BadRequest error if any unknown fields would be
                dropped from the object, or if any duplicate fields are present. The
                error returned from the server will contain all unknown and
                duplicate fields encountered.
            :param force: Force is going to "force" Apply requests. It means user will
                re-acquire conflicting fields owned by other people. Force flag must
                be unset for non-apply patch requests.
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.patchValidatingAdmissionPolicyBinding(
            name=self.metadata.name,
            dry_run=dry_run,
            field_manager=field_manager,
            field_validation=field_validation,
            force=force,
            client=client,
        )
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self

    def __enter__(self):
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        passed = ex_type is None and ex_value is None and ex_traceback is None
        has_rollback = hasattr(self, "__rollback")
        if passed:
            try:
                self.update()
            except Exception:
                if has_rollback:
                    self.merge(getattr(self, "__rollback"), overwrite=True)
                    delattr(self, "__rollback")
                raise
        if has_rollback:
            if not passed:
                self.merge(getattr(self, "__rollback"), overwrite=True)
            delattr(self, "__rollback")
        return False

    def replaceValidatingAdmissionPolicyBinding(
        self,
        name: str,
        dry_run: Optional[str] = None,
        field_manager: Optional[str] = None,
        field_validation: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicyBinding"]:
        r"""
        replace the specified ValidatingAdmissionPolicyBinding

        operationID: replaceValidatingAdmissionPolicyBinding
        path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings/{name}

        :param name: name for the resource
        :param dry_run: When present, indicates that modifications should not be
            persisted. An invalid or unrecognized dryRun directive will result
            in an error response and no further processing of the request. Valid
            values are: - All: all dry run stages will be processed
        :param field_manager: fieldManager is a name associated with the actor or
            entity that is making these changes. The value must be less than or
            128 characters long, and only contain printable characters, as
            defined by https://golang.org/pkg/unicode/#IsPrint.
        :param field_validation: fieldValidation instructs the server on how to handle
            objects in the request (POST/PUT/PATCH) containing unknown or
            duplicate fields. Valid values are: - Ignore: This will ignore any
            unknown fields that are silently dropped from the object, and will
            ignore all but the last duplicate field that the decoder encounters.
            This is the default behavior prior to v1.23. - Warn: This will send
            a warning via the standard warning response header for each unknown
            field that is dropped from the object, and for each duplicate field
            that is encountered. The request will still succeed if there are no
            other errors, and will only persist the last of any duplicate
            fields. This is the default in v1.23+ - Strict: This will fail the
            request with a BadRequest error if any unknown fields would be
            dropped from the object, or if any duplicate fields are present. The
            error returned from the server will contain all unknown and
            duplicate fields encountered.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicyBinding    OK
          201   ValidatingAdmissionPolicyBinding    Created
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AdmissionregistrationV1beta1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "replace_validating_admission_policy_binding_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "replace_validating_admission_policy_binding_with_http_info "
                "on AdmissionregistrationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["name"] = name
        all_args["dry_run"] = dry_run
        all_args["field_manager"] = field_manager
        all_args["field_validation"] = field_validation
        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201)
        resp: Response["ValidatingAdmissionPolicyBinding"] = Response[
            "ValidatingAdmissionPolicyBinding"
        ](result, codes_returning_objects)
        return resp


@dataclass
class ValidatingAdmissionPolicyBindingList(HikaruDocumentBase):
    r"""
    ValidatingAdmissionPolicyBindingList is a list of ValidatingAdmissionPolicyBinding.

    Full name: ValidatingAdmissionPolicyBindingList

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    items: List of PolicyBinding.
    """

    _version = "v1beta1"
    apiVersion: Optional[str] = "admissionregistration.k8s.io/v1beta1"
    kind: Optional[str] = "ValidatingAdmissionPolicyBindingList"
    metadata: Optional["ListMeta"] = None
    items: Optional[List["ValidatingAdmissionPolicyBinding"]] = field(
        default_factory=list
    )
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def listValidatingAdmissionPolicyBinding(
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicyBindingList"]:
        r"""
        list or watch objects of kind ValidatingAdmissionPolicyBinding

        operationID: listValidatingAdmissionPolicyBinding
        path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings

        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicyBindingList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AdmissionregistrationV1beta1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "list_validating_admission_policy_binding_with_http_info"
        )
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_validating_admission_policy_binding_with_http_info "
                "on AdmissionregistrationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ValidatingAdmissionPolicyBindingList"] = Response[
            "ValidatingAdmissionPolicyBindingList"
        ](result, codes_returning_objects)
        return resp

    _watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".admissionregistration_v1beta1_api",
        "AdmissionregistrationV1beta1Api",
        "list_validating_admission_policy_binding",
    )


@dataclass
class ValidatingAdmissionPolicyBindingSpec(HikaruBase):
    r"""
    ValidatingAdmissionPolicyBindingSpec is the specification of the
    ValidatingAdmissionPolicyBinding.

    Full name: ValidatingAdmissionPolicyBindingSpec

    Attributes:
    matchResources: MatchResources declares what resources match this binding and will be
        validated by it. Note that this is intersected with the policy's matchConstraints,
        so only requests that are matched by the policy can be selected by this. If this
        is unset, all resources matched by the policy are validated by this binding When
        resourceRules is unset, it does not constrain resource matching. If a resource is
        matched by the other fields of this object, it will be validated. Note that this
        is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules
        are required.
    paramRef: paramRef specifies the parameter resource used to configure the admission
        control policy. It should point to a resource of the type specified in ParamKind
        of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and
        the resource referred to by ParamRef does not exist, this binding is considered
        mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied. If
        the policy does not specify a ParamKind then this field is ignored, and the rules
        are evaluated without a param.
    policyName: PolicyName references a ValidatingAdmissionPolicy name which the
        ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not
        exist, this binding is considered invalid and will be ignored Required.
    validationActions: validationActions declares how Validations of the referenced
        ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is
        always enforced according to these actions. Failures defined by the
        ValidatingAdmissionPolicy's FailurePolicy are enforced according to these actions
        only if the FailurePolicy is set to Fail, otherwise the failures are ignored. This
        includes compilation errors, runtime errors and misconfigurations of the policy.
        validationActions is declared as a set of action values. Order does not matter.
        validationActions may not contain duplicates of the same action. The supported
        actions values are: "Deny" specifies that a validation failure results in a denied
        request. "Warn" specifies that a validation failure is reported to the request
        client in HTTP Warning headers, with a warning code of 299. Warnings can be sent
        both for allowed or denied admission responses. "Audit" specifies that a
        validation failure is included in the published audit event for the request. The
        audit event will contain a `validation.policy.admission.k8s.io/validation_failure`
        audit annotation with a value containing the details of the validation failures,
        formatted as a JSON list of objects, each with the following fields: - message:
        The validation failure message string - policy: The resource name of the
        ValidatingAdmissionPolicy - binding: The resource name of the
        ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed
        validations in the ValidatingAdmissionPolicy - validationActions: The enforcement
        actions enacted for the validation failure Example audit annotation:
        `"validation.policy.admission.k8s.io/validation_failure": "[{"message": "Invalid
        value", {"policy": "policy.example.com", {"binding": "policybinding.example.com",
        {"expressionIndex": "1", {"validationActions": ["Audit"]}]"` Clients should expect
        to handle additional values by ignoring any values not recognized. "Deny" and
        "Warn" may not be used together since this combination needlessly duplicates the
        validation failure both in the API response body and the HTTP warning headers.
        Required.
    """

    matchResources: Optional["MatchResources"] = None
    paramRef: Optional["ParamRef"] = None
    policyName: Optional[str] = None
    validationActions: Optional[List[str]] = field(default_factory=list)


@dataclass
class ValidatingAdmissionPolicyList(HikaruDocumentBase):
    r"""
    ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.

    Full name: ValidatingAdmissionPolicyList

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    items: List of ValidatingAdmissionPolicy.
    """

    _version = "v1beta1"
    apiVersion: Optional[str] = "admissionregistration.k8s.io/v1beta1"
    kind: Optional[str] = "ValidatingAdmissionPolicyList"
    metadata: Optional["ListMeta"] = None
    items: Optional[List["ValidatingAdmissionPolicy"]] = field(default_factory=list)
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    @staticmethod
    def listValidatingAdmissionPolicy(
        allow_watch_bookmarks: Optional[bool] = None,
        continue_: Optional[str] = None,
        field_selector: Optional[str] = None,
        label_selector: Optional[str] = None,
        limit: Optional[int] = None,
        resource_version: Optional[str] = None,
        resource_version_match: Optional[str] = None,
        send_initial_events: Optional[bool] = None,
        timeout_seconds: Optional[int] = None,
        watch: Optional[bool] = None,
        pretty: Optional[str] = None,
        client: ApiClient = None,
        async_req: bool = False,
    ) -> Response["ValidatingAdmissionPolicyList"]:
        r"""
        list or watch objects of kind ValidatingAdmissionPolicy

        operationID: listValidatingAdmissionPolicy
        path: /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies

        :param allow_watch_bookmarks: allowWatchBookmarks requests watch events with
            type "BOOKMARK". Servers that do not implement bookmarks may ignore
            this flag and bookmarks are sent at the server's discretion. Clients
            should not assume bookmarks are returned at any specific interval,
            nor may they assume the server will send any BOOKMARK event during a
            session. If this is not a watch, this field is ignored.
        :param continue_: The continue option should be set when retrieving more
            results from the server. Since this value is server defined, clients
            may only use the continue value from a previous query result with
            identical query parameters (except for the value of continue) and
            the server may reject a continue value it does not recognize. If the
            specified continue value is no longer valid whether due to
            expiration (generally five to fifteen minutes) or a configuration
            change on the server, the server will respond with a 410
            ResourceExpired error together with a continue token. If the client
            needs a consistent list, it must restart their list without the
            continue field. Otherwise, the client may send another list request
            with the token received with the 410 error, the server will respond
            with a list starting from the next key, but from the latest
            snapshot, which is inconsistent from the previous list results -
            objects that are created, modified, or deleted after the first list
            request will be included in the response, as long as their keys are
            after the "next key". This field is not supported when watch is
            true. Clients may start a watch from the last resourceVersion value
            returned by the server and not miss any modifications.
        :param field_selector: A selector to restrict the list of returned objects by
            their fields. Defaults to everything.
        :param label_selector: A selector to restrict the list of returned objects by
            their labels. Defaults to everything.
        :param limit: limit is a maximum number of responses to return for a list call.
            If more items exist, the server will set the `continue` field on the
            list metadata to a value that can be used with the same initial
            query to retrieve the next set of results. Setting a limit may
            return fewer than the requested amount of items (up to zero items)
            in the event all requested objects are filtered out and clients
            should only use the presence of the continue field to determine
            whether more results are available. Servers may choose not to
            support the limit argument and will return all of the available
            results. If limit is specified and the continue field is empty,
            clients may assume that no more results are available. This field is
            not supported if watch is true. The server guarantees that the
            objects returned when using continue will be identical to issuing a
            single list call without a limit - that is, no objects created,
            modified, or deleted after the first request is issued will be
            included in any subsequent continued requests. This is sometimes
            referred to as a consistent snapshot, and ensures that a client that
            is using limit to receive smaller chunks of a very large result can
            ensure they see all possible objects. If objects are updated during
            a chunked list the version of the object that was present at the
            time the first list result was calculated is returned.
        :param resource_version: resourceVersion sets a constraint on what resource
            versions a request may be served from. See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param resource_version_match: resourceVersionMatch determines how
            resourceVersion is applied to list calls. It is highly recommended
            that resourceVersionMatch be set for list calls where
            resourceVersion is set See
            https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
            for details. Defaults to unset
        :param send_initial_events: `sendInitialEvents=true` may be set together with
            `watch=true`. In that case, the watch stream will begin with
            synthetic events to produce the current state of objects in the
            collection. Once all such events have been sent, a synthetic
            "Bookmark" event will be sent. The bookmark will report the
            ResourceVersion (RV) corresponding to the set of objects, and be
            marked with `"k8s.io/initial-events-end": "true"` annotation.
            Afterwards, the watch stream will proceed as usual, sending watch
            events corresponding to changes (subsequent to the RV) to objects
            watched. When `sendInitialEvents` option is set, we require
            `resourceVersionMatch` option to also be set. The semantic of the
            watch request is as following: - `resourceVersionMatch` =
            NotOlderThan is interpreted as "data at least as new as the provided
            `resourceVersion`" and the bookmark event is send when the state is
            synced to a `resourceVersion` at least as fresh as the one provided
            by the ListOptions. If `resourceVersion` is unset, this is
            interpreted as "consistent read" and the bookmark event is send when
            the state is synced at least to the moment when request started
            being processed. - `resourceVersionMatch` set to any other value or
            unset Invalid error is returned. Defaults to true if
            `resourceVersion=""` or `resourceVersion="0"` (for backward
            compatibility reasons) and to false otherwise.
        :param timeout_seconds: Timeout for the list/watch call. This limits the
            duration of the call, regardless of any activity or inactivity.
        :param watch: Watch for changes to the described resources and return them as a
            stream of add, update, and remove notifications. Specify
            resourceVersion.
        :param pretty: If 'true', then the output is pretty printed.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   ValidatingAdmissionPolicyList    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = AdmissionregistrationV1beta1Api(api_client=client_to_use)
        the_method = getattr(inst, "list_validating_admission_policy_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "list_validating_admission_policy_with_http_info "
                "on AdmissionregistrationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()
        all_args["allow_watch_bookmarks"] = allow_watch_bookmarks
        all_args["_continue"] = continue_
        all_args["field_selector"] = field_selector
        all_args["label_selector"] = label_selector
        all_args["limit"] = limit
        all_args["resource_version"] = resource_version
        all_args["resource_version_match"] = resource_version_match
        all_args["send_initial_events"] = send_initial_events
        all_args["timeout_seconds"] = timeout_seconds
        all_args["watch"] = watch
        all_args["pretty"] = pretty
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200,)
        resp: Response["ValidatingAdmissionPolicyList"] = Response[
            "ValidatingAdmissionPolicyList"
        ](result, codes_returning_objects)
        return resp

    _watcher = WatcherDescriptor(
        "kubernetes.client.api",
        ".admissionregistration_v1beta1_api",
        "AdmissionregistrationV1beta1Api",
        "list_validating_admission_policy",
    )


@dataclass
class ValidatingAdmissionPolicySpec(HikaruBase):
    r"""
    ValidatingAdmissionPolicySpec is the specification of the desired behavior of the
    AdmissionPolicy.

    Full name: ValidatingAdmissionPolicySpec

    Attributes:
    failurePolicy: failurePolicy defines how to handle failures for the admission policy.
        Failures can occur from CEL expression parse errors, type check errors, runtime
        errors and invalid or mis-configured policy definitions or bindings. A policy is
        invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if
        spec.paramRef.name refers to a non-existent resource. failurePolicy does not
        define how validations that evaluate to false are handled. When failurePolicy is
        set to Fail, ValidatingAdmissionPolicyBinding validationActions define how
        failures are enforced. Allowed values are Ignore or Fail. Defaults to Fail.
    matchConstraints: MatchConstraints specifies what resources this policy is designed to
        validate. The AdmissionPolicy cares about a request if it matches _all_
        Constraints. However, in order to prevent clusters from being put into an unstable
        state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot
        match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.
    paramKind: ParamKind specifies the kind of resources used to parameterize this policy.
        If absent, there are no parameters for this policy and the param CEL variable will
        not be provided to validation expressions. If ParamKind refers to a non-existent
        kind, this policy definition is mis-configured and the FailurePolicy is applied.
        If paramKind is specified but paramRef is unset in
        ValidatingAdmissionPolicyBinding, the params variable will be null.
    auditAnnotations: auditAnnotations contains CEL expressions which are used to produce
        audit annotations for the audit event of the API request. validations and
        auditAnnotations may not both be empty; a least one of validations or
        auditAnnotations is required.
    matchConditions: MatchConditions is a list of conditions that must be met for a
        request to be validated. Match conditions filter requests that have already been
        matched by the rules, namespaceSelector, and objectSelector. An empty list of
        matchConditions matches all requests. There are a maximum of 64 match conditions
        allowed. If a parameter object is provided, it can be accessed via the `params`
        handle in the same manner as validation expressions. The exact matching logic is
        (in order): 1. If ANY matchCondition evaluates to FALSE, the policy is skipped. 2.
        If ALL matchConditions evaluate to TRUE, the policy is evaluated. 3. If any
        matchCondition evaluates to an error (but none are FALSE): - If
        failurePolicy=Fail, reject the request - If failurePolicy=Ignore, the policy is
        skipped
    validations: Validations contain CEL expressions which is used to apply the
        validation. Validations and AuditAnnotations may not both be empty; a minimum of
        one Validations or AuditAnnotations is required.
    variables: Variables contain definitions of variables that can be used in composition
        of other expressions. Each variable is defined as a named CEL expression. The
        variables defined here will be available under `variables` in other expressions of
        the policy except MatchConditions because MatchConditions are evaluated before the
        rest of the policy. The expression of a variable can refer to other variables
        defined earlier in the list but not those after. Thus, Variables must be sorted by
        the order of first appearance and acyclic.
    """

    failurePolicy: Optional[str] = None
    matchConstraints: Optional["MatchResources"] = None
    paramKind: Optional["ParamKind"] = None
    auditAnnotations: Optional[List["AuditAnnotation"]] = field(default_factory=list)
    matchConditions: Optional[List["MatchCondition"]] = field(default_factory=list)
    validations: Optional[List["Validation"]] = field(default_factory=list)
    variables: Optional[List["Variable"]] = field(default_factory=list)


@dataclass
class ValidatingAdmissionPolicyStatus(HikaruBase):
    r"""
    ValidatingAdmissionPolicyStatus represents the status of an admission validation
    policy.

    Full name: ValidatingAdmissionPolicyStatus

    Attributes:
    observedGeneration: The generation observed by the controller.
    typeChecking: The results of type checking for each expression. Presence of this field
        indicates the completion of the type checking.
    conditions: The conditions represent the latest available observations of a policy's
        current state.
    """

    observedGeneration: Optional[int] = None
    typeChecking: Optional["TypeChecking"] = None
    conditions: Optional[List["Condition"]] = field(default_factory=list)


@dataclass
class Validation(HikaruBase):
    r"""
    Validation specifies the CEL expression which is used to apply the validation.

    Full name: Validation

    Attributes:
    expression: Expression represents the expression which will be evaluated by CEL. ref:
        https://github.com/google/cel-spec CEL expressions have access to the contents of
        the API request/response, organized into CEL variables as well as some other
        useful variables: - 'object' - The object from the incoming request. The value is
        null for DELETE requests. - 'oldObject' - The existing object. The value is null
        for CREATE requests. - 'request' - Attributes of the API
        request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' -
        Parameter resource referred to by the policy binding being evaluated. Only
        populated if the policy has a ParamKind. - 'namespaceObject' - The namespace
        object that the incoming object belongs to. The value is null for cluster-scoped
        resources. - 'variables' - Map of composited variables, from its name to its
        lazily evaluated value. For example, a variable named 'foo' can be accessed as
        'variables.foo'. - 'authorizer' - A CEL Authorizer. May be used to perform
        authorization checks for the principal (user or service account) of the request.
        See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz -
        'authorizer.requestResource' - A CEL ResourceCheck constructed from the
        'authorizer' and configured with the request resource. The `apiVersion`, `kind`,
        `metadata.name` and `metadata.generateName` are always accessible from the root of
        the object. No other metadata properties are accessible. Only property names of
        the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names
        are escaped according to the following rules when accessed in the expression: -
        '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to
        '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL
        RESERVED keyword escape to '__{keyword}__'. The keywords are: "true", "false",
        "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
        "import", "let", "loop", "package", "namespace", "return". Examples: - Expression
        accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
        - Expression accessing a property named "x-prop": {"Expression":
        "object.x__dash__prop > 0"} - Expression accessing a property named "redact__d":
        {"Expression": "object.redact__underscores__d > 0"} Equality on arrays with list
        type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation
        on arrays with x-kubernetes-list-type use the semantics of the list type: - 'set':
        `X + Y` performs a union where the array positions of all elements in `X` are
        preserved and non-intersecting elements in `Y` are appended, retaining their
        partial order. - 'map': `X + Y` performs a merge where the array positions of all
        keys in `X` are preserved but the values are overwritten by values in `Y` when the
        key sets of `X` and `Y` intersect. Elements in `Y` with non-intersecting keys are
        appended, retaining their partial order. Required.
    message: Message represents the message displayed when validation fails. The message
        is required if the Expression contains line breaks. The message must not contain
        line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL
        with the host matching spec.host" If the Expression contains line breaks. Message
        is required. The message must not contain line breaks. If unset, the message is
        "failed Expression: {Expression}".
    messageExpression: messageExpression declares a CEL expression that evaluates to the
        validation failure message that is returned when this rule fails. Since
        messageExpression is used as a failure message, it must evaluate to a string. If
        both message and messageExpression are present on a validation, then
        messageExpression will be used if validation fails. If messageExpression results
        in a runtime error, the runtime error is logged, and the validation failure
        message is produced as if the messageExpression field were unset. If
        messageExpression evaluates to an empty string, a string with only spaces, or a
        string that contains line breaks, then the validation failure message will also be
        produced as if the messageExpression field were unset, and the fact that
        messageExpression produced an empty string/string with only spaces/string with
        line breaks will be logged. messageExpression has access to all the same variables
        as the `expression` except for 'authorizer' and 'authorizer.requestResource'.
        Example: "object.x must be less than max ("+string(params.max)+")"
    reason: Reason represents a machine-readable description of why this validation
        failed. If this is the first validation in the list to fail, this reason, as well
        as the corresponding HTTP response code, are used in the HTTP response to the
        client. The currently supported reasons are: "Unauthorized", "Forbidden",
        "Invalid", "RequestEntityTooLarge". If not set, StatusReasonInvalid is used in the
        response to the client.
    """

    expression: str
    message: Optional[str] = None
    messageExpression: Optional[str] = None
    reason: Optional[str] = None


@dataclass
class Variable(HikaruBase):
    r"""
    Variable is the definition of a variable that is used for composition. A variable is
    defined as a named expression.

    Full name: Variable

    Attributes:
    expression: Expression is the expression that will be evaluated as the value of the
        variable. The CEL expression has access to the same identifiers as the CEL
        expressions in Validation.
    name: Name is the name of the variable. The name must be a valid CEL identifier and
        unique among all variables. The variable can be accessed in other expressions
        through `variables` For example, if name is "foo", the variable will be available
        as `variables.foo`
    """

    expression: str
    name: str


@dataclass
class SelfSubjectReview(HikaruDocumentBase):
    r"""
    SelfSubjectReview contains the user information that the kube-apiserver has about the
    user making this request. When using impersonation, users will receive the user info
    of the user being impersonated. If impersonation or request header authentication is
    used, any extra keys will have their case ignored and returned as lowercase.

    Full name: SelfSubjectReview

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    status: Status is filled in by the server with the user attributes.
    """

    _version = "v1beta1"
    apiVersion: Optional[str] = "authentication.k8s.io/v1beta1"
    kind: Optional[str] = "SelfSubjectReview"
    metadata: Optional["ObjectMeta"] = None
    status: Optional["SelfSubjectReviewStatus"] = None
    # noinspection PyDataclass
    client: InitVar[Optional[ApiClient]] = None

    def createSelfSubjectReview(
        self, client: ApiClient = None, async_req: bool = False
    ) -> Response["SelfSubjectReview"]:
        r"""
        create a SelfSubjectReview

        operationID: createSelfSubjectReview
        path: /apis/authentication.k8s.io/v1beta1/selfsubjectreviews
        :param client: optional; instance of kubernetes.client.api_client.ApiClient
        :param async_req: bool; if True, call is async and the caller must invoke
            .get() on the returned Response object. Default is False, which makes
            the call blocking.

        :return: hikaru.utils.Response[T] instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   SelfSubjectReview    OK
          201   SelfSubjectReview    Created
          202   SelfSubjectReview    Accepted
          401   None    Unauthorized
        """
        if client is not None:
            client_to_use = client
        else:
            # noinspection PyDataclass
            client_to_use = self.client
        inst = AuthenticationV1beta1Api(api_client=client_to_use)
        the_method = getattr(inst, "create_self_subject_review_with_http_info")
        if the_method is None:  # pragma: no cover
            raise RuntimeError(
                "Unable to locate method "
                "create_self_subject_review_with_http_info "
                "on AuthenticationV1beta1Api; possible release mismatch?"
            )
        all_args = dict()

        body = get_clean_dict(self)
        all_args["body"] = body
        all_args["async_req"] = async_req
        result = the_method(**all_args)
        codes_returning_objects = (200, 201, 202)
        resp: Response["SelfSubjectReview"] = Response["SelfSubjectReview"](
            result, codes_returning_objects
        )
        return resp

    def create(self, client: ApiClient = None) -> "SelfSubjectReview":
        r"""
            create a SelfSubjectReview

            operationID: createSelfSubjectReview
            path: /apis/authentication.k8s.io/v1beta1/selfsubjectreviews
            :param client: optional; instance of kubernetes.client.api_client.ApiClient
            :return: returns self; the state of self may be permuted with a returned
                HikaruDocumentBase object, whose values will be merged into self
        (if of the same type).
            :raises: KubernetesException. Raised only by the CRUD methods to signal
                that a return code of 400 or higher was returned by the underlying
                Kubernetes library.
        """

        # noinspection PyDataclass
        client = client or self.client

        res = self.createSelfSubjectReview(client=client)
        if not 200 <= res.code <= 299:
            raise KubernetesException("Kubernetes returned error " + str(res.code))
        if self.__class__.__name__ == res.obj.__class__.__name__:
            self.merge(res.obj, overwrite=True)
        return self


@dataclass
class SelfSubjectReviewStatus(HikaruBase):
    r"""
    SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.

    Full name: SelfSubjectReviewStatus

    Attributes:
    userInfo: User attributes of the user making this request.
    """

    userInfo: Optional["UserInfo"] = None


ValidatingAdmissionPolicyBinding._watcher_cls = ValidatingAdmissionPolicyBindingList
ValidatingAdmissionPolicy._watcher_cls = ValidatingAdmissionPolicyList


globs = dict(globals())
__all__ = [c.__name__ for c in globs.values()
           if type(c) == type]
del globs
